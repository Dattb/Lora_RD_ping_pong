
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800b228  0800b228  0001b228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b558  0800b558  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b560  0800b560  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b560  0800b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800b570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000038  0800b5a8  00020038  2**2
                  ALLOC
 10 RAM1_region   00000000  20000780  20000780  00020038  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020038  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000780  20000780  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   000305a1  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000657b  00000000  00000000  00050603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f00  00000000  00000000  00056b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001cb8  00000000  00000000  00058a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024403  00000000  00000000  0005a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022a21  00000000  00000000  0007eb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc13e  00000000  00000000  000a155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0016d69a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007d90  00000000  00000000  0016d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000038 	.word	0x20000038
 8000154:	00000000 	.word	0x00000000
 8000158:	0800b210 	.word	0x0800b210

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000003c 	.word	0x2000003c
 8000174:	0800b210 	.word	0x0800b210

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96c 	b.w	8000478 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468e      	mov	lr, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8082 	bne.w	80002ce <__udivmoddi4+0x116>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d946      	bls.n	800025e <__udivmoddi4+0xa6>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa05 f302 	lsl.w	r3, r5, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0e03 	orr.w	lr, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbe fcf8 	udiv	ip, lr, r8
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001fa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001fe:	fb0c f001 	mul.w	r0, ip, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f10c 35ff 	add.w	r5, ip, #4294967295
 800020c:	f080 8116 	bcs.w	800043c <__udivmoddi4+0x284>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8113 	bls.w	800043c <__udivmoddi4+0x284>
 8000216:	f1ac 0c02 	sub.w	ip, ip, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a1b      	subs	r3, r3, r0
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 f101 	mul.w	r1, r0, r1
 8000230:	42a1      	cmp	r1, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x90>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8101 	bcs.w	8000440 <__udivmoddi4+0x288>
 800023e:	42a1      	cmp	r1, r4
 8000240:	f240 80fe 	bls.w	8000440 <__udivmoddi4+0x288>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	1a64      	subs	r4, r4, r1
 800024a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40d4      	lsrs	r4, r2
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	b902      	cbnz	r2, 8000262 <__udivmoddi4+0xaa>
 8000260:	deff      	udf	#255	; 0xff
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	2a00      	cmp	r2, #0
 8000268:	d14f      	bne.n	800030a <__udivmoddi4+0x152>
 800026a:	1bcb      	subs	r3, r1, r7
 800026c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000270:	fa1f f887 	uxth.w	r8, r7
 8000274:	2101      	movs	r1, #1
 8000276:	fbb3 fcfe 	udiv	ip, r3, lr
 800027a:	0c25      	lsrs	r5, r4, #16
 800027c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000280:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000284:	fb08 f30c 	mul.w	r3, r8, ip
 8000288:	42ab      	cmp	r3, r5
 800028a:	d907      	bls.n	800029c <__udivmoddi4+0xe4>
 800028c:	197d      	adds	r5, r7, r5
 800028e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0xe2>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f200 80e7 	bhi.w	8000468 <__udivmoddi4+0x2b0>
 800029a:	4684      	mov	ip, r0
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a3      	uxth	r3, r4
 80002a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80002a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0x10c>
 80002b4:	193c      	adds	r4, r7, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x10a>
 80002bc:	45a0      	cmp	r8, r4
 80002be:	f200 80d7 	bhi.w	8000470 <__udivmoddi4+0x2b8>
 80002c2:	4618      	mov	r0, r3
 80002c4:	eba4 0408 	sub.w	r4, r4, r8
 80002c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002cc:	e7c0      	b.n	8000250 <__udivmoddi4+0x98>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80af 	beq.w	8000436 <__udivmoddi4+0x27e>
 80002d8:	2100      	movs	r1, #0
 80002da:	e9c6 0500 	strd	r0, r5, [r6]
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	d14b      	bne.n	8000384 <__udivmoddi4+0x1cc>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	d302      	bcc.n	80002f6 <__udivmoddi4+0x13e>
 80002f0:	4282      	cmp	r2, r0
 80002f2:	f200 80b7 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002f6:	1a84      	subs	r4, r0, r2
 80002f8:	eb65 0303 	sbc.w	r3, r5, r3
 80002fc:	2001      	movs	r0, #1
 80002fe:	469e      	mov	lr, r3
 8000300:	2e00      	cmp	r6, #0
 8000302:	d0aa      	beq.n	800025a <__udivmoddi4+0xa2>
 8000304:	e9c6 4e00 	strd	r4, lr, [r6]
 8000308:	e7a7      	b.n	800025a <__udivmoddi4+0xa2>
 800030a:	f1c2 0c20 	rsb	ip, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	4097      	lsls	r7, r2
 8000314:	fa20 f00c 	lsr.w	r0, r0, ip
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000320:	4318      	orrs	r0, r3
 8000322:	fbbc f1fe 	udiv	r1, ip, lr
 8000326:	0c05      	lsrs	r5, r0, #16
 8000328:	fb0e cc11 	mls	ip, lr, r1, ip
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000334:	fb01 f308 	mul.w	r3, r1, r8
 8000338:	42ab      	cmp	r3, r5
 800033a:	fa04 f402 	lsl.w	r4, r4, r2
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0x19c>
 8000340:	197d      	adds	r5, r7, r5
 8000342:	f101 3cff 	add.w	ip, r1, #4294967295
 8000346:	f080 808b 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	42ab      	cmp	r3, r5
 800034c:	f240 8088 	bls.w	8000460 <__udivmoddi4+0x2a8>
 8000350:	3902      	subs	r1, #2
 8000352:	443d      	add	r5, r7
 8000354:	1aeb      	subs	r3, r5, r3
 8000356:	b285      	uxth	r5, r0
 8000358:	fbb3 f0fe 	udiv	r0, r3, lr
 800035c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000360:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000364:	fb00 f308 	mul.w	r3, r0, r8
 8000368:	42ab      	cmp	r3, r5
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x1c4>
 800036c:	197d      	adds	r5, r7, r5
 800036e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000372:	d271      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d96f      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000378:	3802      	subs	r0, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	e778      	b.n	8000276 <__udivmoddi4+0xbe>
 8000384:	f1c1 0c20 	rsb	ip, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f70c 	lsr.w	r7, r2, ip
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 f40c 	lsr.w	r4, r0, ip
 8000394:	fa05 f301 	lsl.w	r3, r5, r1
 8000398:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039c:	fa25 f50c 	lsr.w	r5, r5, ip
 80003a0:	431c      	orrs	r4, r3
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbb5 f9fe 	udiv	r9, r5, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 5519 	mls	r5, lr, r9, r5
 80003b0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003b4:	fb09 fa08 	mul.w	sl, r9, r8
 80003b8:	45aa      	cmp	sl, r5
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f301 	lsl.w	r3, r0, r1
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x21e>
 80003c4:	197d      	adds	r5, r7, r5
 80003c6:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ca:	d247      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003cc:	45aa      	cmp	sl, r5
 80003ce:	d945      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003d0:	f1a9 0902 	sub.w	r9, r9, #2
 80003d4:	443d      	add	r5, r7
 80003d6:	eba5 050a 	sub.w	r5, r5, sl
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80003e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45a0      	cmp	r8, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000404:	eba4 0408 	sub.w	r4, r4, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454c      	cmp	r4, r9
 800040e:	46c6      	mov	lr, r8
 8000410:	464d      	mov	r5, r9
 8000412:	d319      	bcc.n	8000448 <__udivmoddi4+0x290>
 8000414:	d016      	beq.n	8000444 <__udivmoddi4+0x28c>
 8000416:	b15e      	cbz	r6, 8000430 <__udivmoddi4+0x278>
 8000418:	ebb3 020e 	subs.w	r2, r3, lr
 800041c:	eb64 0405 	sbc.w	r4, r4, r5
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40ca      	lsrs	r2, r1
 8000426:	ea4c 0202 	orr.w	r2, ip, r2
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c6 2400 	strd	r2, r4, [r6]
 8000430:	2100      	movs	r1, #0
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e70e      	b.n	800025a <__udivmoddi4+0xa2>
 800043c:	46ac      	mov	ip, r5
 800043e:	e6ed      	b.n	800021c <__udivmoddi4+0x64>
 8000440:	4618      	mov	r0, r3
 8000442:	e701      	b.n	8000248 <__udivmoddi4+0x90>
 8000444:	4543      	cmp	r3, r8
 8000446:	d2e6      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000448:	ebb8 0e02 	subs.w	lr, r8, r2
 800044c:	eb69 0507 	sbc.w	r5, r9, r7
 8000450:	3801      	subs	r0, #1
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4628      	mov	r0, r5
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78f      	b.n	800037c <__udivmoddi4+0x1c4>
 800045c:	4681      	mov	r9, r0
 800045e:	e7ba      	b.n	80003d6 <__udivmoddi4+0x21e>
 8000460:	4661      	mov	r1, ip
 8000462:	e777      	b.n	8000354 <__udivmoddi4+0x19c>
 8000464:	4608      	mov	r0, r1
 8000466:	e74b      	b.n	8000300 <__udivmoddi4+0x148>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	443d      	add	r5, r7
 800046e:	e715      	b.n	800029c <__udivmoddi4+0xe4>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	e726      	b.n	80002c4 <__udivmoddi4+0x10c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8000480:	f000 fd00 	bl	8000e84 <SystemApp_Init>
  SubghzApp_Init();
 8000484:	f000 f80a 	bl	800049c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000490:	f04f 30ff 	mov.w	r0, #4294967295
 8000494:	f009 ff8c 	bl	800a3b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	; 0x2c
 80004a0:	af0a      	add	r7, sp, #40	; 0x28
  /* Print APP version*/
  /*APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n", (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT), (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));*/

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 80004a2:	2300      	movs	r3, #0
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	4b39      	ldr	r3, [pc, #228]	; (800058c <SubghzApp_Init+0xf0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	f04f 31ff 	mov.w	r1, #4294967295
 80004ae:	4838      	ldr	r0, [pc, #224]	; (8000590 <SubghzApp_Init+0xf4>)
 80004b0:	f00a f976 	bl	800a7a0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 80004b4:	21c8      	movs	r1, #200	; 0xc8
 80004b6:	4836      	ldr	r0, [pc, #216]	; (8000590 <SubghzApp_Init+0xf4>)
 80004b8:	f00a fa86 	bl	800a9c8 <UTIL_TIMER_SetPeriod>

  UTIL_TIMER_Start(&timerLed);
 80004bc:	4834      	ldr	r0, [pc, #208]	; (8000590 <SubghzApp_Init+0xf4>)
 80004be:	f00a f9a5 	bl	800a80c <UTIL_TIMER_Start>

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <SubghzApp_Init+0xf8>)
 80004c4:	4a34      	ldr	r2, [pc, #208]	; (8000598 <SubghzApp_Init+0xfc>)
 80004c6:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80004c8:	4b32      	ldr	r3, [pc, #200]	; (8000594 <SubghzApp_Init+0xf8>)
 80004ca:	4a34      	ldr	r2, [pc, #208]	; (800059c <SubghzApp_Init+0x100>)
 80004cc:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <SubghzApp_Init+0xf8>)
 80004d0:	4a33      	ldr	r2, [pc, #204]	; (80005a0 <SubghzApp_Init+0x104>)
 80004d2:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80004d4:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <SubghzApp_Init+0xf8>)
 80004d6:	4a33      	ldr	r2, [pc, #204]	; (80005a4 <SubghzApp_Init+0x108>)
 80004d8:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80004da:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <SubghzApp_Init+0xf8>)
 80004dc:	4a32      	ldr	r2, [pc, #200]	; (80005a8 <SubghzApp_Init+0x10c>)
 80004de:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <SubghzApp_Init+0x110>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	482b      	ldr	r0, [pc, #172]	; (8000594 <SubghzApp_Init+0xf8>)
 80004e6:	4798      	blx	r3

#if (( USE_MODEM_LORA == 1 ) && ( USE_MODEM_FSK == 0 ))
  // RD_EDIT cong suat phat
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80004e8:	4b30      	ldr	r3, [pc, #192]	; (80005ac <SubghzApp_Init+0x110>)
 80004ea:	69dc      	ldr	r4, [r3, #28]
 80004ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004f0:	9308      	str	r3, [sp, #32]
 80004f2:	2300      	movs	r3, #0
 80004f4:	9307      	str	r3, [sp, #28]
 80004f6:	2300      	movs	r3, #0
 80004f8:	9306      	str	r3, [sp, #24]
 80004fa:	2300      	movs	r3, #0
 80004fc:	9305      	str	r3, [sp, #20]
 80004fe:	2301      	movs	r3, #1
 8000500:	9304      	str	r3, [sp, #16]
 8000502:	2300      	movs	r3, #0
 8000504:	9303      	str	r3, [sp, #12]
 8000506:	2308      	movs	r3, #8
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2307      	movs	r3, #7
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2200      	movs	r2, #0
 8000516:	210e      	movs	r1, #14
 8000518:	2001      	movs	r0, #1
 800051a:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <SubghzApp_Init+0x110>)
 800051e:	699c      	ldr	r4, [r3, #24]
 8000520:	2301      	movs	r3, #1
 8000522:	9309      	str	r3, [sp, #36]	; 0x24
 8000524:	2300      	movs	r3, #0
 8000526:	9308      	str	r3, [sp, #32]
 8000528:	2300      	movs	r3, #0
 800052a:	9307      	str	r3, [sp, #28]
 800052c:	2300      	movs	r3, #0
 800052e:	9306      	str	r3, [sp, #24]
 8000530:	2301      	movs	r3, #1
 8000532:	9305      	str	r3, [sp, #20]
 8000534:	2300      	movs	r3, #0
 8000536:	9304      	str	r3, [sp, #16]
 8000538:	2300      	movs	r3, #0
 800053a:	9303      	str	r3, [sp, #12]
 800053c:	2305      	movs	r3, #5
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	2308      	movs	r3, #8
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2300      	movs	r3, #0
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2301      	movs	r3, #1
 800054a:	2207      	movs	r2, #7
 800054c:	2100      	movs	r1, #0
 800054e:	2001      	movs	r0, #1
 8000550:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <SubghzApp_Init+0x110>)
 8000554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	2001      	movs	r0, #1
 800055a:	4798      	blx	r3

#else
#error "Please define a frequency band in the sys_conf.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  Radio.SetChannel(RF_FREQUENCY);
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <SubghzApp_Init+0x110>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <SubghzApp_Init+0x114>)
 8000562:	4798      	blx	r3

#if defined(USE_BSP_DRIVER)
  BSP_LED_Init(LED_GREEN);
  BSP_LED_Init(LED_RED);
#elif defined(MX_BOARD_PSEUDODRIVER)
  SYS_LED_Init(SYS_LED_GREEN);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 f95d 	bl	8000824 <SYS_LED_Init>
  SYS_LED_Init(SYS_LED_RED);
 800056a:	2000      	movs	r0, #0
 800056c:	f000 f95a 	bl	8000824 <SYS_LED_Init>
#else
#error user to provide its board code or to call his board driver functions
#endif  /* USE_BSP_DRIVER || MX_NUCLEO_WL55JC*/

  Radio.Rx(RX_TIMEOUT_VALUE);
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <SubghzApp_Init+0x110>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	4798      	blx	r3

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_PingPong_Process), UTIL_SEQ_RFU, PingPong_Process);
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <SubghzApp_Init+0x118>)
 800057c:	2100      	movs	r1, #0
 800057e:	2001      	movs	r0, #1
 8000580:	f009 fffa 	bl	800a578 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8000584:	bf00      	nop
 8000586:	3704      	adds	r7, #4
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	080007cd 	.word	0x080007cd
 8000590:	2000005c 	.word	0x2000005c
 8000594:	20000074 	.word	0x20000074
 8000598:	080006cd 	.word	0x080006cd
 800059c:	080006f1 	.word	0x080006f1
 80005a0:	08000761 	.word	0x08000761
 80005a4:	08000785 	.word	0x08000785
 80005a8:	080007a9 	.word	0x080007a9
 80005ac:	0800b414 	.word	0x0800b414
 80005b0:	33bca100 	.word	0x33bca100
 80005b4:	080005b9 	.word	0x080005b9

080005b8 <PingPong_Process>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void PingPong_Process(void)//RD_EDIT: ham xu ly ping pong
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8



      /* Send the next PING frame */

	if(radio_rx_flag){
 80005be:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <PingPong_Process+0xf0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d023      	beq.n	800060e <PingPong_Process+0x56>
		//APP_LOG(TS_ON, VLEVEL_L, " RX: \n\r");
		Radio.SetChannel(RF_FREQUENCY);
 80005c6:	4b39      	ldr	r3, [pc, #228]	; (80006ac <PingPong_Process+0xf4>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4839      	ldr	r0, [pc, #228]	; (80006b0 <PingPong_Process+0xf8>)
 80005cc:	4798      	blx	r3
		Radio.Rx(RX_TIMEOUT_VALUE);
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <PingPong_Process+0xf4>)
 80005d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	4798      	blx	r3
		 if (strncmp((const char *)Buffer, (const char *)RD_header, 5) == 0){
 80005d8:	2205      	movs	r2, #5
 80005da:	4936      	ldr	r1, [pc, #216]	; (80006b4 <PingPong_Process+0xfc>)
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <PingPong_Process+0x100>)
 80005de:	f00a fe05 	bl	800b1ec <strncmp>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d112      	bne.n	800060e <PingPong_Process+0x56>
			tx_cnt = Buffer[5];
 80005e8:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <PingPong_Process+0x100>)
 80005ea:	795a      	ldrb	r2, [r3, #5]
 80005ec:	4b33      	ldr	r3, [pc, #204]	; (80006bc <PingPong_Process+0x104>)
 80005ee:	701a      	strb	r2, [r3, #0]
//			uint8_t rd_recevie_buff[32] = "RD_receive: ";
//			strcat(rd_recevie_buff,Buffer);
//			strcat(rd_recevie_buff,"\r\n");
			APP_LOG(TS_ON, VLEVEL_L,"RD_cnt = %d\r\n",tx_cnt);
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <PingPong_Process+0x104>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <PingPong_Process+0x108>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	2100      	movs	r1, #0
 80005fc:	2001      	movs	r0, #1
 80005fe:	f009 fb9f 	bl	8009d40 <UTIL_ADV_TRACE_COND_FSend>
			radio_tx_flag = 1;
 8000602:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <PingPong_Process+0x10c>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
			radio_rx_flag = 0;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <PingPong_Process+0xf0>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(radio_tx_flag){
 800060e:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <PingPong_Process+0x10c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d032      	beq.n	800067c <PingPong_Process+0xc4>
		tx_cnt++;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <PingPong_Process+0x104>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <PingPong_Process+0x104>)
 8000620:	701a      	strb	r2, [r3, #0]
		//APP_LOG(TS_ON, VLEVEL_L, "*******TX: \n\r");

		Buffer[0] = 'D';
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <PingPong_Process+0x100>)
 8000624:	2244      	movs	r2, #68	; 0x44
 8000626:	701a      	strb	r2, [r3, #0]
		Buffer[1] = 'A';
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <PingPong_Process+0x100>)
 800062a:	2241      	movs	r2, #65	; 0x41
 800062c:	705a      	strb	r2, [r3, #1]
		Buffer[2] = 'T';
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <PingPong_Process+0x100>)
 8000630:	2254      	movs	r2, #84	; 0x54
 8000632:	709a      	strb	r2, [r3, #2]
		Buffer[3] = '0';
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <PingPong_Process+0x100>)
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	70da      	strb	r2, [r3, #3]
		Buffer[4] = '9';
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <PingPong_Process+0x100>)
 800063c:	2239      	movs	r2, #57	; 0x39
 800063e:	711a      	strb	r2, [r3, #4]
		Buffer[5] = tx_cnt;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <PingPong_Process+0x104>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <PingPong_Process+0x100>)
 8000646:	715a      	strb	r2, [r3, #5]
		Radio.SetChannel(RF_FREQUENCY);
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <PingPong_Process+0xf4>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4818      	ldr	r0, [pc, #96]	; (80006b0 <PingPong_Process+0xf8>)
 800064e:	4798      	blx	r3
		HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <PingPong_Process+0xf4>)
 8000652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000654:	4798      	blx	r3
 8000656:	4603      	mov	r3, r0
 8000658:	3332      	adds	r3, #50	; 0x32
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fcdd 	bl	800101a <HAL_Delay>
		Radio.Send(Buffer, BufferSize);
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <PingPong_Process+0xf4>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <PingPong_Process+0x110>)
 8000666:	8812      	ldrh	r2, [r2, #0]
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	4611      	mov	r1, r2
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <PingPong_Process+0x100>)
 800066e:	4798      	blx	r3
		radio_tx_flag = 0;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <PingPong_Process+0x10c>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
		radio_rx_flag = 1;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <PingPong_Process+0xf0>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
	}

	for (uint8_t i = 0; i < BufferSize; i++){
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e006      	b.n	8000690 <PingPong_Process+0xd8>
		Buffer[i] = 0;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <PingPong_Process+0x100>)
 8000686:	2100      	movs	r1, #0
 8000688:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < BufferSize; i++){
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	3301      	adds	r3, #1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <PingPong_Process+0x110>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3f2      	bcc.n	8000682 <PingPong_Process+0xca>
	}


  /* USER CODE END PingPong_Process_2 */
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000
 80006ac:	0800b414 	.word	0x0800b414
 80006b0:	33bca100 	.word	0x33bca100
 80006b4:	20000004 	.word	0x20000004
 80006b8:	20000578 	.word	0x20000578
 80006bc:	20000055 	.word	0x20000055
 80006c0:	0800b228 	.word	0x0800b228
 80006c4:	20000054 	.word	0x20000054
 80006c8:	2000000a 	.word	0x2000000a

080006cc <OnTxDone>:

static void OnTxDone(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone_1 */

  /* USER CODE END OnTxDone_1 */
 // APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");

  Radio.Sleep();
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <OnTxDone+0x1c>)
 80006d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d4:	4798      	blx	r3
  State = TX;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <OnTxDone+0x20>)
 80006d8:	2204      	movs	r2, #4
 80006da:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2001      	movs	r0, #1
 80006e0:	f009 ff6c 	bl	800a5bc <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnTxDone_2 */

  /* USER CODE END OnTxDone_2 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	0800b414 	.word	0x0800b414
 80006ec:	20000056 	.word	0x20000056

080006f0 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	817b      	strh	r3, [r7, #10]
 8000702:	460b      	mov	r3, r1
 8000704:	813b      	strh	r3, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END OnRxDone_1 */
 // APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
  //APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);

  Radio.Sleep();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <OnRxDone+0x58>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	4798      	blx	r3
  BufferSize = size;
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <OnRxDone+0x5c>)
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	8013      	strh	r3, [r2, #0]
  memcpy(Buffer, payload, BufferSize);
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <OnRxDone+0x5c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	68f9      	ldr	r1, [r7, #12]
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <OnRxDone+0x60>)
 8000720:	f00a fd4e 	bl	800b1c0 <memcpy>
  RssiValue = rssi;
 8000724:	893b      	ldrh	r3, [r7, #8]
 8000726:	b25a      	sxtb	r2, r3
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <OnRxDone+0x64>)
 800072a:	701a      	strb	r2, [r3, #0]
  SnrValue = snr;
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <OnRxDone+0x68>)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	7013      	strb	r3, [r2, #0]
  State = RX;
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <OnRxDone+0x6c>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8000738:	2100      	movs	r1, #0
 800073a:	2001      	movs	r0, #1
 800073c:	f009 ff3e 	bl	800a5bc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnRxDone_2 */

  /* USER CODE END OnRxDone_2 */
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800b414 	.word	0x0800b414
 800074c:	2000000a 	.word	0x2000000a
 8000750:	20000578 	.word	0x20000578
 8000754:	20000057 	.word	0x20000057
 8000758:	20000058 	.word	0x20000058
 800075c:	20000056 	.word	0x20000056

08000760 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout_1 */

  /* USER CODE END OnTxTimeout_1 */
 // APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");

  Radio.Sleep();
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <OnTxTimeout+0x1c>)
 8000766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000768:	4798      	blx	r3
  State = TX_TIMEOUT;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <OnTxTimeout+0x20>)
 800076c:	2205      	movs	r2, #5
 800076e:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8000770:	2100      	movs	r1, #0
 8000772:	2001      	movs	r0, #1
 8000774:	f009 ff22 	bl	800a5bc <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnTxTimeout_2 */

  /* USER CODE END OnTxTimeout_2 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	0800b414 	.word	0x0800b414
 8000780:	20000056 	.word	0x20000056

08000784 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout_1 */

  /* USER CODE END OnRxTimeout_1 */
  //APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");

  Radio.Sleep();
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <OnRxTimeout+0x1c>)
 800078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078c:	4798      	blx	r3
  State = RX_TIMEOUT;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <OnRxTimeout+0x20>)
 8000790:	2202      	movs	r2, #2
 8000792:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 8000794:	2100      	movs	r1, #0
 8000796:	2001      	movs	r0, #1
 8000798:	f009 ff10 	bl	800a5bc <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnRxTimeout_2 */

  /* USER CODE END OnRxTimeout_2 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	0800b414 	.word	0x0800b414
 80007a4:	20000056 	.word	0x20000056

080007a8 <OnRxError>:

static void OnRxError(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  //APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");

  Radio.Sleep();
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <OnRxError+0x1c>)
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	4798      	blx	r3
  State = RX_ERROR;
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <OnRxError+0x20>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2001      	movs	r0, #1
 80007bc:	f009 fefe 	bl	800a5bc <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	0800b414 	.word	0x0800b414
 80007c8:	20000056 	.word	0x20000056

080007cc <OnledEvent>:

static void OnledEvent(void *context)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE END OnledEvent_1 */
#if defined(USE_BSP_DRIVER)
  BSP_LED_Toggle(LED_GREEN) ;
  BSP_LED_Toggle(LED_RED) ;
#elif defined(MX_BOARD_PSEUDODRIVER)
  SYS_LED_Toggle(SYS_LED_RED) ;
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f85f 	bl	8000898 <SYS_LED_Toggle>
  SYS_LED_Toggle(SYS_LED_GREEN) ;
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 f85c 	bl	8000898 <SYS_LED_Toggle>
#endif /* USE_BSP_DRIVER || MX_BOARD_PSEUDODRIVER */

  UTIL_TIMER_Start(&timerLed);
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <OnledEvent+0x24>)
 80007e2:	f00a f813 	bl	800a80c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnledEvent_2 */

  /* USER CODE END OnledEvent_2 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000005c 	.word	0x2000005c

080007f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800080c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000818:	68fb      	ldr	r3, [r7, #12]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SYS_LED_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t SYS_LED_Init(Sys_Led_TypeDef Led)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
  /* Enable the GPIO_SYS_LED Clock */
  SYS_LEDx_GPIO_CLK_ENABLE(Led);
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff ffd8 	bl	80007f4 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_SYS_LED pin */
  gpio_init_structure.Pin = SYS_LED_PIN[Led];
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <SYS_LED_Init+0x6c>)
 8000848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(SYS_LED_PORT[Led], &gpio_init_structure);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <SYS_LED_Init+0x70>)
 800085e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000862:	f107 020c 	add.w	r2, r7, #12
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff7d 	bl	8002768 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_RESET);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <SYS_LED_Init+0x70>)
 8000872:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SYS_LED_Init+0x6c>)
 800087a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	f002 f9b6 	bl	8002bf2 <HAL_GPIO_WritePin>

  return 0;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	0800b2ec 	.word	0x0800b2ec
 8000894:	2000000c 	.word	0x2000000c

08000898 <SYS_LED_Toggle>:

  return 0;
}

int32_t SYS_LED_Toggle(Sys_Led_TypeDef Led)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led]);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <SYS_LED_Toggle+0x2c>)
 80008a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4906      	ldr	r1, [pc, #24]	; (80008c8 <SYS_LED_Toggle+0x30>)
 80008ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4610      	mov	r0, r2
 80008b6:	f002 f9b3 	bl	8002c20 <HAL_GPIO_TogglePin>

  return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000000c 	.word	0x2000000c
 80008c8:	0800b2ec 	.word	0x0800b2ec

080008cc <LL_AHB1_GRP1_EnableClock>:
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f0:	68fb      	ldr	r3, [r7, #12]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000900:	2004      	movs	r0, #4
 8000902:	f7ff ffe3 	bl	80008cc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff ffe0 	bl	80008cc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2102      	movs	r1, #2
 8000910:	200f      	movs	r0, #15
 8000912:	f001 fada 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000916:	200f      	movs	r0, #15
 8000918:	f001 faf1 	bl	8001efe <HAL_NVIC_EnableIRQ>

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000930:	f023 0218 	bic.w	r2, r3, #24
 8000934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4313      	orrs	r3, r2
 800093c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <LL_AHB2_GRP1_EnableClock>:
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4013      	ands	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
	...

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f001 f96a 	bl	8001c58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f80e 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SubGHz_Phy_Init();
 8000988:	f7ff fd78 	bl	800047c <MX_SubGHz_Phy_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	//if(ping_flag||radio_rx_flag){
		//APP_LOG(TS_ON, VLEVEL_L, "RD main loop\n\r");
		ping_flag = 0;
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <main+0x24>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		MX_SubGHz_Phy_Process();
 8000992:	f7ff fd7b 	bl	800048c <MX_SubGHz_Phy_Process>
	//}
    RD_button_detect(&ping_flag);
 8000996:	4802      	ldr	r0, [pc, #8]	; (80009a0 <main+0x24>)
 8000998:	f000 f85a 	bl	8000a50 <RD_button_detect>
		ping_flag = 0;
 800099c:	e7f6      	b.n	800098c <main+0x10>
 800099e:	bf00      	nop
 80009a0:	20000018 	.word	0x20000018

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	; 0x68
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2248      	movs	r2, #72	; 0x48
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f00a fc12 	bl	800b1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ffa8 	bl	8000920 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemClock_Config+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <SystemClock_Config+0xa8>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemClock_Config+0xa8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009ec:	2324      	movs	r3, #36	; 0x24
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009f0:	2381      	movs	r3, #129	; 0x81
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f4:	2301      	movs	r3, #1
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009fc:	23b0      	movs	r3, #176	; 0xb0
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fcc5 	bl	8003398 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a14:	f000 f864 	bl	8000ae0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000a18:	234f      	movs	r3, #79	; 0x4f
 8000a1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2102      	movs	r1, #2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f849 	bl	8003acc <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a40:	f000 f84e 	bl	8000ae0 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3768      	adds	r7, #104	; 0x68
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58000400 	.word	0x58000400

08000a50 <RD_button_detect>:

/* USER CODE BEGIN 4 */

void RD_button_detect(unsigned char *cnt){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    RD_GPIO_Init();
 8000a58:	f000 f822 	bl	8000aa0 <RD_GPIO_Init>
    if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <RD_button_detect+0x48>)
 8000a62:	f002 f8af 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d111      	bne.n	8000a90 <RD_button_detect+0x40>

    	while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8000a6c:	e002      	b.n	8000a74 <RD_button_detect+0x24>
    		HAL_Delay(20);
 8000a6e:	2014      	movs	r0, #20
 8000a70:	f000 fad3 	bl	800101a <HAL_Delay>
    	while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <RD_button_detect+0x48>)
 8000a7a:	f002 f8a3 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f4      	beq.n	8000a6e <RD_button_detect+0x1e>
    	}
    	*cnt = 1 ;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
    	radio_tx_flag = 1;
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <RD_button_detect+0x4c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
    }

}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	20000054 	.word	0x20000054

08000aa0 <RD_GPIO_Init>:
 void RD_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f7ff ff48 	bl	800094a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : button_trigger_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <RD_GPIO_Init+0x3c>)
 8000ace:	f001 fe4b 	bl	8002768 <HAL_GPIO_Init>

}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	48000400 	.word	0x48000400

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x4>

08000ae6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4013      	ands	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
	...

08000b38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
  RTC_AlarmTypeDef sAlarm = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	222c      	movs	r2, #44	; 0x2c
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00a fb49 	bl	800b1dc <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <MX_RTC_Init+0xa0>)
 8000b4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b52:	221f      	movs	r2, #31
 8000b54:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b80:	f003 fca6 	bl	80044d0 <HAL_RTC_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000b8a:	f7ff ffa9 	bl	8000ae0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000b90:	f003 ff80 	bl	8004a94 <HAL_RTCEx_SetSSRU_IT>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000b9a:	f7ff ffa1 	bl	8000ae0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000baa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bae:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_RTC_Init+0x9c>)
 8000bbe:	f003 fd01 	bl	80045c4 <HAL_RTC_SetAlarm_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000bc8:	f7ff ff8a 	bl	8000ae0 <Error_Handler>
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200005b8 	.word	0x200005b8
 8000bd8:	40002800 	.word	0x40002800

08000bdc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	2238      	movs	r2, #56	; 0x38
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00a faf5 	bl	800b1dc <memset>
  if(rtcHandle->Instance==RTC)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_RTC_MspInit+0x74>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d125      	bne.n	8000c48 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fb45 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c18:	f7ff ff62 	bl	8000ae0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c1c:	f7ff ff63 	bl	8000ae6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c24:	f7ff ff6f 	bl	8000b06 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f001 f94c 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000c32:	2002      	movs	r0, #2
 8000c34:	f001 f963 	bl	8001efe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	202a      	movs	r0, #42	; 0x2a
 8000c3e:	f001 f944 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c42:	202a      	movs	r0, #42	; 0x2a
 8000c44:	f001 f95b 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3740      	adds	r7, #64	; 0x40
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40002800 	.word	0x40002800

08000c54 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	58000400 	.word	0x58000400

08000c6c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  /* Suspend sysTick : work around for degugger problem in dual core (tickets 71085,  72038, 71087 ) */
  HAL_SuspendTick();
 8000c88:	f001 f818 	bl	8001cbc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000c8c:	f7ff ffe2 	bl	8000c54 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f002 f871 	bl	8002d78 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for degugger problem in dual core */
  HAL_ResumeTick();
 8000c9e:	f001 f81b 	bl	8001cd8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000ca2:	f000 fe6b 	bl	800197c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000cae:	f001 f805 	bl	8001cbc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f001 ffdb 	bl	8002c70 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8000cc2:	f001 f809 	bl	8001cd8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 ffb9 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000d32:	f003 feeb 	bl	8004b0c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200005b8 	.word	0x200005b8

08000d40 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA1_Channel5_IRQHandler+0x10>)
 8000d46:	f001 fb71 	bl	800242c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200005fc 	.word	0x200005fc

08000d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USART2_IRQHandler+0x10>)
 8000d5a:	f004 fcf1 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000065c 	.word	0x2000065c

08000d68 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <RTC_Alarm_IRQHandler+0x10>)
 8000d6e:	f003 fd7d 	bl	800486c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200005b8 	.word	0x200005b8

08000d7c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000d82:	f004 fa2b 	bl	80051dc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200005f0 	.word	0x200005f0

08000d90 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_SUBGHZ_Init+0x20>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_SUBGHZ_Init+0x20>)
 8000dcc:	f003 ff8a 	bl	8004ce4 <HAL_SUBGHZ_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000dd6:	f7ff fe83 	bl	8000ae0 <Error_Handler>
  }

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200005f0 	.word	0x200005f0

08000de4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff ffcf 	bl	8000d90 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2032      	movs	r0, #50	; 0x32
 8000df8:	f001 f867 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000dfc:	2032      	movs	r0, #50	; 0x32
 8000dfe:	f001 f87e 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	608b      	str	r3, [r1, #8]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <LL_AHB2_GRP1_EnableClock>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <LL_AHB2_GRP1_DisableClock>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e76:	4013      	ands	r3, r2
 8000e78:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ffbe 	bl	8000e0a <LL_RCC_SetClkAfterWakeFromStop>
  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8000e8e:	f009 fc77 	bl	800a780 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8000e92:	f000 f83f 	bl	8000f14 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init(); //RD_EDIT: ham tat debug
 8000e96:	f000 f8f9 	bl	800108c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000e9a:	f008 ff35 	bl	8009d08 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000e9e:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <SystemApp_Init+0x40>)
 8000ea0:	f008 ffd0 	bl	8009e44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f008 ffdb 	bl	8009e60 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init(); // RD_EDIT: ham khoi tao Low power
 8000eaa:	f009 f9bf 	bl	800a22c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);// RD_EDIT: tat che do stand-by
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f009 f9fb 	bl	800a2ac <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f009 f9c7 	bl	800a24c <UTIL_LPM_SetStopMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5

08000ec8 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000ecc:	f009 fa1e 	bl	800a30c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f009 fc14 	bl	800a710 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eee:	9200      	str	r2, [sp, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <TimestampNow+0x3c>)
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f869 	bl	8000fcc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff f93c 	bl	8000178 <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800b238 	.word	0x0800b238

08000f14 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff ff81 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f7ff ff7e 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	2004      	movs	r0, #4
 8000f36:	f7ff ff7b 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2080      	movs	r0, #128	; 0x80
 8000f3c:	f7ff ff78 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8000f48:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000f4c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 fc07 	bl	8002768 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <Gpio_PreInit+0x8c>)
 8000f66:	f001 fbff 	bl	8002768 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <Gpio_PreInit+0x90>)
 8000f70:	f001 fbfa 	bl	8002768 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <Gpio_PreInit+0x94>)
 8000f7a:	f001 fbf5 	bl	8002768 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ff6e 	bl	8000e60 <LL_AHB2_GRP1_DisableClock>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff ff6b 	bl	8000e60 <LL_AHB2_GRP1_DisableClock>
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000f8a:	2004      	movs	r0, #4
 8000f8c:	f7ff ff68 	bl	8000e60 <LL_AHB2_GRP1_DisableClock>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000f90:	2080      	movs	r0, #128	; 0x80
 8000f92:	f7ff ff65 	bl	8000e60 <LL_AHB2_GRP1_DisableClock>
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48001c00 	.word	0x48001c00

08000fac <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f009 f94a 	bl	800a24c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f009 f942 	bl	800a24c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000fcc:	b40c      	push	{r2, r3}
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f009 ff71 	bl	800aecc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff4:	b002      	add	sp, #8
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based onother counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001010:	f000 f97e 	bl	8001310 <TIMER_IF_GetTimerValue>
 8001014:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based onother counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f9e1 	bl	80013ec <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <LL_AHB2_GRP1_EnableClock>:
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800103a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4313      	orrs	r3, r2
 8001048:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
	...

08001064 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <LL_EXTI_EnableIT_32_63+0x24>)
 800106e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001072:	4905      	ldr	r1, [pc, #20]	; (8001088 <LL_EXTI_EnableIT_32_63+0x24>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	58000800 	.word	0x58000800

0800108c <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff ffc6 	bl	8001032 <LL_AHB2_GRP1_EnableClock>
  DGB_LINE2_CLK_ENABLE();
 80010a6:	2002      	movs	r0, #2
 80010a8:	f7ff ffc3 	bl	8001032 <LL_AHB2_GRP1_EnableClock>
  DGB_LINE3_CLK_ENABLE();
 80010ac:	2002      	movs	r0, #2
 80010ae:	f7ff ffc0 	bl	8001032 <LL_AHB2_GRP1_EnableClock>
  DGB_LINE4_CLK_ENABLE();
 80010b2:	2002      	movs	r0, #2
 80010b4:	f7ff ffbd 	bl	8001032 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4835      	ldr	r0, [pc, #212]	; (80011a4 <DBG_Init+0x118>)
 80010d0:	f001 fb4a 	bl	8002768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4831      	ldr	r0, [pc, #196]	; (80011a4 <DBG_Init+0x118>)
 80010e0:	f001 fb42 	bl	8002768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 80010e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	482d      	ldr	r0, [pc, #180]	; (80011a4 <DBG_Init+0x118>)
 80010f0:	f001 fb3a 	bl	8002768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 80010f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <DBG_Init+0x118>)
 8001100:	f001 fb32 	bl	8002768 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110a:	4826      	ldr	r0, [pc, #152]	; (80011a4 <DBG_Init+0x118>)
 800110c:	f001 fd71 	bl	8002bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <DBG_Init+0x118>)
 8001118:	f001 fd6b 	bl	8002bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <DBG_Init+0x118>)
 8001124:	f001 fd65 	bl	8002bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112e:	481d      	ldr	r0, [pc, #116]	; (80011a4 <DBG_Init+0x118>)
 8001130:	f001 fd5f 	bl	8002bf2 <HAL_GPIO_WritePin>

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 800113c:	23f0      	movs	r3, #240	; 0xf0
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001140:	230d      	movs	r3, #13
 8001142:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff ff74 	bl	8001032 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f001 fb09 	bl	8002768 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8001164:	2306      	movs	r3, #6
 8001166:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff ff62 	bl	8001032 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f001 faf7 	bl	8002768 <HAL_GPIO_Init>

  /******** MCO OUT Config on PA8 *****/
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001182:	2000      	movs	r0, #0
 8001184:	f002 fde4 	bl	8003d50 <HAL_RCC_MCOConfig>

  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001188:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800118c:	f7ff ff6a 	bl	8001064 <LL_EXTI_EnableIT_32_63>

  /* lowpower DBGmode: just needed for CORE_CM4 */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001190:	f000 fdb0 	bl	8001cf4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001194:	f000 fdb4 	bl	8001d00 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001198:	f000 fdb8 	bl	8001d0c <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	48000400 	.word	0x48000400

080011a8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
	...

080011c0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init_1 */

  /* USER CODE END TIMER_IF_Init_1 */
  if (RTC_Initialized == false)
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <TIMER_IF_Init+0x5c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01b      	beq.n	8001210 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <TIMER_IF_Init+0x60>)
 80011da:	f04f 32ff 	mov.w	r2, #4294967295
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80011e0:	f7ff fcaa 	bl	8000b38 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80011e4:	f000 f856 	bl	8001294 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by MX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <TIMER_IF_Init+0x60>)
 80011ee:	f003 fae7 	bl	80047c0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <TIMER_IF_Init+0x60>)
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <TIMER_IF_Init+0x60>)
 80011fc:	f003 fc18 	bl	8004a30 <HAL_RTCEx_EnableBypassShadow>
    /*Initialise MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f9a7 	bl	8001554 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001206:	f000 f85f 	bl	80012c8 <TIMER_IF_SetTimerContext>

    RTC_Initialized = true;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <TIMER_IF_Init+0x5c>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000090 	.word	0x20000090
 8001220:	200005b8 	.word	0x200005b8

08001224 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	222c      	movs	r2, #44	; 0x2c
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f009 ffce 	bl	800b1dc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001240:	f000 f828 	bl	8001294 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <TIMER_IF_StartTimer+0x68>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	43db      	mvns	r3, r3
 8001256:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800125c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001260:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <TIMER_IF_StartTimer+0x6c>)
 8001272:	f003 f9a7 	bl	80045c4 <HAL_RTC_SetAlarm_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800127c:	f7ff fc30 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001284:	4618      	mov	r0, r3
 8001286:	3738      	adds	r7, #56	; 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000094 	.word	0x20000094
 8001290:	200005b8 	.word	0x200005b8

08001294 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <TIMER_IF_StopTimer+0x2c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <TIMER_IF_StopTimer+0x30>)
 80012aa:	f003 fa89 	bl	80047c0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <TIMER_IF_StopTimer+0x30>)
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40002800 	.word	0x40002800
 80012c4:	200005b8 	.word	0x200005b8

080012c8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80012cc:	f000 f962 	bl	8001594 <GetTimerTicks>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <TIMER_IF_SetTimerContext+0x18>)
 80012d4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80012d6:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <TIMER_IF_SetTimerContext+0x18>)
 80012d8:	681b      	ldr	r3, [r3, #0]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000094 	.word	0x20000094

080012e4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <TIMER_IF_GetTimerContext+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000094 	.word	0x20000094

080012f8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80012fc:	f000 f94a 	bl	8001594 <GetTimerTicks>
 8001300:	4602      	mov	r2, r0
 8001302:	4b02      	ldr	r3, [pc, #8]	; (800130c <TIMER_IF_GetTimerElapsedTime+0x14>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1ad3      	subs	r3, r2, r3
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000094 	.word	0x20000094

08001310 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <TIMER_IF_GetTimerValue+0x1c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <TIMER_IF_GetTimerValue+0x14>
  {
    return GetTimerTicks();
 800131c:	f000 f93a 	bl	8001594 <GetTimerTicks>
 8001320:	4603      	mov	r3, r0
 8001322:	e000      	b.n	8001326 <TIMER_IF_GetTimerValue+0x16>
  }
  else
  {
    return 0;
 8001324:	2300      	movs	r3, #0
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000090 	.word	0x20000090

08001330 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return (MIN_ALARM_DELAY);
 8001334:	2303      	movs	r3, #3
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800133e:	b5b0      	push	{r4, r5, r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	461a      	mov	r2, r3
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	0d95      	lsrs	r5, r2, #22
 8001350:	0294      	lsls	r4, r2, #10
 8001352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff13 	bl	8000188 <__aeabi_uldivmod>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4613      	mov	r3, r2
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bdb0      	pop	{r4, r5, r7, pc}

08001370 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001370:	b4b0      	push	{r4, r5, r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f04f 0100 	mov.w	r1, #0
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	f04f 0400 	mov.w	r4, #0
 8001388:	f04f 0500 	mov.w	r5, #0
 800138c:	015d      	lsls	r5, r3, #5
 800138e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001392:	0154      	lsls	r4, r2, #5
 8001394:	4622      	mov	r2, r4
 8001396:	462b      	mov	r3, r5
 8001398:	1a12      	subs	r2, r2, r0
 800139a:	eb63 0301 	sbc.w	r3, r3, r1
 800139e:	f04f 0400 	mov.w	r4, #0
 80013a2:	f04f 0500 	mov.w	r5, #0
 80013a6:	009d      	lsls	r5, r3, #2
 80013a8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80013ac:	0094      	lsls	r4, r2, #2
 80013ae:	4622      	mov	r2, r4
 80013b0:	462b      	mov	r3, r5
 80013b2:	1812      	adds	r2, r2, r0
 80013b4:	eb41 0303 	adc.w	r3, r1, r3
 80013b8:	f04f 0000 	mov.w	r0, #0
 80013bc:	f04f 0100 	mov.w	r1, #0
 80013c0:	00d9      	lsls	r1, r3, #3
 80013c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013c6:	00d0      	lsls	r0, r2, #3
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	0a82      	lsrs	r2, r0, #10
 80013da:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80013de:	0a8b      	lsrs	r3, r1, #10
 80013e0:	4613      	mov	r3, r2
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bcb0      	pop	{r4, r5, r7}
 80013ea:	4770      	bx	lr

080013ec <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ffa2 	bl	800133e <TIMER_IF_Convert_ms2Tick>
 80013fa:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80013fc:	f000 f8ca 	bl	8001594 <GetTimerTicks>
 8001400:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001402:	e000      	b.n	8001406 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001404:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001406:	f000 f8c5 	bl	8001594 <GetTimerTicks>
 800140a:	4602      	mov	r2, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	429a      	cmp	r2, r3
 8001414:	d8f6      	bhi.n	8001404 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_Handler();
 8001428:	f009 faf8 	bl	800aa1c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800143c:	f000 f89a 	bl	8001574 <TIMER_IF_BkUp_Read_MSBticks>
 8001440:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3301      	adds	r3, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f884 	bl	8001554 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001458:	b088      	sub	sp, #32
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 800145e:	f000 f899 	bl	8001594 <GetTimerTicks>
 8001462:	61f8      	str	r0, [r7, #28]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001464:	f000 f886 	bl	8001574 <TIMER_IF_BkUp_Read_MSBticks>
 8001468:	61b8      	str	r0, [r7, #24]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	0003      	movs	r3, r0
 800147c:	2200      	movs	r2, #0
 800147e:	69f9      	ldr	r1, [r7, #28]
 8001480:	4608      	mov	r0, r1
 8001482:	f04f 0100 	mov.w	r1, #0
 8001486:	eb12 0800 	adds.w	r8, r2, r0
 800148a:	eb43 0901 	adc.w	r9, r3, r1
 800148e:	e9c7 8904 	strd	r8, r9, [r7, #16]

  uint32_t seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001492:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	0a82      	lsrs	r2, r0, #10
 80014a0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80014a4:	0a8b      	lsrs	r3, r1, #10
 80014a6:	4613      	mov	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	461a      	mov	r2, r3
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	ea02 0400 	and.w	r4, r2, r0
 80014be:	ea03 0501 	and.w	r5, r3, r1
 80014c2:	e9c7 4504 	strd	r4, r5, [r7, #16]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff51 	bl	8001370 <TIMER_IF_Convert_Tick2ms>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	801a      	strh	r2, [r3, #0]

  return seconds;
 80014d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080014e4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	2100      	movs	r1, #0
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80014f2:	f003 fb2f 	bl	8004b54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200005b8 	.word	0x200005b8

08001504 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	2101      	movs	r1, #1
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001512:	f003 fb1f 	bl	8004b54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200005b8 	.word	0x200005b8

08001524 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001528:	2100      	movs	r1, #0
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <TIMER_IF_BkUp_Read_Seconds+0x14>)
 800152c:	f003 fb2a 	bl	8004b84 <HAL_RTCEx_BKUPRead>
 8001530:	4603      	mov	r3, r0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200005b8 	.word	0x200005b8

0800153c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001540:	2101      	movs	r1, #1
 8001542:	4803      	ldr	r0, [pc, #12]	; (8001550 <TIMER_IF_BkUp_Read_SubSeconds+0x14>)
 8001544:	f003 fb1e 	bl	8004b84 <HAL_RTCEx_BKUPRead>
 8001548:	4603      	mov	r3, r0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200005b8 	.word	0x200005b8

08001554 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	2102      	movs	r1, #2
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001562:	f003 faf7 	bl	8004b54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200005b8 	.word	0x200005b8

08001574 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800157a:	2102      	movs	r1, #2
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800157e:	f003 fb01 	bl	8004b84 <HAL_RTCEx_BKUPRead>
 8001582:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001584:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200005b8 	.word	0x200005b8

08001594 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <GetTimerTicks+0x14>)
 800159a:	f7ff fe05 	bl	80011a8 <LL_RTC_TIME_GetSubSecond>
 800159e:	4603      	mov	r3, r0
 80015a0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40002800 	.word	0x40002800

080015ac <LL_AHB2_GRP1_EnableClock>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <LL_APB1_GRP1_EnableClock>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001600:	68fb      	ldr	r3, [r7, #12]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <LL_APB1_GRP1_DisableClock>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	43db      	mvns	r3, r3
 800161e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001622:	4013      	ands	r3, r2
 8001624:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <MX_USART2_UART_Init+0x94>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART_BAUDRATE;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001678:	4811      	ldr	r0, [pc, #68]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800167a:	f003 ff62 	bl	8005542 <HAL_UART_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001684:	f7ff fa2c 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800168c:	f005 fbc6 	bl	8006e1c <HAL_UARTEx_SetTxFifoThreshold>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001696:	f7ff fa23 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4808      	ldr	r0, [pc, #32]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 800169e:	f005 fbfb 	bl	8006e98 <HAL_UARTEx_SetRxFifoThreshold>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016a8:	f7ff fa1a 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_USART2_UART_Init+0x90>)
 80016ae:	f005 fb7a 	bl	8006da6 <HAL_UARTEx_EnableFifoMode>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016b8:	f7ff fa12 	bl	8000ae0 <Error_Handler>
  }

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000065c 	.word	0x2000065c
 80016c4:	40004400 	.word	0x40004400

080016c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b096      	sub	sp, #88	; 0x58
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2238      	movs	r2, #56	; 0x38
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f009 fd77 	bl	800b1dc <memset>
  if(uartHandle->Instance==USART2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <HAL_UART_MspInit+0xf8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d15f      	bne.n	80017b8 <HAL_UART_MspInit+0xf0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_UART_MspInit+0xfc>)
 80016fe:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fdc9 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001710:	f7ff f9e6 	bl	8000ae0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001714:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001718:	f7ff ff60 	bl	80015dc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff ff45 	bl	80015ac <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001722:	230c      	movs	r3, #12
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001732:	2307      	movs	r3, #7
 8001734:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f001 f812 	bl	8002768 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_UART_MspInit+0x100>)
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <HAL_UART_MspInit+0x104>)
 8001748:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_UART_MspInit+0x100>)
 800174c:	2214      	movs	r2, #20
 800174e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_UART_MspInit+0x100>)
 8001752:	2210      	movs	r2, #16
 8001754:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_MspInit+0x100>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0x100>)
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0x100>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x100>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_UART_MspInit+0x100>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0x100>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800177a:	4813      	ldr	r0, [pc, #76]	; (80017c8 <HAL_UART_MspInit+0x100>)
 800177c:	f000 fbdc 	bl	8001f38 <HAL_DMA_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001786:	f7ff f9ab 	bl	8000ae0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800178a:	2110      	movs	r1, #16
 800178c:	480e      	ldr	r0, [pc, #56]	; (80017c8 <HAL_UART_MspInit+0x100>)
 800178e:	f000 ff13 	bl	80025b8 <HAL_DMA_ConfigChannelAttributes>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001798:	f7ff f9a2 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_UART_MspInit+0x100>)
 80017a0:	679a      	str	r2, [r3, #120]	; 0x78
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_UART_MspInit+0x100>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2102      	movs	r1, #2
 80017ac:	2025      	movs	r0, #37	; 0x25
 80017ae:	f000 fb8c 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017b2:	2025      	movs	r0, #37	; 0x25
 80017b4:	f000 fba3 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017b8:	bf00      	nop
 80017ba:	3758      	adds	r7, #88	; 0x58
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40004400 	.word	0x40004400
 80017c4:	000c0004 	.word	0x000c0004
 80017c8:	200005fc 	.word	0x200005fc
 80017cc:	40020058 	.word	0x40020058

080017d0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_UART_MspDeInit+0x3c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d110      	bne.n	8001804 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80017e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017e6:	f7ff ff11 	bl	800160c <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80017ea:	210c      	movs	r1, #12
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f001 f91a 	bl	8002a28 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fc45 	bl	8002088 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80017fe:	2025      	movs	r0, #37	; 0x25
 8001800:	f000 fb8b 	bl	8001f1a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40004400 	.word	0x40004400

08001810 <LL_APB1_GRP1_ForceReset>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800181e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <LL_APB1_GRP1_ReleaseReset>:
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	43db      	mvns	r3, r3
 8001844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001848:	4013      	ands	r3, r2
 800184a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <LL_EXTI_EnableIT_0_31>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <LL_EXTI_EnableIT_0_31+0x24>)
 8001862:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001866:	4905      	ldr	r1, [pc, #20]	; (800187c <LL_EXTI_EnableIT_0_31+0x24>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	58000800 	.word	0x58000800

08001880 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <vcom_Init+0x28>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800188e:	f7ff f835 	bl	80008fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001892:	f7ff fecd 	bl	8001630 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001896:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800189a:	f7ff ffdd 	bl	8001858 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800189e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000098 	.word	0x20000098

080018ac <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80018b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018b4:	f7ff ffac 	bl	8001810 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80018b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018bc:	f7ff ffb9 	bl	8001832 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <vcom_DeInit+0x28>)
 80018c2:	f7ff ff85 	bl	80017d0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f000 fb27 	bl	8001f1a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80018cc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000065c 	.word	0x2000065c

080018d8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	461a      	mov	r2, r3
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <vcom_Trace_DMA+0x24>)
 80018ec:	f003 fea8 	bl	8005640 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80018f0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000065c 	.word	0x2000065c

08001900 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <vcom_ReceiveInit+0x70>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800190e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001912:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	e893 0006 	ldmia.w	r3, {r1, r2}
 800191c:	4815      	ldr	r0, [pc, #84]	; (8001974 <vcom_ReceiveInit+0x74>)
 800191e:	f005 f9c6 	bl	8006cae <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001922:	bf00      	nop
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <vcom_ReceiveInit+0x74>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d0f7      	beq.n	8001924 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001934:	bf00      	nop
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <vcom_ReceiveInit+0x74>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001944:	d1f7      	bne.n	8001936 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <vcom_ReceiveInit+0x74>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <vcom_ReceiveInit+0x74>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001954:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <vcom_ReceiveInit+0x74>)
 8001958:	f005 fa04 	bl	8006d64 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	4906      	ldr	r1, [pc, #24]	; (8001978 <vcom_ReceiveInit+0x78>)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <vcom_ReceiveInit+0x74>)
 8001962:	f003 fe3e 	bl	80055e2 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001966:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000009c 	.word	0x2000009c
 8001974:	2000065c 	.word	0x2000065c
 8001978:	200006ec 	.word	0x200006ec

0800197c <vcom_Resume>:

void vcom_Resume(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <vcom_Resume+0x28>)
 8001982:	f003 fdde 	bl	8005542 <HAL_UART_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <vcom_Resume+0x14>
  {
    Error_Handler();
 800198c:	f7ff f8a8 	bl	8000ae0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <vcom_Resume+0x2c>)
 8001992:	f000 fad1 	bl	8001f38 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <vcom_Resume+0x24>
  {
    Error_Handler();
 800199c:	f7ff f8a0 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000065c 	.word	0x2000065c
 80019a8:	200005fc 	.word	0x200005fc

080019ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_UART_TxCpltCallback+0x18>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2000      	movs	r0, #0
 80019ba:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000098 	.word	0x20000098

080019c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_UART_RxCpltCallback+0x38>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <HAL_UART_RxCpltCallback+0x26>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_UART_RxCpltCallback+0x38>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <HAL_UART_RxCpltCallback+0x3c>)
 80019ec:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	4904      	ldr	r1, [pc, #16]	; (8001a04 <HAL_UART_RxCpltCallback+0x3c>)
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f003 fdf5 	bl	80055e2 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000009c 	.word	0x2000009c
 8001a04:	200006ec 	.word	0x200006ec

08001a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a0c:	f000 f8f4 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a36:	f009 fb9f 	bl	800b178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3a:	f7fe ff9f 	bl	800097c <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   r0, =_estack
 8001a40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001a4c:	0800b570 	.word	0x0800b570
  ldr r2, =_sbss
 8001a50:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001a54:	20000780 	.word	0x20000780

08001a58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>

08001a5a <LL_AHB2_GRP1_EnableClock>:
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_Init();
#elif defined(MX_NUCLEO_WL55JC1)
  /* should be calling BSP_RADIO_Init() but not supported by MX*/

  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]

  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	f7ff ffda 	bl	8001a5a <LL_AHB2_GRP1_EnableClock>

  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4812      	ldr	r0, [pc, #72]	; (8001b04 <RBI_Init+0x78>)
 8001abc:	f000 fe54 	bl	8002768 <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480e      	ldr	r0, [pc, #56]	; (8001b04 <RBI_Init+0x78>)
 8001aca:	f000 fe4d 	bl	8002768 <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480b      	ldr	r0, [pc, #44]	; (8001b04 <RBI_Init+0x78>)
 8001ad8:	f000 fe46 	bl	8002768 <HAL_GPIO_Init>
//  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);

  //RD_EDIT: test RF power
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2108      	movs	r1, #8
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <RBI_Init+0x78>)
 8001ae2:	f001 f886 	bl	8002bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2110      	movs	r1, #16
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <RBI_Init+0x78>)
 8001aec:	f001 f881 	bl	8002bf2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2120      	movs	r1, #32
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <RBI_Init+0x78>)
 8001af6:	f001 f87c 	bl	8002bf2 <HAL_GPIO_WritePin>

  return 0;
 8001afa:	2300      	movs	r3, #0
  /* USER CODE END RBI_Init_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1  */
  /* USER CODE BEGIN RBI_Init_3 */

  /* USER CODE END RBI_Init_3 */
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	48000800 	.word	0x48000800

08001b08 <RBI_ConfigRFSwitch>:

  /* USER CODE END RBI_DeInit_3 */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  /* code generated by MX does not support BSP */
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#elif defined(MX_NUCLEO_WL55JC1)
  switch (Config)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d84b      	bhi.n	8001bb0 <RBI_ConfigRFSwitch+0xa8>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <RBI_ConfigRFSwitch+0x18>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b51 	.word	0x08001b51
 8001b28:	08001b71 	.word	0x08001b71
 8001b2c:	08001b91 	.word	0x08001b91
  {
    case RBI_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2108      	movs	r1, #8
 8001b34:	4821      	ldr	r0, [pc, #132]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b36:	f001 f85c 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	481f      	ldr	r0, [pc, #124]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b40:	f001 f857 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2120      	movs	r1, #32
 8001b48:	481c      	ldr	r0, [pc, #112]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b4a:	f001 f852 	bl	8002bf2 <HAL_GPIO_WritePin>
      break;
 8001b4e:	e030      	b.n	8001bb2 <RBI_ConfigRFSwitch+0xaa>
    }
    case RBI_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	2108      	movs	r1, #8
 8001b54:	4819      	ldr	r0, [pc, #100]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b56:	f001 f84c 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	4817      	ldr	r0, [pc, #92]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b60:	f001 f847 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2120      	movs	r1, #32
 8001b68:	4814      	ldr	r0, [pc, #80]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b6a:	f001 f842 	bl	8002bf2 <HAL_GPIO_WritePin>
      break;
 8001b6e:	e020      	b.n	8001bb2 <RBI_ConfigRFSwitch+0xaa>
    }
    case RBI_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2108      	movs	r1, #8
 8001b74:	4811      	ldr	r0, [pc, #68]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b76:	f001 f83c 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2110      	movs	r1, #16
 8001b7e:	480f      	ldr	r0, [pc, #60]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b80:	f001 f837 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2120      	movs	r1, #32
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b8a:	f001 f832 	bl	8002bf2 <HAL_GPIO_WritePin>
      break;
 8001b8e:	e010      	b.n	8001bb2 <RBI_ConfigRFSwitch+0xaa>
    }
    case RBI_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2108      	movs	r1, #8
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001b96:	f001 f82c 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	4807      	ldr	r0, [pc, #28]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001ba0:	f001 f827 	bl	8002bf2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <RBI_ConfigRFSwitch+0xb4>)
 8001baa:	f001 f822 	bl	8002bf2 <HAL_GPIO_WritePin>
      break;
 8001bae:	e000      	b.n	8001bb2 <RBI_ConfigRFSwitch+0xaa>
    }
    default:
      break;
 8001bb0:	bf00      	nop
  }

  return 0;
 8001bb2:	2300      	movs	r3, #0
  /* USER CODE END RBI_ConfigRFSwitch_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_ConfigRFSwitch_3 */

  /* USER CODE END RBI_ConfigRFSwitch_3 */
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	48000800 	.word	0x48000800

08001bc0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_GetTxConfig();

#elif defined(MX_NUCLEO_WL55JC1)
  return RBI_CONF_RFO;
 8001bc4:	2302      	movs	r3, #2
  /* USER CODE END RBI_GetTxConfig_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_GetTxConfig_3 */

  /* USER CODE END RBI_GetTxConfig_3 */
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <RBI_GetWakeUpTime>:

int32_t RBI_GetWakeUpTime(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return  BSP_RADIO_GetWakeUpTime();

#elif defined(MX_NUCLEO_WL55JC1)
  return RF_WAKEUP_TIME;
 8001bd2:	230a      	movs	r3, #10
  /* USER CODE END RBI_GetWakeUpTime_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_GetWakeUpTime_3 */

  /* USER CODE END RBI_GetWakeUpTime_3 */
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_IsTCXO();

#elif defined(MX_NUCLEO_WL55JC1)
  return IS_TCXO_SUPPORTED;
 8001be0:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsTCXO_3 */

  /* USER CODE END RBI_IsTCXO_3 */
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_IsDCDC();

#elif defined(MX_NUCLEO_WL55JC1)
  return IS_DCDC_SUPPORTED;
 8001bee:	2300      	movs	r3, #0
  /* USER CODE END RBI_IsDCDC_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsDCDC_3 */

  /* USER CODE END RBI_IsDCDC_3 */
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6053      	str	r3, [r2, #4]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e0042000 	.word	0xe0042000

08001c20 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6053      	str	r3, [r2, #4]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e0042000 	.word	0xe0042000

08001c3c <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6053      	str	r3, [r2, #4]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	e0042000 	.word	0xe0042000

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f926 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c68:	f002 f936 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_Init+0x3c>)
 8001c70:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c72:	200f      	movs	r0, #15
 8001c74:	f7ff f9c0 	bl	8000ff8 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	e001      	b.n	8001c88 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c84:	f7ff f821 	bl	8000cca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000001c 	.word	0x2000001c

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000024 	.word	0x20000024
 8001cb8:	200006f0 	.word	0x200006f0

08001cbc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_SuspendTick+0x18>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_SuspendTick+0x18>)
 8001cc6:	f023 0302 	bic.w	r3, r3, #2
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_ResumeTick+0x18>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_ResumeTick+0x18>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001cf8:	f7ff ff84 	bl	8001c04 <LL_DBGMCU_EnableDBGSleepMode>
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001d04:	f7ff ff8c 	bl	8001c20 <LL_DBGMCU_EnableDBGStopMode>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8001d10:	f7ff ff94 	bl	8001c3c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <__NVIC_EnableIRQ+0x34>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db12      	blt.n	8001dec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	490a      	ldr	r1, [pc, #40]	; (8001df8 <__NVIC_DisableIRQ+0x44>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	3320      	adds	r3, #32
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001de0:	f3bf 8f4f 	dsb	sy
}
 8001de4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001de6:	f3bf 8f6f 	isb	sy
}
 8001dea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff2b 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff42 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ffb4 	bl	8001e50 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff83 	bl	8001dfc <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff35 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff43 	bl	8001db4 <__NVIC_DisableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e08e      	b.n	8002068 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_DMA_Init+0x138>)
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d80f      	bhi.n	8001f76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_DMA_Init+0x13c>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a45      	ldr	r2, [pc, #276]	; (8002078 <HAL_DMA_Init+0x140>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a42      	ldr	r2, [pc, #264]	; (800207c <HAL_DMA_Init+0x144>)
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
 8001f74:	e00e      	b.n	8001f94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <HAL_DMA_Init+0x148>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_DMA_Init+0x140>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	009a      	lsls	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <HAL_DMA_Init+0x14c>)
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fb52 	bl	8002690 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ff4:	d102      	bne.n	8001ffc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002008:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002012:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_DMA_Init+0x106>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d80c      	bhi.n	800203e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fb7b 	bl	8002720 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e008      	b.n	8002050 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40020407 	.word	0x40020407
 8002074:	bffdfff8 	.word	0xbffdfff8
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	40020000 	.word	0x40020000
 8002080:	bffdfbf8 	.word	0xbffdfbf8
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07b      	b.n	8002192 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_DMA_DeInit+0x114>)
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d80f      	bhi.n	80020d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_DMA_DeInit+0x118>)
 80020be:	4413      	add	r3, r2
 80020c0:	4a38      	ldr	r2, [pc, #224]	; (80021a4 <HAL_DMA_DeInit+0x11c>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	009a      	lsls	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a35      	ldr	r2, [pc, #212]	; (80021a8 <HAL_DMA_DeInit+0x120>)
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
 80020d4:	e00e      	b.n	80020f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_DMA_DeInit+0x124>)
 80020de:	4413      	add	r3, r2
 80020e0:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <HAL_DMA_DeInit+0x11c>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <HAL_DMA_DeInit+0x128>)
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f003 021c 	and.w	r2, r3, #28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fabd 	bl	8002690 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002126:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00f      	beq.n	8002150 <HAL_DMA_DeInit+0xc8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d80b      	bhi.n	8002150 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 faf1 	bl	8002720 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800214e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40020407 	.word	0x40020407
 80021a0:	bffdfff8 	.word	0xbffdfff8
 80021a4:	cccccccd 	.word	0xcccccccd
 80021a8:	40020000 	.word	0x40020000
 80021ac:	bffdfbf8 	.word	0xbffdfbf8
 80021b0:	40020400 	.word	0x40020400

080021b4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Start_IT+0x20>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e069      	b.n	80022a8 <HAL_DMA_Start_IT+0xf4>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d155      	bne.n	8002294 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fa02 	bl	8002616 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 020e 	orr.w	r2, r2, #14
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e00f      	b.n	800224c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 020a 	orr.w	r2, r2, #10
 800224a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002268:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002280:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e008      	b.n	80022a6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e04f      	b.n	8002362 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d008      	beq.n	80022e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e040      	b.n	8002362 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 020e 	bic.w	r2, r2, #14
 80022ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f003 021c 	and.w	r2, r3, #28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800232c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002344:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800234e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d005      	beq.n	8002390 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e047      	b.n	8002420 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 020e 	bic.w	r2, r2, #14
 800239e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	f003 021c 	and.w	r2, r3, #28
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
    }
  }
  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f003 031c 	and.w	r3, r3, #28
 800244c:	2204      	movs	r2, #4
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d027      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x7c>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d022      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0204 	bic.w	r2, r2, #4
 800247e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f003 021c 	and.w	r2, r3, #28
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2104      	movs	r1, #4
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8081 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80024a6:	e07b      	b.n	80025a0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	f003 031c 	and.w	r3, r3, #28
 80024b0:	2202      	movs	r2, #2
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03d      	beq.n	8002538 <HAL_DMA_IRQHandler+0x10c>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d038      	beq.n	8002538 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020a 	bic.w	r2, r2, #10
 80024e2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_DMA_IRQHandler+0x180>)
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d909      	bls.n	800250c <HAL_DMA_IRQHandler+0xe0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	f003 031c 	and.w	r3, r3, #28
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_IRQHandler+0x184>)
 8002502:	2102      	movs	r1, #2
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	6053      	str	r3, [r2, #4]
 800250a:	e008      	b.n	800251e <HAL_DMA_IRQHandler+0xf2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f003 031c 	and.w	r3, r3, #28
 8002514:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_DMA_IRQHandler+0x188>)
 8002516:	2102      	movs	r1, #2
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d038      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002536:	e033      	b.n	80025a0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f003 031c 	and.w	r3, r3, #28
 8002540:	2208      	movs	r2, #8
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02a      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x176>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d025      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020e 	bic.w	r2, r2, #14
 8002564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f003 021c 	and.w	r2, r3, #28
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
}
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40020080 	.word	0x40020080
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020000 	.word	0x40020000

080025b8 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	72fb      	strb	r3, [r7, #11]
    return status;
 80025d0:	7afb      	ldrb	r3, [r7, #11]
 80025d2:	e01b      	b.n	800260c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e003      	b.n	8002602 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002600:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]

  return status;
 800260a:	7afb      	ldrb	r3, [r7, #11]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800262c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800263e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	f003 021c 	and.w	r2, r3, #28
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b10      	cmp	r3, #16
 8002662:	d108      	bne.n	8002676 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002674:	e007      	b.n	8002686 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	60da      	str	r2, [r3, #12]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d813      	bhi.n	80026cc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3b08      	subs	r3, #8
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e011      	b.n	80026f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	009a      	lsls	r2, r3, #2
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80026d6:	4413      	add	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3b08      	subs	r3, #8
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	3307      	adds	r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80026f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40020407 	.word	0x40020407
 8002714:	cccccccd 	.word	0xcccccccd
 8002718:	4002081c 	.word	0x4002081c
 800271c:	40020880 	.word	0x40020880

08002720 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002730:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002744:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3b01      	subs	r3, #1
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2201      	movs	r2, #1
 8002750:	409a      	lsls	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	1000823f 	.word	0x1000823f
 8002764:	40020940 	.word	0x40020940

08002768 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	e140      	b.n	80029fa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	4013      	ands	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8132 	beq.w	80029f4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d00b      	beq.n	80027b0 <HAL_GPIO_Init+0x48>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d007      	beq.n	80027b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d130      	bne.n	8002812 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e6:	2201      	movs	r2, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0201 	and.w	r2, r3, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0xea>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b12      	cmp	r3, #18
 8002850:	d123      	bne.n	800289a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	6939      	ldr	r1, [r7, #16]
 8002896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 808c 	beq.w	80029f4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028dc:	4a4e      	ldr	r2, [pc, #312]	; (8002a18 <HAL_GPIO_Init+0x2b0>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	2207      	movs	r2, #7
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002906:	d00d      	beq.n	8002924 <HAL_GPIO_Init+0x1bc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <HAL_GPIO_Init+0x2b4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <HAL_GPIO_Init+0x1b8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a43      	ldr	r2, [pc, #268]	; (8002a20 <HAL_GPIO_Init+0x2b8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_GPIO_Init+0x1b4>
 8002918:	2302      	movs	r3, #2
 800291a:	e004      	b.n	8002926 <HAL_GPIO_Init+0x1be>
 800291c:	2307      	movs	r3, #7
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x1be>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_GPIO_Init+0x1be>
 8002924:	2300      	movs	r3, #0
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4093      	lsls	r3, r2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002936:	4938      	ldr	r1, [pc, #224]	; (8002a18 <HAL_GPIO_Init+0x2b0>)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002944:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 8002946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800296a:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 8002974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002978:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ee:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_GPIO_Init+0x2bc>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f aeb7 	bne.w	8002778 <HAL_GPIO_Init+0x10>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	48000400 	.word	0x48000400
 8002a20:	48000800 	.word	0x48000800
 8002a24:	58000800 	.word	0x58000800

08002a28 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a36:	e0af      	b.n	8002b98 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a2 	beq.w	8002b92 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002a4e:	4a59      	ldr	r2, [pc, #356]	; (8002bb4 <HAL_GPIO_DeInit+0x18c>)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	2207      	movs	r2, #7
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a76:	d00d      	beq.n	8002a94 <HAL_GPIO_DeInit+0x6c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a4f      	ldr	r2, [pc, #316]	; (8002bb8 <HAL_GPIO_DeInit+0x190>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <HAL_GPIO_DeInit+0x68>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <HAL_GPIO_DeInit+0x194>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_GPIO_DeInit+0x64>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_DeInit+0x6e>
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_DeInit+0x6e>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_DeInit+0x6e>
 8002a94:	2300      	movs	r3, #0
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d136      	bne.n	8002b14 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002aa8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	4943      	ldr	r1, [pc, #268]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002aba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	493f      	ldr	r1, [pc, #252]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	493b      	ldr	r1, [pc, #236]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4937      	ldr	r1, [pc, #220]	; (8002bc0 <HAL_GPIO_DeInit+0x198>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	2207      	movs	r2, #7
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002af6:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_GPIO_DeInit+0x18c>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	482b      	ldr	r0, [pc, #172]	; (8002bb4 <HAL_GPIO_DeInit+0x18c>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	3302      	adds	r3, #2
 8002b10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	08d2      	lsrs	r2, r2, #3
 8002b48:	4019      	ands	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2103      	movs	r1, #3
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f47f af49 	bne.w	8002a38 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	58000800 	.word	0x58000800

08002bc4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	807b      	strh	r3, [r7, #2]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c02:	787b      	ldrb	r3, [r7, #1]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43d9      	mvns	r1, r3
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	400b      	ands	r3, r1
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a03      	ldr	r2, [pc, #12]	; (8002c6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	58000400 	.word	0x58000400

08002c70 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c8e:	d10d      	bne.n	8002cac <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002c90:	f000 f83c 	bl	8002d0c <HAL_PWREx_DisableLowPowerRunMode>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002c9a:	e015      	b.n	8002cc8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002ca8:	f000 f822 	bl	8002cf0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002cbe:	bf30      	wfi
 8002cc0:	e002      	b.n	8002cc8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002cc2:	bf40      	sev
    __WFE();
 8002cc4:	bf20      	wfe
    __WFE();
 8002cc6:	bf20      	wfe
  }
}
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	58000400 	.word	0x58000400
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_PWREx_GetVoltageRange+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	58000400 	.word	0x58000400

08002cf0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a03      	ldr	r2, [pc, #12]	; (8002d08 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	58000400 	.word	0x58000400

08002d0c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2232      	movs	r2, #50	; 0x32
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0c9b      	lsrs	r3, r3, #18
 8002d30:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002d32:	e002      	b.n	8002d3a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d46:	d102      	bne.n	8002d4e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f2      	bne.n	8002d34 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5a:	d101      	bne.n	8002d60 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	58000400 	.word	0x58000400
 8002d70:	2000001c 	.word	0x2000001c
 8002d74:	431bde83 	.word	0x431bde83

08002d78 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002da4:	bf30      	wfi
 8002da6:	e002      	b.n	8002dae <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002da8:	bf40      	sev
    __WFE();
 8002daa:	bf20      	wfe
    __WFE();
 8002dac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	6113      	str	r3, [r2, #16]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	58000400 	.word	0x58000400
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <LL_PWR_IsEnabledBkUpAccess>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d101      	bne.n	8002de2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	58000400 	.word	0x58000400

08002df0 <LL_RCC_HSE_EnableTcxo>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_HSE_DisableTcxo>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e3a:	d101      	bne.n	8002e40 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_HSE_Enable>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <LL_RCC_HSE_Disable>:
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <LL_RCC_HSE_IsReady>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e94:	d101      	bne.n	8002e9a <LL_RCC_HSE_IsReady+0x18>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_RCC_HSE_IsReady+0x1a>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <LL_RCC_HSI_Enable>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_HSI_Disable>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_HSI_IsReady>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	d101      	bne.n	8002ef4 <LL_RCC_HSI_IsReady+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_RCC_HSI_IsReady+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_HSI_SetCalibTrimming>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_LSE_IsReady>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d101      	bne.n	8002f3e <LL_RCC_LSE_IsReady+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_RCC_LSE_IsReady+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_LSI_Enable>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_LSI_Disable>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_LSI_IsReady>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d101      	bne.n	8002fa0 <LL_RCC_LSI_IsReady+0x18>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_RCC_LSI_IsReady+0x1a>
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_MSI_Enable>:
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_MSI_Disable>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_MSI_IsReady>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d101      	bne.n	8002ff8 <LL_RCC_MSI_IsReady+0x16>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <LL_RCC_MSI_IsReady+0x18>
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d101      	bne.n	8003018 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <LL_RCC_MSI_GetRange>:
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <LL_RCC_SetSysClkSource>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 0203 	bic.w	r2, r3, #3
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	608b      	str	r3, [r1, #8]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <LL_RCC_GetSysClkSource>:
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_SetAHBPrescaler>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <LL_C2_RCC_SetAHBPrescaler>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <LL_RCC_SetAHB3Prescaler>:
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003114:	f023 020f 	bic.w	r2, r3, #15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <LL_RCC_SetAPB1Prescaler>:
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <LL_RCC_SetAPB2Prescaler>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <LL_RCC_GetAHBPrescaler>:
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <LL_RCC_GetAHB3Prescaler>:
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_GetAPB1Prescaler>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_GetAPB2Prescaler>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <LL_RCC_ConfigMCO>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800324e:	d101      	bne.n	8003254 <LL_RCC_PLL_IsReady+0x18>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <LL_RCC_PLL_IsReady+0x1a>
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0303 	and.w	r3, r3, #3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d101      	bne.n	80032d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ee:	d101      	bne.n	80032f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800330a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003312:	d101      	bne.n	8003318 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003334:	d101      	bne.n	800333a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003356:	d101      	bne.n	800335c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <LL_AHB2_GRP1_EnableClock>:
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4313      	orrs	r3, r2
 800337c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e38a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033aa:	f7ff fe78 	bl	800309e <LL_RCC_GetSysClkSource>
 80033ae:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	f7ff ff77 	bl	80032a2 <LL_RCC_PLL_GetMainSource>
 80033b4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80c9 	beq.w	8003556 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3e>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d17b      	bne.n	80034c8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d178      	bne.n	80034c8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033d6:	f7ff fe04 	bl	8002fe2 <LL_RCC_MSI_IsReady>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x54>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e369      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x72>
 80033fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003408:	e006      	b.n	8003418 <HAL_RCC_OscConfig+0x80>
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	4293      	cmp	r3, r2
 800341a:	d222      	bcs.n	8003462 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd91 	bl	8003f48 <RCC_SetFlashLatencyFromMSIRange>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e347      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343a:	f043 0308 	orr.w	r3, r3, #8
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fdf8 	bl	8003050 <LL_RCC_MSI_SetCalibTrimming>
 8003460:	e021      	b.n	80034a6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fddf 	bl	8003050 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fd56 	bl	8003f48 <RCC_SetFlashLatencyFromMSIRange>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e30c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034a6:	f000 fd17 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4ab4      	ldr	r2, [pc, #720]	; (8003780 <HAL_RCC_OscConfig+0x3e8>)
 80034ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034b0:	4bb4      	ldr	r3, [pc, #720]	; (8003784 <HAL_RCC_OscConfig+0x3ec>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fd9f 	bl	8000ff8 <HAL_InitTick>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d047      	beq.n	8003554 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	e2fb      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02c      	beq.n	800352a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034d0:	f7ff fd6b 	bl	8002faa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034d4:	f7fd fd9a 	bl	800100c <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034dc:	f7fd fd96 	bl	800100c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e2e8      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80034ee:	f7ff fd78 	bl	8002fe2 <LL_RCC_MSI_IsReady>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f1      	beq.n	80034dc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003502:	f043 0308 	orr.w	r3, r3, #8
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fd94 	bl	8003050 <LL_RCC_MSI_SetCalibTrimming>
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800352a:	f7ff fd4c 	bl	8002fc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800352e:	f7fd fd6d 	bl	800100c <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003536:	f7fd fd69 	bl	800100c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e2bb      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003548:	f7ff fd4b 	bl	8002fe2 <LL_RCC_MSI_IsReady>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f1      	bne.n	8003536 <HAL_RCC_OscConfig+0x19e>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003554:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d05f      	beq.n	8003622 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x1dc>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d10d      	bne.n	800358a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d10a      	bne.n	800358a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	f7ff fc85 	bl	8002e82 <LL_RCC_HSE_IsReady>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d050      	beq.n	8003620 <HAL_RCC_OscConfig+0x288>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d14c      	bne.n	8003620 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e29a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_OscConfig+0x218>
 80035aa:	f7ff fc4e 	bl	8002e4a <LL_RCC_HSE_Enable>
 80035ae:	e00d      	b.n	80035cc <HAL_RCC_OscConfig+0x234>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80035b8:	d104      	bne.n	80035c4 <HAL_RCC_OscConfig+0x22c>
 80035ba:	f7ff fc19 	bl	8002df0 <LL_RCC_HSE_EnableTcxo>
 80035be:	f7ff fc44 	bl	8002e4a <LL_RCC_HSE_Enable>
 80035c2:	e003      	b.n	80035cc <HAL_RCC_OscConfig+0x234>
 80035c4:	f7ff fc4f 	bl	8002e66 <LL_RCC_HSE_Disable>
 80035c8:	f7ff fc20 	bl	8002e0c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd fd1a 	bl	800100c <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fd fd16 	bl	800100c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e268      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80035ee:	f7ff fc48 	bl	8002e82 <LL_RCC_HSE_IsReady>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f1      	beq.n	80035dc <HAL_RCC_OscConfig+0x244>
 80035f8:	e013      	b.n	8003622 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd fd07 	bl	800100c <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003602:	f7fd fd03 	bl	800100c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b64      	cmp	r3, #100	; 0x64
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e255      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003614:	f7ff fc35 	bl	8002e82 <LL_RCC_HSE_IsReady>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f1      	bne.n	8003602 <HAL_RCC_OscConfig+0x26a>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d005      	beq.n	8003640 <HAL_RCC_OscConfig+0x2a8>
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d113      	bne.n	8003662 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d110      	bne.n	8003662 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003640:	f7ff fc4c 	bl	8002edc <LL_RCC_HSI_IsReady>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x2be>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e234      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fc4f 	bl	8002efe <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	e031      	b.n	80036c6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d019      	beq.n	800369e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366a:	f7ff fc1b 	bl	8002ea4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fd fccd 	bl	800100c <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7fd fcc9 	bl	800100c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e21b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003688:	f7ff fc28 	bl	8002edc <LL_RCC_HSI_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fc31 	bl	8002efe <LL_RCC_HSI_SetCalibTrimming>
 800369c:	e013      	b.n	80036c6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	f7ff fc0f 	bl	8002ec0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fd fcb3 	bl	800100c <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fd fcaf 	bl	800100c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e201      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80036bc:	f7ff fc0e 	bl	8002edc <LL_RCC_HSI_IsReady>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f1      	bne.n	80036aa <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d06e      	beq.n	80037b0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d056      	beq.n	8003788 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d031      	beq.n	8003756 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1da      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8003714:	f7ff fc28 	bl	8002f68 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003718:	f7fd fc78 	bl	800100c <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003720:	f7fd fc74 	bl	800100c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b11      	cmp	r3, #17
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1c6      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003732:	f7ff fc29 	bl	8002f88 <LL_RCC_LSI_IsReady>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f1      	bne.n	8003720 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003744:	f023 0210 	bic.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	f7ff fbf7 	bl	8002f48 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fd fc57 	bl	800100c <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fd fc53 	bl	800100c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b11      	cmp	r3, #17
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1a5      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003774:	f7ff fc08 	bl	8002f88 <LL_RCC_LSI_IsReady>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f1      	beq.n	8003762 <HAL_RCC_OscConfig+0x3ca>
 800377e:	e017      	b.n	80037b0 <HAL_RCC_OscConfig+0x418>
 8003780:	2000001c 	.word	0x2000001c
 8003784:	20000020 	.word	0x20000020
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003788:	f7ff fbee 	bl	8002f68 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd fc3e 	bl	800100c <HAL_GetTick>
 8003790:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fd fc3a 	bl	800100c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b11      	cmp	r3, #17
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e18c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80037a6:	f7ff fbef 	bl	8002f88 <LL_RCC_LSI_IsReady>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f1      	bne.n	8003794 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80d8 	beq.w	800396e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037be:	f7ff fb05 	bl	8002dcc <LL_PWR_IsEnabledBkUpAccess>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d113      	bne.n	80037f0 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037c8:	f7ff fa44 	bl	8002c54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037cc:	f7fd fc1e 	bl	800100c <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d4:	f7fd fc1a 	bl	800100c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e16c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037e6:	f7ff faf1 	bl	8002dcc <LL_PWR_IsEnabledBkUpAccess>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f1      	beq.n	80037d4 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d07b      	beq.n	80038f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b85      	cmp	r3, #133	; 0x85
 80037fe:	d003      	beq.n	8003808 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b05      	cmp	r3, #5
 8003806:	d109      	bne.n	800381c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fd fbf6 	bl	800100c <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fd fbe8 	bl	800100c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e138      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800384e:	f7ff fb6a 	bl	8002f26 <LL_RCC_LSE_IsReady>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b81      	cmp	r3, #129	; 0x81
 800385e:	d003      	beq.n	8003868 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b85      	cmp	r3, #133	; 0x85
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fbd0 	bl	800100c <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003882:	e00a      	b.n	800389a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fd fbc2 	bl	800100c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e112      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ec      	beq.n	8003884 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80038aa:	e060      	b.n	800396e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fbae 	bl	800100c <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fd fba0 	bl	800100c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0f0      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ec      	bne.n	80038c8 <HAL_RCC_OscConfig+0x530>
 80038ee:	e03e      	b.n	800396e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fb8c 	bl	800100c <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd fb7e 	bl	800100c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0ce      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ec      	bne.n	800390c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fd fb6b 	bl	800100c <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd fb5d 	bl	800100c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0ad      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003964:	f7ff fadf 	bl	8002f26 <LL_RCC_LSE_IsReady>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ef      	bne.n	800394e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a3 	beq.w	8003abe <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d076      	beq.n	8003a6c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	2b02      	cmp	r3, #2
 8003984:	d14b      	bne.n	8003a1e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	f7ff fc4b 	bl	8003220 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fd fb3f 	bl	800100c <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd fb3b 	bl	800100c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b0a      	cmp	r3, #10
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e08d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80039a4:	f7ff fc4a 	bl	800323c <LL_RCC_PLL_IsReady>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f1      	bne.n	8003992 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_OscConfig+0x730>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039c0:	4311      	orrs	r1, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c6:	0212      	lsls	r2, r2, #8
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039d4:	4311      	orrs	r1, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039da:	430a      	orrs	r2, r1
 80039dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	f7ff fc0e 	bl	8003204 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fb08 	bl	800100c <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd fb04 	bl	800100c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b0a      	cmp	r3, #10
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e056      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003a12:	f7ff fc13 	bl	800323c <LL_RCC_PLL_IsReady>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f1      	beq.n	8003a00 <HAL_RCC_OscConfig+0x668>
 8003a1c:	e04f      	b.n	8003abe <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	f7ff fbff 	bl	8003220 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fae1 	bl	800100c <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fd fadd 	bl	800100c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b0a      	cmp	r3, #10
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e02f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a60:	f7ff fbec 	bl	800323c <LL_RCC_PLL_IsReady>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f1      	bne.n	8003a4e <HAL_RCC_OscConfig+0x6b6>
 8003a6a:	e028      	b.n	8003abe <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e023      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d115      	bne.n	8003aba <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d10e      	bne.n	8003aba <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	11c1808c 	.word	0x11c1808c

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e12c      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b98      	ldr	r3, [pc, #608]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d91b      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	4993      	ldr	r1, [pc, #588]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afe:	f7fd fa85 	bl	800100c <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b06:	f7fd fa81 	bl	800100c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e110      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b18:	4b8a      	ldr	r3, [pc, #552]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d1ef      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fabc 	bl	80030b4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fa66 	bl	800100c <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b44:	f7fd fa62 	bl	800100c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0f1      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b56:	f7ff fbaf 	bl	80032b8 <LL_RCC_IsActiveFlag_HPRE>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f1      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d016      	beq.n	8003b9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fab2 	bl	80030da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fa49 	bl	800100c <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b7e:	f7fd fa45 	bl	800100c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0d4      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b90:	f7ff fba3 	bl	80032da <LL_RCC_IsActiveFlag_C2HPRE>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f1      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff faaa 	bl	8003104 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fa2c 	bl	800100c <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bb8:	f7fd fa28 	bl	800100c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0b7      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bca:	f7ff fb98 	bl	80032fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f1      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d016      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff faa3 	bl	8003130 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bea:	f7fd fa0f 	bl	800100c <HAL_GetTick>
 8003bee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bf2:	f7fd fa0b 	bl	800100c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e09a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c04:	f7ff fb8d 	bl	8003322 <LL_RCC_IsActiveFlag_PPRE1>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f1      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d017      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fa98 	bl	8003156 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c26:	f7fd f9f1 	bl	800100c <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c2e:	f7fd f9ed 	bl	800100c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e07c      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c40:	f7ff fb80 	bl	8003344 <LL_RCC_IsActiveFlag_PPRE2>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f1      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d043      	beq.n	8003cde <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c5e:	f7ff f910 	bl	8002e82 <LL_RCC_HSE_IsReady>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11e      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e066      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c74:	f7ff fae2 	bl	800323c <LL_RCC_PLL_IsReady>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e05b      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c8a:	f7ff f9aa 	bl	8002fe2 <LL_RCC_MSI_IsReady>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e050      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c98:	f7ff f920 	bl	8002edc <LL_RCC_HSI_IsReady>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e049      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f9e4 	bl	8003078 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb0:	f7fd f9ac 	bl	800100c <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fd f9a8 	bl	800100c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e035      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	f7ff f9e6 	bl	800309e <LL_RCC_GetSysClkSource>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d1ec      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d21b      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	4913      	ldr	r1, [pc, #76]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd f986 	bl	800100c <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d04:	f7fd f982 	bl	800100c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e011      	b.n	8003d3a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x278>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1ef      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d24:	f000 f8d8 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_RCC_ClockConfig+0x27c>)
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_RCC_ClockConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd f960 	bl	8000ff8 <HAL_InitTick>
 8003d38:	4603      	mov	r3, r0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	58004000 	.word	0x58004000
 8003d48:	2000001c 	.word	0x2000001c
 8003d4c:	20000020 	.word	0x20000020

08003d50 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO1 Clock Enable */
  __MCO1_CLK_ENABLE();
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f7ff fb02 	bl	8003366 <LL_AHB2_GRP1_EnableClock>

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin       = MCO1_PIN;
 8003d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d82:	f7fe fcf1 	bl	8002768 <HAL_GPIO_Init>

  /* Configure the microcontroller clock output (MCO) */
  LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68b8      	ldr	r0, [r7, #8]
 8003d8a:	f7ff fa25 	bl	80031d8 <LL_RCC_ConfigMCO>
}
 8003d8e:	bf00      	nop
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	f7ff f97a 	bl	800309e <LL_RCC_GetSysClkSource>
 8003daa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dac:	f7ff fa79 	bl	80032a2 <LL_RCC_PLL_GetMainSource>
 8003db0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x2c>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d139      	bne.n	8003e32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d136      	bne.n	8003e32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003dc4:	f7ff f91d 	bl	8003002 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x62>
 8003dce:	f7ff f918 	bl	8003002 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_GetSysClockFreq+0x4e>
 8003dd8:	f7ff f923 	bl	8003022 <LL_RCC_MSI_GetRange>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	e005      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x5a>
 8003de6:	f7ff f927 	bl	8003038 <LL_RCC_MSI_GetRangeAfterStandby>
 8003dea:	4603      	mov	r3, r0
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a36      	ldr	r2, [pc, #216]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x134>)
 8003df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df8:	e014      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x8c>
 8003dfa:	f7ff f902 	bl	8003002 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_GetSysClockFreq+0x7a>
 8003e04:	f7ff f90d 	bl	8003022 <LL_RCC_MSI_GetRange>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	e005      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x86>
 8003e12:	f7ff f911 	bl	8003038 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e16:	4603      	mov	r3, r0
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x134>)
 8003e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d115      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e30:	e012      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d109      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e44:	f7fe fff0 	bl	8002e28 <LL_RCC_HSE_IsEnabledDiv2>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e001      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003e54:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e58:	f7ff f921 	bl	800309e <LL_RCC_GetSysClkSource>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d12f      	bne.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003e62:	f7ff fa1e 	bl	80032a2 <LL_RCC_PLL_GetMainSource>
 8003e66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0xde>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d003      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0xe4>
 8003e74:	e00d      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e78:	60fb      	str	r3, [r7, #12]
        break;
 8003e7a:	e00d      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e7c:	f7fe ffd4 	bl	8002e28 <LL_RCC_HSE_IsEnabledDiv2>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003e8a:	e005      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e8e:	60fb      	str	r3, [r7, #12]
        break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	60fb      	str	r3, [r7, #12]
        break;
 8003e96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e98:	f7ff f9e1 	bl	800325e <LL_RCC_PLL_GetN>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	fb03 f402 	mul.w	r4, r3, r2
 8003ea4:	f7ff f9f2 	bl	800328c <LL_RCC_PLL_GetDivider>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	3301      	adds	r3, #1
 8003eae:	fbb4 f4f3 	udiv	r4, r4, r3
 8003eb2:	f7ff f9e0 	bl	8003276 <LL_RCC_PLL_GetR>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	0f5b      	lsrs	r3, r3, #29
 8003eba:	3301      	adds	r3, #1
 8003ebc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ec0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ec2:	697b      	ldr	r3, [r7, #20]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}
 8003ecc:	0800b3bc 	.word	0x0800b3bc
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	01e84800 	.word	0x01e84800

08003ed8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed8:	b598      	push	{r3, r4, r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003edc:	f7ff ff5c 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	f7ff f94b 	bl	800317c <LL_RCC_GetAHBPrescaler>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	4a03      	ldr	r2, [pc, #12]	; (8003efc <HAL_RCC_GetHCLKFreq+0x24>)
 8003ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd98      	pop	{r3, r4, r7, pc}
 8003efc:	0800b35c 	.word	0x0800b35c

08003f00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f00:	b598      	push	{r3, r4, r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f04:	f7ff ffe8 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003f08:	4604      	mov	r4, r0
 8003f0a:	f7ff f94f 	bl	80031ac <LL_RCC_GetAPB1Prescaler>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd98      	pop	{r3, r4, r7, pc}
 8003f20:	0800b39c 	.word	0x0800b39c

08003f24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b598      	push	{r3, r4, r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003f28:	f7ff ffd6 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	f7ff f948 	bl	80031c2 <LL_RCC_GetAPB2Prescaler>
 8003f32:	4603      	mov	r3, r0
 8003f34:	0adb      	lsrs	r3, r3, #11
 8003f36:	4a03      	ldr	r2, [pc, #12]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd98      	pop	{r3, r4, r7, pc}
 8003f44:	0800b39c 	.word	0x0800b39c

08003f48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003f60:	f7ff f917 	bl	8003192 <LL_RCC_GetAHB3Prescaler>
 8003f64:	4603      	mov	r3, r0
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	0c9c      	lsrs	r4, r3, #18
 8003f84:	f7fe fea8 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 f80b 	bl	8003fa8 <RCC_SetFlashLatency>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	0800b3bc 	.word	0x0800b3bc
 8003fa0:	0800b35c 	.word	0x0800b35c
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08e      	sub	sp, #56	; 0x38
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <RCC_SetFlashLatency+0xfc>)
 8003fb4:	f107 0320 	add.w	r3, r7, #32
 8003fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fbc:	6018      	str	r0, [r3, #0]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003fc2:	4a39      	ldr	r2, [pc, #228]	; (80040a8 <RCC_SetFlashLatency+0x100>)
 8003fc4:	f107 0318 	add.w	r3, r7, #24
 8003fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fcc:	6018      	str	r0, [r3, #0]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003fd2:	4a36      	ldr	r2, [pc, #216]	; (80040ac <RCC_SetFlashLatency+0x104>)
 8003fd4:	f107 030c 	add.w	r3, r7, #12
 8003fd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003fde:	2300      	movs	r3, #0
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe8:	d11d      	bne.n	8004026 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
 8003fee:	e016      	b.n	800401e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4293      	cmp	r3, r2
 8004004:	d808      	bhi.n	8004018 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800400e:	4413      	add	r3, r2
 8004010:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004016:	e023      	b.n	8004060 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	3301      	adds	r3, #1
 800401c:	633b      	str	r3, [r7, #48]	; 0x30
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	2b02      	cmp	r3, #2
 8004022:	d9e5      	bls.n	8003ff0 <RCC_SetFlashLatency+0x48>
 8004024:	e01c      	b.n	8004060 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004026:	2300      	movs	r3, #0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402a:	e016      	b.n	800405a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004034:	4413      	add	r3, r2
 8004036:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4293      	cmp	r3, r2
 8004040:	d808      	bhi.n	8004054 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800404a:	4413      	add	r3, r2
 800404c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004052:	e005      	b.n	8004060 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	3301      	adds	r3, #1
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	2b02      	cmp	r3, #2
 800405e:	d9e5      	bls.n	800402c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <RCC_SetFlashLatency+0x108>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 0207 	bic.w	r2, r3, #7
 8004068:	4911      	ldr	r1, [pc, #68]	; (80040b0 <RCC_SetFlashLatency+0x108>)
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004070:	f7fc ffcc 	bl	800100c <HAL_GetTick>
 8004074:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004076:	e008      	b.n	800408a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004078:	f7fc ffc8 	bl	800100c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e007      	b.n	800409a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <RCC_SetFlashLatency+0x108>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004094:	429a      	cmp	r2, r3
 8004096:	d1ef      	bne.n	8004078 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3738      	adds	r7, #56	; 0x38
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	0800b244 	.word	0x0800b244
 80040a8:	0800b24c 	.word	0x0800b24c
 80040ac:	0800b254 	.word	0x0800b254
 80040b0:	58004000 	.word	0x58004000

080040b4 <LL_RCC_LSE_IsReady>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d101      	bne.n	80040cc <LL_RCC_LSE_IsReady+0x18>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <LL_RCC_LSE_IsReady+0x1a>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_SetUSARTClockSource>:
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80040de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	43db      	mvns	r3, r3
 80040ec:	401a      	ands	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <LL_RCC_SetI2SClockSource>:
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <LL_RCC_SetLPUARTClockSource>:
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <LL_RCC_SetI2CClockSource>:
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004172:	43db      	mvns	r3, r3
 8004174:	401a      	ands	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800417e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <LL_RCC_SetLPTIMClockSource>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800419a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <LL_RCC_SetRNGClockSource>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_SetADCClockSource>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <LL_RCC_SetRTCClockSource>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800422c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <LL_RCC_GetRTCClockSource>:
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <LL_RCC_ForceBackupDomainReset>:
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <LL_RCC_ReleaseBackupDomainReset>:
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
	...

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80042a8:	2300      	movs	r3, #0
 80042aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80042ac:	2300      	movs	r3, #0
 80042ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d058      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80042bc:	f7fe fcca 	bl	8002c54 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c0:	f7fc fea4 	bl	800100c <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fc fea0 	bl	800100c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	74fb      	strb	r3, [r7, #19]
        break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80042dc:	4b7b      	ldr	r3, [pc, #492]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d1ee      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d13c      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80042f0:	f7ff ffa7 	bl	8004242 <LL_RCC_GetRTCClockSource>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d00f      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430c:	f7ff ffa5 	bl	800425a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004310:	f7ff ffb3 	bl	800427a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d014      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fc fe70 	bl	800100c <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800432e:	e00b      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fc fe6c 	bl	800100c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d902      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	74fb      	strb	r3, [r7, #19]
            break;
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004348:	f7ff feb4 	bl	80040b4 <LL_RCC_LSE_IsReady>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d1ee      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff5b 	bl	8004218 <LL_RCC_SetRTCClockSource>
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	74bb      	strb	r3, [r7, #18]
 8004368:	e001      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fea9 	bl	80040d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fe9e 	bl	80040d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fec0 	bl	8004130 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fee6 	bl	8004192 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fedb 	bl	8004192 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fed0 	bl	8004192 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fea9 	bl	800415a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe9e 	bl	800415a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fe93 	bl	800415a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d011      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fe5e 	bl	8004106 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d107      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004462:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fea5 	bl	80041c4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	2b00      	cmp	r3, #0
 8004480:	d107      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004490:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fea3 	bl	80041ee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b0:	d107      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80044c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	58000400 	.word	0x58000400

080044d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d068      	beq.n	80045b4 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fc fb70 	bl	8000bdc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004504:	4b2e      	ldr	r3, [pc, #184]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004506:	22ca      	movs	r2, #202	; 0xca
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
 800450a:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <HAL_RTC_Init+0xf0>)
 800450c:	2253      	movs	r2, #83	; 0x53
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9fb 	bl	800490c <RTC_EnterInitMode>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d13f      	bne.n	80045a0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004526:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	4319      	orrs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	430b      	orrs	r3, r1
 8004544:	491e      	ldr	r1, [pc, #120]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	491a      	ldr	r1, [pc, #104]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_RTC_Init+0xf0>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	430b      	orrs	r3, r1
 800456c:	4914      	ldr	r1, [pc, #80]	; (80045c0 <HAL_RTC_Init+0xf0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9fe 	bl	8004974 <RTC_ExitInitMode>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10e      	bne.n	80045a0 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8004582:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <HAL_RTC_Init+0xf0>)
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a19      	ldr	r1, [r3, #32]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4319      	orrs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	430b      	orrs	r3, r1
 800459a:	4909      	ldr	r1, [pc, #36]	; (80045c0 <HAL_RTC_Init+0xf0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <HAL_RTC_Init+0xf0>)
 80045a2:	22ff      	movs	r2, #255	; 0xff
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40002800 	.word	0x40002800

080045c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_RTC_SetAlarm_IT+0x1e>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0e5      	b.n	80047ae <HAL_RTC_SetAlarm_IT+0x1ea>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80045f2:	4b71      	ldr	r3, [pc, #452]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d05c      	beq.n	80046be <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d136      	bne.n	8004678 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800460a:	4b6b      	ldr	r3, [pc, #428]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f9e5 	bl	80049f0 <RTC_ByteToBcd2>
 8004626:	4603      	mov	r3, r0
 8004628:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f9de 	bl	80049f0 <RTC_ByteToBcd2>
 8004634:	4603      	mov	r3, r0
 8004636:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004638:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	789b      	ldrb	r3, [r3, #2]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f9d6 	bl	80049f0 <RTC_ByteToBcd2>
 8004644:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004646:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	78db      	ldrb	r3, [r3, #3]
 800464e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004650:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f9c8 	bl	80049f0 <RTC_ByteToBcd2>
 8004660:	4603      	mov	r3, r0
 8004662:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004664:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800466c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e022      	b.n	80046be <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004678:	4b4f      	ldr	r3, [pc, #316]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2200      	movs	r2, #0
 8004688:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004696:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800469c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	78db      	ldrb	r3, [r3, #3]
 80046a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046a4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ac:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046ae:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046b4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80046c0:	22ca      	movs	r2, #202	; 0xca
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
 80046c4:	4b3c      	ldr	r3, [pc, #240]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80046c6:	2253      	movs	r2, #83	; 0x53
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d12c      	bne.n	800472e <HAL_RTC_SetAlarm_IT+0x16a>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80046d4:	4b38      	ldr	r3, [pc, #224]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	4a37      	ldr	r2, [pc, #220]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80046da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046de:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80046e0:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ec:	d107      	bne.n	80046fe <HAL_RTC_SetAlarm_IT+0x13a>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4930      	ldr	r1, [pc, #192]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	644b      	str	r3, [r1, #68]	; 0x44
 80046fc:	e006      	b.n	800470c <HAL_RTC_SetAlarm_IT+0x148>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80046fe:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004704:	4a2c      	ldr	r2, [pc, #176]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004726:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800472a:	6193      	str	r3, [r2, #24]
 800472c:	e02b      	b.n	8004786 <HAL_RTC_SetAlarm_IT+0x1c2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004734:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004738:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800473a:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800473c:	2202      	movs	r2, #2
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d107      	bne.n	8004758 <HAL_RTC_SetAlarm_IT+0x194>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	4919      	ldr	r1, [pc, #100]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004752:	4313      	orrs	r3, r2
 8004754:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004756:	e006      	b.n	8004766 <HAL_RTC_SetAlarm_IT+0x1a2>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004758:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800477a:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004780:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004784:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RTC_SetAlarm_IT+0x1f8>)
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478c:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <HAL_RTC_SetAlarm_IT+0x1f8>)
 800478e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004792:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RTC_SetAlarm_IT+0x1f4>)
 8004798:	22ff      	movs	r2, #255	; 0xff
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd90      	pop	{r4, r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40002800 	.word	0x40002800
 80047bc:	58000800 	.word	0x58000800

080047c0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_RTC_DeactivateAlarm+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e042      	b.n	800485e <HAL_RTC_DeactivateAlarm+0x9e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e8:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 80047ea:	22ca      	movs	r2, #202	; 0xca
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 80047f0:	2253      	movs	r2, #83	; 0x53
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d112      	bne.n	8004822 <HAL_RTC_DeactivateAlarm+0x62>
  {
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80047fc:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004806:	6453      	str	r3, [r2, #68]	; 0x44

    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004808:	4b17      	ldr	r3, [pc, #92]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 800480e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004812:	6193      	str	r3, [r2, #24]

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f023 0201 	bic.w	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
 8004820:	e011      	b.n	8004846 <HAL_RTC_DeactivateAlarm+0x86>
  }
  else
  {
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004822:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800482c:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800482e:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004834:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004838:	6193      	str	r3, [r2, #24]

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f023 0202 	bic.w	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RTC_DeactivateAlarm+0xa8>)
 8004848:	22ff      	movs	r2, #255	; 0xff
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	40002800 	.word	0x40002800

0800486c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004874:	4b11      	ldr	r3, [pc, #68]	; (80048bc <HAL_RTC_AlarmIRQHandler+0x50>)
 8004876:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <HAL_RTC_AlarmIRQHandler+0x50>)
 800488c:	2201      	movs	r2, #1
 800488e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc fdc5 	bl	8001420 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RTC_AlarmIRQHandler+0x50>)
 80048a2:	2202      	movs	r2, #2
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f94a 	bl	8004b40 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40002800 	.word	0x40002800

080048c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 80048c8:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <HAL_RTC_WaitForSynchro+0x48>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <HAL_RTC_WaitForSynchro+0x48>)
 80048ce:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80048d2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80048d4:	f7fc fb9a 	bl	800100c <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80048da:	e009      	b.n	80048f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048dc:	f7fc fb96 	bl	800100c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ea:	d901      	bls.n	80048f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e006      	b.n	80048fe <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RTC_WaitForSynchro+0x48>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ef      	beq.n	80048dc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40002800 	.word	0x40002800

0800490c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <RTC_EnterInitMode+0x64>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d120      	bne.n	8004966 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <RTC_EnterInitMode+0x64>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a11      	ldr	r2, [pc, #68]	; (8004970 <RTC_EnterInitMode+0x64>)
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004930:	f7fc fb6c 	bl	800100c <HAL_GetTick>
 8004934:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004936:	e00d      	b.n	8004954 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004938:	f7fc fb68 	bl	800100c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004946:	d905      	bls.n	8004954 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2203      	movs	r2, #3
 8004950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <RTC_EnterInitMode+0x64>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <RTC_EnterInitMode+0x5a>
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d1e8      	bne.n	8004938 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40002800 	.word	0x40002800

08004974 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <RTC_ExitInitMode+0x78>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <RTC_ExitInitMode+0x78>)
 8004986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <RTC_ExitInitMode+0x78>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10c      	bne.n	80049b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff91 	bl	80048c0 <HAL_RTC_WaitForSynchro>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01e      	beq.n	80049e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e017      	b.n	80049e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <RTC_ExitInitMode+0x78>)
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	4a0d      	ldr	r2, [pc, #52]	; (80049ec <RTC_ExitInitMode+0x78>)
 80049b8:	f023 0320 	bic.w	r3, r3, #32
 80049bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ff7e 	bl	80048c0 <HAL_RTC_WaitForSynchro>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2203      	movs	r2, #3
 80049ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <RTC_ExitInitMode+0x78>)
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <RTC_ExitInitMode+0x78>)
 80049dc:	f043 0320 	orr.w	r3, r3, #32
 80049e0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40002800 	.word	0x40002800

080049f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004a02:	e005      	b.n	8004a10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	3b0a      	subs	r3, #10
 8004a0e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d8f6      	bhi.n	8004a04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b2db      	uxtb	r3, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_RTCEx_EnableBypassShadow+0x16>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e01f      	b.n	8004a86 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a56:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004a58:	22ca      	movs	r2, #202	; 0xca
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004a5e:	2253      	movs	r2, #83	; 0x53
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40002800 	.word	0x40002800

08004a94 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_RTCEx_SetSSRU_IT+0x16>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e027      	b.n	8004afa <HAL_RTCEx_SetSSRU_IT+0x66>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004abc:	22ca      	movs	r2, #202	; 0xca
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ac2:	2253      	movs	r2, #83	; 0x53
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad8:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ade:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	40002800 	.word	0x40002800
 8004b08:	58000800 	.word	0x58000800

08004b0c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fc84 	bl	8001434 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40002800 	.word	0x40002800

08004b40 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
	...

08004b54 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_RTCEx_BKUPWrite+0x2c>)
 8004b62:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	4000b100 	.word	0x4000b100

08004b84 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <HAL_RTCEx_BKUPRead+0x28>)
 8004b90:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	4000b100 	.word	0x4000b100

08004bb0 <LL_PWR_SetRadioBusyTrigger>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc0:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	58000400 	.word	0x58000400

08004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	58000400 	.word	0x58000400

08004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004c04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	58000400 	.word	0x58000400

08004c18 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004c1c:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c22:	619a      	str	r2, [r3, #24]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	58000400 	.word	0x58000400

08004c30 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d101      	bne.n	8004c44 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	58000400 	.word	0x58000400

08004c54 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d101      	bne.n	8004c68 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	58000400 	.word	0x58000400

08004c78 <LL_RCC_RF_DisableReset>:
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <LL_RCC_IsRFUnderReset>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cac:	d101      	bne.n	8004cb2 <LL_RCC_IsRFUnderReset+0x1a>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <LL_RCC_IsRFUnderReset+0x1c>
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <LL_EXTI_EnableIT_32_63>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <LL_EXTI_EnableIT_32_63+0x24>)
 8004cc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004cca:	4905      	ldr	r1, [pc, #20]	; (8004ce0 <LL_EXTI_EnableIT_32_63+0x24>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	58000800 	.word	0x58000800

08004ce4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
    return status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	e04b      	b.n	8004d92 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	799b      	ldrb	r3, [r3, #6]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc f868 	bl	8000de4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004d1a:	f7ff ffad 	bl	8004c78 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <HAL_SUBGHZ_Init+0xb8>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	0cdb      	lsrs	r3, r3, #19
 8004d2c:	2264      	movs	r2, #100	; 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	609a      	str	r2, [r3, #8]
      break;
 8004d44:	e007      	b.n	8004d56 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004d4c:	f7ff ffa4 	bl	8004c98 <LL_RCC_IsRFUnderReset>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ee      	bne.n	8004d34 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d56:	f7ff ff3f 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004d5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d5e:	f7ff ffad 	bl	8004cbc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004d62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d66:	f7ff ff23 	bl	8004bb0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004d6a:	f7ff ff55 	bl	8004c18 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 faad 	bl	80052d8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	719a      	strb	r2, [r3, #6]

  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000001c 	.word	0x2000001c

08004da0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	461a      	mov	r2, r3
 8004dac:	460b      	mov	r3, r1
 8004dae:	817b      	strh	r3, [r7, #10]
 8004db0:	4613      	mov	r3, r2
 8004db2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	799b      	ldrb	r3, [r3, #6]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d14a      	bne.n	8004e54 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	795b      	ldrb	r3, [r3, #5]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e045      	b.n	8004e56 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fb4c 	bl	8005474 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ddc:	f7ff ff0c 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004de0:	210d      	movs	r1, #13
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fa98 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004de8:	897b      	ldrh	r3, [r7, #10]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fa90 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004df8:	897b      	ldrh	r3, [r7, #10]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fa8a 	bl	8005318 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	82bb      	strh	r3, [r7, #20]
 8004e08:	e00a      	b.n	8004e20 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004e0a:	8abb      	ldrh	r3, [r7, #20]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fa7f 	bl	8005318 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004e1a:	8abb      	ldrh	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	82bb      	strh	r3, [r7, #20]
 8004e20:	8aba      	ldrh	r2, [r7, #20]
 8004e22:	893b      	ldrh	r3, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d3f0      	bcc.n	8004e0a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004e28:	f7ff fed6 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fb39 	bl	80054a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
 8004e3e:	e001      	b.n	8004e44 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	715a      	strb	r2, [r3, #5]

    return status;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	e000      	b.n	8004e56 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	817b      	strh	r3, [r7, #10]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	799b      	ldrb	r3, [r3, #6]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d14a      	bne.n	8004f16 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	795b      	ldrb	r3, [r3, #5]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e045      	b.n	8004f18 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 faee 	bl	8005474 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004e98:	f7ff feae 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004e9c:	211d      	movs	r1, #29
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fa3a 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004ea4:	897b      	ldrh	r3, [r7, #10]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fa32 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4619      	mov	r1, r3
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa2c 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa28 	bl	8005318 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	82fb      	strh	r3, [r7, #22]
 8004ecc:	e009      	b.n	8004ee2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fa77 	bl	80053c4 <SUBGHZSPI_Receive>
      pData++;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004edc:	8afb      	ldrh	r3, [r7, #22]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	82fb      	strh	r3, [r7, #22]
 8004ee2:	8afa      	ldrh	r2, [r7, #22]
 8004ee4:	893b      	ldrh	r3, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3f1      	bcc.n	8004ece <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004eea:	f7ff fe75 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fad8 	bl	80054a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e001      	b.n	8004f06 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	715a      	strb	r2, [r3, #5]

    return status;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
 8004f14:	e000      	b.n	8004f18 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	72fb      	strb	r3, [r7, #11]
 8004f30:	4613      	mov	r3, r2
 8004f32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	799b      	ldrb	r3, [r3, #6]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d14a      	bne.n	8004fd4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	795b      	ldrb	r3, [r3, #5]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e045      	b.n	8004fd6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fa8f 	bl	8005474 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	2b84      	cmp	r3, #132	; 0x84
 8004f5a:	d002      	beq.n	8004f62 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004f5c:	7afb      	ldrb	r3, [r7, #11]
 8004f5e:	2b94      	cmp	r3, #148	; 0x94
 8004f60:	d103      	bne.n	8004f6a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	711a      	strb	r2, [r3, #4]
 8004f68:	e002      	b.n	8004f70 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004f70:	f7ff fe42 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	4619      	mov	r1, r3
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f9cd 	bl	8005318 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	82bb      	strh	r3, [r7, #20]
 8004f82:	e00a      	b.n	8004f9a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004f84:	8abb      	ldrh	r3, [r7, #20]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f9c2 	bl	8005318 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f94:	8abb      	ldrh	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	82bb      	strh	r3, [r7, #20]
 8004f9a:	8aba      	ldrh	r2, [r7, #20]
 8004f9c:	893b      	ldrh	r3, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d3f0      	bcc.n	8004f84 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004fa2:	f7ff fe19 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
 8004fa8:	2b84      	cmp	r3, #132	; 0x84
 8004faa:	d002      	beq.n	8004fb2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fa79 	bl	80054a4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	75fb      	strb	r3, [r7, #23]
 8004fbe:	e001      	b.n	8004fc4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	715a      	strb	r2, [r3, #5]

    return status;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	e000      	b.n	8004fd6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b088      	sub	sp, #32
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	460b      	mov	r3, r1
 8004fec:	72fb      	strb	r3, [r7, #11]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	799b      	ldrb	r3, [r3, #6]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d13d      	bne.n	800507c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	795b      	ldrb	r3, [r3, #5]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005008:	2302      	movs	r3, #2
 800500a:	e038      	b.n	800507e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa2e 	bl	8005474 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005018:	f7ff fdee 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800501c:	7afb      	ldrb	r3, [r7, #11]
 800501e:	4619      	mov	r1, r3
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f979 	bl	8005318 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005026:	2100      	movs	r1, #0
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f975 	bl	8005318 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	82fb      	strh	r3, [r7, #22]
 8005032:	e009      	b.n	8005048 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005034:	69b9      	ldr	r1, [r7, #24]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f9c4 	bl	80053c4 <SUBGHZSPI_Receive>
      pData++;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	3301      	adds	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005042:	8afb      	ldrh	r3, [r7, #22]
 8005044:	3301      	adds	r3, #1
 8005046:	82fb      	strh	r3, [r7, #22]
 8005048:	8afa      	ldrh	r2, [r7, #22]
 800504a:	893b      	ldrh	r3, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d3f1      	bcc.n	8005034 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005050:	f7ff fdc2 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fa25 	bl	80054a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77fb      	strb	r3, [r7, #31]
 8005066:	e001      	b.n	800506c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	715a      	strb	r2, [r3, #5]

    return status;
 8005078:	7ffb      	ldrb	r3, [r7, #31]
 800507a:	e000      	b.n	800507e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	461a      	mov	r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	72fb      	strb	r3, [r7, #11]
 8005096:	4613      	mov	r3, r2
 8005098:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	799b      	ldrb	r3, [r3, #6]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d13e      	bne.n	8005122 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	795b      	ldrb	r3, [r3, #5]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e039      	b.n	8005124 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f9dc 	bl	8005474 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80050bc:	f7ff fd9c 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80050c0:	210e      	movs	r1, #14
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f928 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	4619      	mov	r1, r3
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f923 	bl	8005318 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	82bb      	strh	r3, [r7, #20]
 80050d6:	e00a      	b.n	80050ee <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80050d8:	8abb      	ldrh	r3, [r7, #20]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f918 	bl	8005318 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80050e8:	8abb      	ldrh	r3, [r7, #20]
 80050ea:	3301      	adds	r3, #1
 80050ec:	82bb      	strh	r3, [r7, #20]
 80050ee:	8aba      	ldrh	r2, [r7, #20]
 80050f0:	893b      	ldrh	r3, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3f0      	bcc.n	80050d8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80050f6:	f7ff fd6f 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f9d2 	bl	80054a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e001      	b.n	8005112 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	715a      	strb	r2, [r3, #5]

    return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	e000      	b.n	8005124 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	461a      	mov	r2, r3
 8005138:	460b      	mov	r3, r1
 800513a:	72fb      	strb	r3, [r7, #11]
 800513c:	4613      	mov	r3, r2
 800513e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	799b      	ldrb	r3, [r3, #6]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d141      	bne.n	80051d2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	795b      	ldrb	r3, [r3, #5]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005156:	2302      	movs	r3, #2
 8005158:	e03c      	b.n	80051d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f987 	bl	8005474 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005166:	f7ff fd47 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800516a:	211e      	movs	r1, #30
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f8d3 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005172:	7afb      	ldrb	r3, [r7, #11]
 8005174:	4619      	mov	r1, r3
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f8ce 	bl	8005318 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800517c:	2100      	movs	r1, #0
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8ca 	bl	8005318 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	82fb      	strh	r3, [r7, #22]
 8005188:	e009      	b.n	800519e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f919 	bl	80053c4 <SUBGHZSPI_Receive>
      pData++;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3301      	adds	r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005198:	8afb      	ldrh	r3, [r7, #22]
 800519a:	3301      	adds	r3, #1
 800519c:	82fb      	strh	r3, [r7, #22]
 800519e:	8afa      	ldrh	r2, [r7, #22]
 80051a0:	893b      	ldrh	r3, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3f1      	bcc.n	800518a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80051a6:	f7ff fd17 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f97a 	bl	80054a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e001      	b.n	80051c2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	715a      	strb	r2, [r3, #5]

    return status;
 80051ce:	7ffb      	ldrb	r3, [r7, #31]
 80051d0:	e000      	b.n	80051d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80051e4:	2300      	movs	r3, #0
 80051e6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80051e8:	f107 020c 	add.w	r2, r7, #12
 80051ec:	2302      	movs	r3, #2
 80051ee:	2112      	movs	r1, #18
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff fef4 	bl	8004fde <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80051f6:	7b3b      	ldrb	r3, [r7, #12]
 80051f8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80051fa:	89fb      	ldrh	r3, [r7, #14]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	b21a      	sxth	r2, r3
 8005200:	7b7b      	ldrb	r3, [r7, #13]
 8005202:	b21b      	sxth	r3, r3
 8005204:	4313      	orrs	r3, r2
 8005206:	b21b      	sxth	r3, r3
 8005208:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800520a:	89fb      	ldrh	r3, [r7, #14]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f004 fcc5 	bl	8009ba4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f004 fcca 	bl	8009bc0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f004 fd19 	bl	8009c70 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800523e:	89fb      	ldrh	r3, [r7, #14]
 8005240:	08db      	lsrs	r3, r3, #3
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f004 fd1e 	bl	8009c8c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f004 fd23 	bl	8009ca8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005262:	89fb      	ldrh	r3, [r7, #14]
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f004 fcf0 	bl	8009c54 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005274:	89fb      	ldrh	r3, [r7, #14]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f004 fcab 	bl	8009bdc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	09db      	lsrs	r3, r3, #7
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800529e:	2101      	movs	r1, #1
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f004 fca9 	bl	8009bf8 <HAL_SUBGHZ_CADStatusCallback>
 80052a6:	e003      	b.n	80052b0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80052a8:	2100      	movs	r1, #0
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f004 fca4 	bl	8009bf8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80052b0:	89fb      	ldrh	r3, [r7, #14]
 80052b2:	0a5b      	lsrs	r3, r3, #9
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f004 fcb9 	bl	8009c34 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80052c2:	f107 020c 	add.w	r2, r7, #12
 80052c6:	2302      	movs	r3, #2
 80052c8:	2102      	movs	r1, #2
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fe28 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <SUBGHZSPI_Init+0x3c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <SUBGHZSPI_Init+0x3c>)
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80052ec:	4a09      	ldr	r2, [pc, #36]	; (8005314 <SUBGHZSPI_Init+0x3c>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80052f4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <SUBGHZSPI_Init+0x3c>)
 80052f8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80052fc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <SUBGHZSPI_Init+0x3c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a04      	ldr	r2, [pc, #16]	; (8005314 <SUBGHZSPI_Init+0x3c>)
 8005304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005308:	6013      	str	r3, [r2, #0]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	58010000 	.word	0x58010000

08005318 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <SUBGHZSPI_Transmit+0xa0>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	0cdb      	lsrs	r3, r3, #19
 8005336:	2264      	movs	r2, #100	; 0x64
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	609a      	str	r2, [r3, #8]
      break;
 800534e:	e008      	b.n	8005362 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3b01      	subs	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <SUBGHZSPI_Transmit+0xa4>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b02      	cmp	r3, #2
 8005360:	d1ed      	bne.n	800533e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <SUBGHZSPI_Transmit+0xa8>)
 8005364:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <SUBGHZSPI_Transmit+0xa0>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	0cdb      	lsrs	r3, r3, #19
 800537a:	2264      	movs	r2, #100	; 0x64
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	609a      	str	r2, [r3, #8]
      break;
 8005392:	e008      	b.n	80053a6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3b01      	subs	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <SUBGHZSPI_Transmit+0xa4>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d1ed      	bne.n	8005382 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <SUBGHZSPI_Transmit+0xa4>)
 80053a8:	68db      	ldr	r3, [r3, #12]

  return status;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000001c 	.word	0x2000001c
 80053bc:	58010000 	.word	0x58010000
 80053c0:	5801000c 	.word	0x5801000c

080053c4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <SUBGHZSPI_Receive+0xa4>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	0cdb      	lsrs	r3, r3, #19
 80053e0:	2264      	movs	r2, #100	; 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	609a      	str	r2, [r3, #8]
      break;
 80053f8:	e008      	b.n	800540c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <SUBGHZSPI_Receive+0xa8>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d1ed      	bne.n	80053e8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800540c:	4b18      	ldr	r3, [pc, #96]	; (8005470 <SUBGHZSPI_Receive+0xac>)
 800540e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	22ff      	movs	r2, #255	; 0xff
 8005414:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <SUBGHZSPI_Receive+0xa4>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	0cdb      	lsrs	r3, r3, #19
 8005424:	2264      	movs	r2, #100	; 0x64
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d105      	bne.n	800543e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	609a      	str	r2, [r3, #8]
      break;
 800543c:	e008      	b.n	8005450 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b01      	subs	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <SUBGHZSPI_Receive+0xa8>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d1ed      	bne.n	800542c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <SUBGHZSPI_Receive+0xa8>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	701a      	strb	r2, [r3, #0]

  return status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	2000001c 	.word	0x2000001c
 800546c:	58010000 	.word	0x58010000
 8005470:	5801000c 	.word	0x5801000c

08005474 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	791b      	ldrb	r3, [r3, #4]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d106      	bne.n	8005492 <SUBGHZ_CheckDeviceReady+0x1e>
  {
    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005484:	f7ff fbb8 	bl	8004bf8 <LL_PWR_SelectSUBGHZSPI_NSS>

    HAL_Delay(1);
 8005488:	2001      	movs	r0, #1
 800548a:	f7fb fdc6 	bl	800101a <HAL_Delay>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800548e:	f7ff fba3 	bl	8004bd8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f806 	bl	80054a4 <SUBGHZ_WaitOnBusy>
 8005498:	4603      	mov	r3, r0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <SUBGHZ_WaitOnBusy+0x58>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	0d1b      	lsrs	r3, r3, #20
 80054be:	2264      	movs	r2, #100	; 0x64
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80054c6:	f7ff fbc5 	bl	8004c54 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80054ca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e009      	b.n	80054f2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80054e4:	f7ff fba4 	bl	8004c30 <LL_PWR_IsActiveFlag_RFBUSYS>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d0e9      	beq.n	80054c6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	2000001c 	.word	0x2000001c

08005500 <LL_RCC_GetUSARTClockSource>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	401a      	ands	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	4313      	orrs	r3, r2
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <LL_RCC_GetLPUARTClockSource>:
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005530:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4013      	ands	r3, r2
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e042      	b.n	80055da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc f8ae 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fb2d 	bl	8005be4 <UART_SetConfig>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e022      	b.n	80055da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fd71 	bl	8006084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fdf7 	bl	80061c6 <UART_CheckIdleState>
 80055d8:	4603      	mov	r3, r0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	4613      	mov	r3, r2
 80055ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d11d      	bne.n	8005636 <HAL_UART_Receive_IT+0x54>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_UART_Receive_IT+0x24>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e016      	b.n	8005638 <HAL_UART_Receive_IT+0x56>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_UART_Receive_IT+0x36>
 8005614:	2302      	movs	r3, #2
 8005616:	e00f      	b.n	8005638 <HAL_UART_Receive_IT+0x56>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	461a      	mov	r2, r3
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fe95 	bl	800635c <UART_Start_Receive_IT>
 8005632:	4603      	mov	r3, r0
 8005634:	e000      	b.n	8005638 <HAL_UART_Receive_IT+0x56>
  }
  else
  {
    return HAL_BUSY;
 8005636:	2302      	movs	r3, #2
  }
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	4613      	mov	r3, r2
 800564c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005654:	2b20      	cmp	r3, #32
 8005656:	d168      	bne.n	800572a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_UART_Transmit_DMA+0x24>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e061      	b.n	800572c <HAL_UART_Transmit_DMA+0xec>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_UART_Transmit_DMA+0x36>
 8005672:	2302      	movs	r3, #2
 8005674:	e05a      	b.n	800572c <HAL_UART_Transmit_DMA+0xec>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2221      	movs	r2, #33	; 0x21
 80056a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d02c      	beq.n	8005706 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b0:	4a20      	ldr	r2, [pc, #128]	; (8005734 <HAL_UART_Transmit_DMA+0xf4>)
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_UART_Transmit_DMA+0xf8>)
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c0:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_UART_Transmit_DMA+0xfc>)
 80056c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c8:	2200      	movs	r2, #0
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	4619      	mov	r1, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3328      	adds	r3, #40	; 0x28
 80056dc:	461a      	mov	r2, r3
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	f7fc fd68 	bl	80021b4 <HAL_DMA_Start_IT>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2210      	movs	r2, #16
 80056ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e012      	b.n	800572c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2240      	movs	r2, #64	; 0x40
 800570c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005724:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
  }
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	08006571 	.word	0x08006571
 8005738:	080065c5 	.word	0x080065c5
 800573c:	080065e1 	.word	0x080065e1

08005740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	f640 030f 	movw	r3, #2063	; 0x80f
 8005766:	4013      	ands	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d118      	bne.n	80057a2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d013      	beq.n	80057a2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 81fb 	beq.w	8005b8e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
      }
      return;
 80057a0:	e1f5      	b.n	8005b8e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80ef 	beq.w	8005988 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4b73      	ldr	r3, [pc, #460]	; (800597c <HAL_UART_IRQHandler+0x23c>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4b72      	ldr	r3, [pc, #456]	; (8005980 <HAL_UART_IRQHandler+0x240>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80e4 	beq.w	8005988 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <HAL_UART_IRQHandler+0xac>
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e2:	f043 0201 	orr.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_UART_IRQHandler+0xd8>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2202      	movs	r2, #2
 8005806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580e:	f043 0204 	orr.w	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d010      	beq.n	8005844 <HAL_UART_IRQHandler+0x104>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2204      	movs	r2, #4
 8005832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583a:	f043 0202 	orr.w	r2, r3, #2
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4b48      	ldr	r3, [pc, #288]	; (800597c <HAL_UART_IRQHandler+0x23c>)
 800585c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2208      	movs	r2, #8
 8005868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005870:	f043 0208 	orr.w	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <HAL_UART_IRQHandler+0x168>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 816f 	beq.w	8005b92 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d011      	beq.n	80058e2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d004      	beq.n	8005902 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d031      	beq.n	8005966 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fe03 	bl	800650e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d123      	bne.n	800595e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005924:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d013      	beq.n	8005956 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	4a14      	ldr	r2, [pc, #80]	; (8005984 <HAL_UART_IRQHandler+0x244>)
 8005934:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc fd16 	bl	800236c <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00f      	b.n	8005976 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f92f 	bl	8005bba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e00b      	b.n	8005976 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f92b 	bl	8005bba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e007      	b.n	8005976 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f927 	bl	8005bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005974:	e10d      	b.n	8005b92 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005976:	bf00      	nop
    return;
 8005978:	e10b      	b.n	8005b92 <HAL_UART_IRQHandler+0x452>
 800597a:	bf00      	nop
 800597c:	10000001 	.word	0x10000001
 8005980:	04000120 	.word	0x04000120
 8005984:	08006661 	.word	0x08006661

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598c:	2b01      	cmp	r3, #1
 800598e:	f040 80ab 	bne.w	8005ae8 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a5 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 809f 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2210      	movs	r2, #16
 80059b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d155      	bne.n	8005a6c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80059ca:	893b      	ldrh	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80e2 	beq.w	8005b96 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059d8:	893a      	ldrh	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	f080 80db 	bcs.w	8005b96 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	893a      	ldrh	r2, [r7, #8]
 80059e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d12b      	bne.n	8005a50 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a06:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a26:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0210 	bic.w	r2, r2, #16
 8005a44:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fc30 	bl	80022b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8b1 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a6a:	e094      	b.n	8005b96 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8087 	beq.w	8005b9a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005a8c:	897b      	ldrh	r3, [r7, #10]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8083 	beq.w	8005b9a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0210 	bic.w	r2, r2, #16
 8005ada:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005adc:	897b      	ldrh	r3, [r7, #10]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f873 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ae6:	e058      	b.n	8005b9a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <HAL_UART_IRQHandler+0x3ce>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 f8b6 	bl	8006c78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b0c:	e048      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d012      	beq.n	8005b3e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d034      	beq.n	8005b9e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
    }
    return;
 8005b3c:	e02f      	b.n	8005b9e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_UART_IRQHandler+0x41a>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fd9a 	bl	800668c <UART_EndTransmit_IT>
    return;
 8005b58:	e022      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_UART_IRQHandler+0x436>
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 f894 	bl	8006c9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b74:	e014      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x460>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da0c      	bge.n	8005ba0 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 f87f 	bl	8006c8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b8c:	e008      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
      return;
 8005b8e:	bf00      	nop
 8005b90:	e006      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
    return;
 8005b92:	bf00      	nop
 8005b94:	e004      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
      return;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
      return;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_UART_IRQHandler+0x460>
    return;
 8005b9e:	bf00      	nop
  }
}
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop

08005ba8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
	...

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4bab      	ldr	r3, [pc, #684]	; (8005ebc <UART_SetConfig+0x2d8>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	69f9      	ldr	r1, [r7, #28]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4aa0      	ldr	r2, [pc, #640]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	f023 010f 	bic.w	r1, r3, #15
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a91      	ldr	r2, [pc, #580]	; (8005ec4 <UART_SetConfig+0x2e0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d122      	bne.n	8005cca <UART_SetConfig+0xe6>
 8005c84:	2003      	movs	r0, #3
 8005c86:	f7ff fc3b 	bl	8005500 <LL_RCC_GetUSARTClockSource>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d817      	bhi.n	8005cc4 <UART_SetConfig+0xe0>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0xb8>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cb9 	.word	0x08005cb9
 8005ca4:	08005cb3 	.word	0x08005cb3
 8005ca8:	08005cbf 	.word	0x08005cbf
 8005cac:	2301      	movs	r3, #1
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e072      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e06f      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e06c      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e069      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e066      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7e      	ldr	r2, [pc, #504]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d134      	bne.n	8005d3e <UART_SetConfig+0x15a>
 8005cd4:	200c      	movs	r0, #12
 8005cd6:	f7ff fc13 	bl	8005500 <LL_RCC_GetUSARTClockSource>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d829      	bhi.n	8005d38 <UART_SetConfig+0x154>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <UART_SetConfig+0x108>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d39 	.word	0x08005d39
 8005cf8:	08005d39 	.word	0x08005d39
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d39 	.word	0x08005d39
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d39 	.word	0x08005d39
 8005d0c:	08005d27 	.word	0x08005d27
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d33 	.word	0x08005d33
 8005d20:	2300      	movs	r3, #0
 8005d22:	76fb      	strb	r3, [r7, #27]
 8005d24:	e038      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d26:	2302      	movs	r3, #2
 8005d28:	76fb      	strb	r3, [r7, #27]
 8005d2a:	e035      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	76fb      	strb	r3, [r7, #27]
 8005d30:	e032      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d32:	2308      	movs	r3, #8
 8005d34:	76fb      	strb	r3, [r7, #27]
 8005d36:	e02f      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	76fb      	strb	r3, [r7, #27]
 8005d3c:	e02c      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5f      	ldr	r2, [pc, #380]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d125      	bne.n	8005d94 <UART_SetConfig+0x1b0>
 8005d48:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005d4c:	f7ff fbea 	bl	8005524 <LL_RCC_GetLPUARTClockSource>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d56:	d017      	beq.n	8005d88 <UART_SetConfig+0x1a4>
 8005d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d5c:	d817      	bhi.n	8005d8e <UART_SetConfig+0x1aa>
 8005d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d62:	d00b      	beq.n	8005d7c <UART_SetConfig+0x198>
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d68:	d811      	bhi.n	8005d8e <UART_SetConfig+0x1aa>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <UART_SetConfig+0x192>
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d72:	d006      	beq.n	8005d82 <UART_SetConfig+0x19e>
 8005d74:	e00b      	b.n	8005d8e <UART_SetConfig+0x1aa>
 8005d76:	2300      	movs	r3, #0
 8005d78:	76fb      	strb	r3, [r7, #27]
 8005d7a:	e00d      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	76fb      	strb	r3, [r7, #27]
 8005d80:	e00a      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d82:	2304      	movs	r3, #4
 8005d84:	76fb      	strb	r3, [r7, #27]
 8005d86:	e007      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	e004      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d8e:	2310      	movs	r3, #16
 8005d90:	76fb      	strb	r3, [r7, #27]
 8005d92:	e001      	b.n	8005d98 <UART_SetConfig+0x1b4>
 8005d94:	2310      	movs	r3, #16
 8005d96:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a48      	ldr	r2, [pc, #288]	; (8005ec0 <UART_SetConfig+0x2dc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f040 8098 	bne.w	8005ed4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005da4:	7efb      	ldrb	r3, [r7, #27]
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d823      	bhi.n	8005df2 <UART_SetConfig+0x20e>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x1cc>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005de3 	.word	0x08005de3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005df3 	.word	0x08005df3
 8005dcc:	08005df3 	.word	0x08005df3
 8005dd0:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f7fe f894 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	6178      	str	r0, [r7, #20]
        break;
 8005dda:	e00f      	b.n	8005dfc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <UART_SetConfig+0x2e8>)
 8005dde:	617b      	str	r3, [r7, #20]
        break;
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fd ffd9 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8005de6:	6178      	str	r0, [r7, #20]
        break;
 8005de8:	e008      	b.n	8005dfc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	617b      	str	r3, [r7, #20]
        break;
 8005df0:	e004      	b.n	8005dfc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	76bb      	strb	r3, [r7, #26]
        break;
 8005dfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8128 	beq.w	8006054 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	4a31      	ldr	r2, [pc, #196]	; (8005ed0 <UART_SetConfig+0x2ec>)
 8005e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d305      	bcc.n	8005e34 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d902      	bls.n	8005e3a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	76bb      	strb	r3, [r7, #26]
 8005e38:	e10c      	b.n	8006054 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f04f 0100 	mov.w	r1, #0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <UART_SetConfig+0x2ec>)
 8005e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	f7fa f999 	bl	8000188 <__aeabi_uldivmod>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	020b      	lsls	r3, r1, #8
 8005e68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e6c:	0202      	lsls	r2, r0, #8
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	6849      	ldr	r1, [r1, #4]
 8005e72:	0849      	lsrs	r1, r1, #1
 8005e74:	4608      	mov	r0, r1
 8005e76:	f04f 0100 	mov.w	r1, #0
 8005e7a:	1814      	adds	r4, r2, r0
 8005e7c:	eb43 0501 	adc.w	r5, r3, r1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa f97b 	bl	8000188 <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4613      	mov	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ea0:	d308      	bcc.n	8005eb4 <UART_SetConfig+0x2d0>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea8:	d204      	bcs.n	8005eb4 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	e0cf      	b.n	8006054 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	76bb      	strb	r3, [r7, #26]
 8005eb8:	e0cc      	b.n	8006054 <UART_SetConfig+0x470>
 8005eba:	bf00      	nop
 8005ebc:	cfff69f3 	.word	0xcfff69f3
 8005ec0:	40008000 	.word	0x40008000
 8005ec4:	40013800 	.word	0x40013800
 8005ec8:	40004400 	.word	0x40004400
 8005ecc:	00f42400 	.word	0x00f42400
 8005ed0:	0800b3fc 	.word	0x0800b3fc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d165      	bne.n	8005faa <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8005ede:	7efb      	ldrb	r3, [r7, #27]
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d828      	bhi.n	8005f36 <UART_SetConfig+0x352>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x308>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fd fff6 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8005f14:	6178      	str	r0, [r7, #20]
        break;
 8005f16:	e013      	b.n	8005f40 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fe f804 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	6178      	str	r0, [r7, #20]
        break;
 8005f1e:	e00f      	b.n	8005f40 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b56      	ldr	r3, [pc, #344]	; (800607c <UART_SetConfig+0x498>)
 8005f22:	617b      	str	r3, [r7, #20]
        break;
 8005f24:	e00c      	b.n	8005f40 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fd ff37 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8005f2a:	6178      	str	r0, [r7, #20]
        break;
 8005f2c:	e008      	b.n	8005f40 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	617b      	str	r3, [r7, #20]
        break;
 8005f34:	e004      	b.n	8005f40 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	76bb      	strb	r3, [r7, #26]
        break;
 8005f3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8086 	beq.w	8006054 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	4a4c      	ldr	r2, [pc, #304]	; (8006080 <UART_SetConfig+0x49c>)
 8005f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f52:	461a      	mov	r2, r3
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5a:	005a      	lsls	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	441a      	add	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d916      	bls.n	8005fa4 <UART_SetConfig+0x3c0>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d212      	bcs.n	8005fa4 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f023 030f 	bic.w	r3, r3, #15
 8005f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	89fa      	ldrh	r2, [r7, #14]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	e057      	b.n	8006054 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	76bb      	strb	r3, [r7, #26]
 8005fa8:	e054      	b.n	8006054 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005faa:	7efb      	ldrb	r3, [r7, #27]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d828      	bhi.n	8006002 <UART_SetConfig+0x41e>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x3d4>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08006003 	.word	0x08006003
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f7fd ff90 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8005fe0:	6178      	str	r0, [r7, #20]
        break;
 8005fe2:	e013      	b.n	800600c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fd ff9e 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 8005fe8:	6178      	str	r0, [r7, #20]
        break;
 8005fea:	e00f      	b.n	800600c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b23      	ldr	r3, [pc, #140]	; (800607c <UART_SetConfig+0x498>)
 8005fee:	617b      	str	r3, [r7, #20]
        break;
 8005ff0:	e00c      	b.n	800600c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fd fed1 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8005ff6:	6178      	str	r0, [r7, #20]
        break;
 8005ff8:	e008      	b.n	800600c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	617b      	str	r3, [r7, #20]
        break;
 8006000:	e004      	b.n	800600c <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	76bb      	strb	r3, [r7, #26]
        break;
 800600a:	bf00      	nop
    }

    if (pclk != 0U)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <UART_SetConfig+0x49c>)
 8006018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601c:	461a      	mov	r2, r3
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	fbb3 f2f2 	udiv	r2, r3, r2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	441a      	add	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	fbb2 f3f3 	udiv	r3, r2, r3
 8006034:	b29b      	uxth	r3, r3
 8006036:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b0f      	cmp	r3, #15
 800603c:	d908      	bls.n	8006050 <UART_SetConfig+0x46c>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d204      	bcs.n	8006050 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e001      	b.n	8006054 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006070:	7ebb      	ldrb	r3, [r7, #26]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bdb0      	pop	{r4, r5, r7, pc}
 800607a:	bf00      	nop
 800607c:	00f42400 	.word	0x00f42400
 8006080:	0800b3fc 	.word	0x0800b3fc

08006084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	f003 0310 	and.w	r3, r3, #16
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01a      	beq.n	800619a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006182:	d10a      	bne.n	800619a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b086      	sub	sp, #24
 80061ca:	af02      	add	r7, sp, #8
 80061cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061d6:	f7fa ff19 	bl	800100c <HAL_GetTick>
 80061da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d10e      	bne.n	8006208 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f82f 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e025      	b.n	8006254 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b04      	cmp	r3, #4
 8006214:	d10e      	bne.n	8006234 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f819 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e00f      	b.n	8006254 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	e062      	b.n	8006334 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d05e      	beq.n	8006334 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fa fec9 	bl	800100c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <UART_WaitOnFlagUntilTimeout+0x30>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d11d      	bne.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800629a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e045      	b.n	8006354 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d02e      	beq.n	8006334 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e4:	d126      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e00f      	b.n	8006354 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4013      	ands	r3, r2
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	bf0c      	ite	eq
 8006344:	2301      	moveq	r3, #1
 8006346:	2300      	movne	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	429a      	cmp	r2, r3
 8006350:	d08d      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d10e      	bne.n	80063ae <UART_Start_Receive_IT+0x52>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <UART_Start_Receive_IT+0x48>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800639e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063a2:	e02d      	b.n	8006400 <UART_Start_Receive_IT+0xa4>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	22ff      	movs	r2, #255	; 0xff
 80063a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ac:	e028      	b.n	8006400 <UART_Start_Receive_IT+0xa4>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <UART_Start_Receive_IT+0x76>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <UART_Start_Receive_IT+0x6c>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	22ff      	movs	r2, #255	; 0xff
 80063c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063c6:	e01b      	b.n	8006400 <UART_Start_Receive_IT+0xa4>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	227f      	movs	r2, #127	; 0x7f
 80063cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063d0:	e016      	b.n	8006400 <UART_Start_Receive_IT+0xa4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d10d      	bne.n	80063f8 <UART_Start_Receive_IT+0x9c>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <UART_Start_Receive_IT+0x92>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	227f      	movs	r2, #127	; 0x7f
 80063e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ec:	e008      	b.n	8006400 <UART_Start_Receive_IT+0xa4>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	223f      	movs	r2, #63	; 0x3f
 80063f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063f6:	e003      	b.n	8006400 <UART_Start_Receive_IT+0xa4>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2222      	movs	r2, #34	; 0x22
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006428:	d12a      	bne.n	8006480 <UART_Start_Receive_IT+0x124>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	429a      	cmp	r2, r3
 8006434:	d324      	bcc.n	8006480 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643e:	d107      	bne.n	8006450 <UART_Start_Receive_IT+0xf4>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d103      	bne.n	8006450 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <UART_Start_Receive_IT+0x168>)
 800644c:	671a      	str	r2, [r3, #112]	; 0x70
 800644e:	e002      	b.n	8006456 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a1d      	ldr	r2, [pc, #116]	; (80064c8 <UART_Start_Receive_IT+0x16c>)
 8006454:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	e01b      	b.n	80064b8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d107      	bne.n	800649a <UART_Start_Receive_IT+0x13e>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <UART_Start_Receive_IT+0x170>)
 8006496:	671a      	str	r2, [r3, #112]	; 0x70
 8006498:	e002      	b.n	80064a0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <UART_Start_Receive_IT+0x174>)
 800649e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80064b6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	08006a75 	.word	0x08006a75
 80064c8:	08006871 	.word	0x08006871
 80064cc:	08006799 	.word	0x08006799
 80064d0:	080066c1 	.word	0x080066c1

080064d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80064fa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr

0800650e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006524:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0210 	bic.w	r2, r2, #16
 8006550:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d114      	bne.n	80065b6 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065b4:	e002      	b.n	80065bc <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7fb f9f8 	bl	80019ac <HAL_UART_TxCpltCallback>
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fae8 	bl	8005ba8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006608:	2b80      	cmp	r3, #128	; 0x80
 800660a:	d109      	bne.n	8006620 <UART_DMAError+0x40>
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b21      	cmp	r3, #33	; 0x21
 8006610:	d106      	bne.n	8006620 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800661a:	6978      	ldr	r0, [r7, #20]
 800661c:	f7ff ff5a 	bl	80064d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d109      	bne.n	8006642 <UART_DMAError+0x62>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b22      	cmp	r3, #34	; 0x22
 8006632:	d106      	bne.n	8006642 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2200      	movs	r2, #0
 8006638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800663c:	6978      	ldr	r0, [r7, #20]
 800663e:	f7ff ff66 	bl	800650e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	f043 0210 	orr.w	r2, r3, #16
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006652:	6978      	ldr	r0, [r7, #20]
 8006654:	f7ff fab1 	bl	8005bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006658:	bf00      	nop
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff fa9b 	bl	8005bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb f97a 	bl	80019ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	2b22      	cmp	r3, #34	; 0x22
 80066d8:	d152      	bne.n	8006780 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066e2:	89bb      	ldrh	r3, [r7, #12]
 80066e4:	b2d9      	uxtb	r1, r3
 80066e6:	89fb      	ldrh	r3, [r7, #14]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	400a      	ands	r2, r1
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d139      	bne.n	8006790 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800672a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674e:	2b01      	cmp	r3, #1
 8006750:	d10f      	bne.n	8006772 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0210 	bic.w	r2, r2, #16
 8006760:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fa2e 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 8006770:	e002      	b.n	8006778 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fb f928 	bl	80019c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800677e:	e007      	b.n	8006790 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	619a      	str	r2, [r3, #24]
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	2b22      	cmp	r3, #34	; 0x22
 80067b0:	d152      	bne.n	8006858 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067be:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80067c0:	89ba      	ldrh	r2, [r7, #12]
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	4013      	ands	r3, r2
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	1c9a      	adds	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d139      	bne.n	8006868 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006802:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10f      	bne.n	800684a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0210 	bic.w	r2, r2, #16
 8006838:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff f9c2 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 8006848:	e002      	b.n	8006850 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fb f8bc 	bl	80019c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006856:	e007      	b.n	8006868 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	619a      	str	r2, [r3, #24]
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800687e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	2b22      	cmp	r3, #34	; 0x22
 80068a0:	f040 80da 	bne.w	8006a58 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068aa:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068ac:	e0aa      	b.n	8006a04 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068b6:	89bb      	ldrh	r3, [r7, #12]
 80068b8:	b2d9      	uxtb	r1, r3
 80068ba:	8b7b      	ldrh	r3, [r7, #26]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	400a      	ands	r2, r1
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04d      	beq.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d010      	beq.n	8006922 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2201      	movs	r2, #1
 8006910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006918:	f043 0201 	orr.w	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <UART_RxISR_8BIT_FIFOEN+0xde>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2202      	movs	r2, #2
 800693c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006944:	f043 0204 	orr.w	r2, r3, #4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2204      	movs	r2, #4
 8006968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006970:	f043 0202 	orr.w	r2, r3, #2
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff f918 	bl	8005bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d132      	bne.n	8006a04 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10f      	bne.n	80069f8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0210 	bic.w	r2, r2, #16
 80069e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f8eb 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 80069f6:	e002      	b.n	80069fe <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fa ffe5 	bl	80019c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f47f af4c 	bne.w	80068ae <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a1c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d021      	beq.n	8006a68 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a2a:	897a      	ldrh	r2, [r7, #10]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d21b      	bcs.n	8006a68 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a3e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a0b      	ldr	r2, [pc, #44]	; (8006a70 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006a44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0220 	orr.w	r2, r2, #32
 8006a54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a56:	e007      	b.n	8006a68 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0208 	orr.w	r2, r2, #8
 8006a66:	619a      	str	r2, [r3, #24]
}
 8006a68:	bf00      	nop
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	080066c1 	.word	0x080066c1

08006a74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	; 0x28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a82:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa2:	2b22      	cmp	r3, #34	; 0x22
 8006aa4:	f040 80da 	bne.w	8006c5c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aae:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ab0:	e0aa      	b.n	8006c08 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006abe:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ac0:	8aba      	ldrh	r2, [r7, #20]
 8006ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad0:	1c9a      	adds	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d04d      	beq.n	8006b96 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d010      	beq.n	8006b26 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2201      	movs	r2, #1
 8006b14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1c:	f043 0201 	orr.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d010      	beq.n	8006b52 <UART_RxISR_16BIT_FIFOEN+0xde>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b48:	f043 0204 	orr.w	r2, r3, #4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d010      	beq.n	8006b7e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b74:	f043 0202 	orr.w	r2, r3, #2
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff f816 	bl	8005bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d132      	bne.n	8006c08 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d10f      	bne.n	8006bfc <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0210 	bic.w	r2, r2, #16
 8006bea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fe ffe9 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 8006bfa:	e002      	b.n	8006c02 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fa fee3 	bl	80019c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c08:	8afb      	ldrh	r3, [r7, #22]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f47f af4c 	bne.w	8006ab2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c20:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c22:	89fb      	ldrh	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d021      	beq.n	8006c6c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c2e:	89fa      	ldrh	r2, [r7, #14]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d21b      	bcs.n	8006c6c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c42:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a0b      	ldr	r2, [pc, #44]	; (8006c74 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006c48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0220 	orr.w	r2, r2, #32
 8006c58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c5a:	e007      	b.n	8006c6c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0208 	orr.w	r2, r2, #8
 8006c6a:	619a      	str	r2, [r3, #24]
}
 8006c6c:	bf00      	nop
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	08006799 	.word	0x08006799

08006c78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bc80      	pop	{r7}
 8006cac:	4770      	bx	lr

08006cae <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b088      	sub	sp, #32
 8006cb2:	af02      	add	r7, sp, #8
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e046      	b.n	8006d5c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2224      	movs	r2, #36	; 0x24
 8006cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006d08:	1d3b      	adds	r3, r7, #4
 8006d0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f900 	bl	8006f14 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d24:	f7fa f972 	bl	800100c <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fa8f 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	75fb      	strb	r3, [r7, #23]
 8006d48:	e003      	b.n	8006d52 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_UARTEx_EnableStopMode+0x16>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e010      	b.n	8006d9c <HAL_UARTEx_EnableStopMode+0x38>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0202 	orr.w	r2, r2, #2
 8006d90:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UARTEx_EnableFifoMode+0x16>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e02b      	b.n	8006e14 <HAL_UARTEx_EnableFifoMode+0x6e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006df2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f8ab 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e02d      	b.n	8006e90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f871 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e02d      	b.n	8006f0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2224      	movs	r2, #36	; 0x24
 8006ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f833 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	1d3b      	adds	r3, r7, #4
 8006f1e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f023 0210 	bic.w	r2, r3, #16
 8006f2c:	893b      	ldrh	r3, [r7, #8]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8006f42:	7abb      	ldrb	r3, [r7, #10]
 8006f44:	061a      	lsls	r2, r3, #24
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr

08006f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b089      	sub	sp, #36	; 0x24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006f60:	4a2e      	ldr	r2, [pc, #184]	; (800701c <UARTEx_SetNbDataToProcess+0xc4>)
 8006f62:	f107 0314 	add.w	r3, r7, #20
 8006f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f6a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006f6e:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <UARTEx_SetNbDataToProcess+0xc8>)
 8006f70:	f107 030c 	add.w	r3, r7, #12
 8006f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f78:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d108      	bne.n	8006f96 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f94:	e03d      	b.n	8007012 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f96:	2308      	movs	r3, #8
 8006f98:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	0e5b      	lsrs	r3, r3, #25
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0f5b      	lsrs	r3, r3, #29
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fbe:	7fbb      	ldrb	r3, [r7, #30]
 8006fc0:	7f3a      	ldrb	r2, [r7, #28]
 8006fc2:	f107 0120 	add.w	r1, r7, #32
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fd0:	7f3a      	ldrb	r2, [r7, #28]
 8006fd2:	f107 0120 	add.w	r1, r7, #32
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	7f7a      	ldrb	r2, [r7, #29]
 8006fec:	f107 0120 	add.w	r1, r7, #32
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ffa:	7f7a      	ldrb	r2, [r7, #29]
 8006ffc:	f107 0120 	add.w	r1, r7, #32
 8007000:	440a      	add	r2, r1
 8007002:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007006:	fb93 f3f2 	sdiv	r3, r3, r2
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007012:	bf00      	nop
 8007014:	3724      	adds	r7, #36	; 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr
 800701c:	0800b260 	.word	0x0800b260
 8007020:	0800b268 	.word	0x0800b268

08007024 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	619a      	str	r2, [r3, #24]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <RadioSetRxGenericConfig>:
 */
TimerEvent_t TxTimeoutTimer;
TimerEvent_t RxTimeoutTimer;
/* Exported functions ---------------------------------------------------------*/
static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
    int32_t status=0;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
    uint8_t syncword[8]={0};
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    uint8_t MaxPayloadLength;
    if( rxContinuous != 0 )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <RadioSetRxGenericConfig+0x26>
    {
        symbTimeout = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = (rxContinuous==0)? false :true;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2da      	uxtb	r2, r3
 800708a:	4bb3      	ldr	r3, [pc, #716]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800708c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <RadioSetRxGenericConfig+0x44>
 8007094:	2b01      	cmp	r3, #1
 8007096:	f000 80aa 	beq.w	80071ee <RadioSetRxGenericConfig+0x196>

            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;
            break;
        default:
            break;
 800709a:	e158      	b.n	800734e <RadioSetRxGenericConfig+0x2f6>
            if ((config->fsk.BitRate== 0) || (config->fsk.PreambleLen== 0))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <RadioSetRxGenericConfig+0x54>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <RadioSetRxGenericConfig+0x5a>
                return -1;
 80070ac:	f04f 33ff 	mov.w	r3, #4294967295
 80070b0:	e14e      	b.n	8007350 <RadioSetRxGenericConfig+0x2f8>
            if ( config->fsk.SyncWordLength>8)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	7d5b      	ldrb	r3, [r3, #21]
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d902      	bls.n	80070c0 <RadioSetRxGenericConfig+0x68>
                return -1;
 80070ba:	f04f 33ff 	mov.w	r3, #4294967295
 80070be:	e147      	b.n	8007350 <RadioSetRxGenericConfig+0x2f8>
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 80070c0:	2300      	movs	r3, #0
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	e00d      	b.n	80070e2 <RadioSetRxGenericConfig+0x8a>
                    syncword[i]=config->fsk.SyncWord[i];
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	4413      	add	r3, r2
 80070ce:	7819      	ldrb	r1, [r3, #0]
 80070d0:	f107 0214 	add.w	r2, r7, #20
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	4413      	add	r3, r2
 80070d8:	460a      	mov	r2, r1
 80070da:	701a      	strb	r2, [r3, #0]
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	3301      	adds	r3, #1
 80070e0:	623b      	str	r3, [r7, #32]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	7d5b      	ldrb	r3, [r3, #21]
 80070e6:	461a      	mov	r2, r3
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	4293      	cmp	r3, r2
 80070ec:	dbeb      	blt.n	80070c6 <RadioSetRxGenericConfig+0x6e>
            if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <RadioSetRxGenericConfig+0xaa>
                MaxPayloadLength = config->fsk.MaxPayloadLength;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007100:	e002      	b.n	8007108 <RadioSetRxGenericConfig+0xb0>
                MaxPayloadLength = 0xFF;
 8007102:	23ff      	movs	r3, #255	; 0xff
 8007104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            SUBGRF_SetStopRxTimerOnPreambleDetect( (config->fsk.StopTimerOnPreambleDetect==0)? false:true );
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fffc 	bl	8009114 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800711c:	4b8e      	ldr	r3, [pc, #568]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	4a8b      	ldr	r2, [pc, #556]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800712a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	791a      	ldrb	r2, [r3, #4]
 8007130:	4b89      	ldr	r3, [pc, #548]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue(config->fsk.Bandwidth);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fa78 	bl	8007630 <RadioGetFskBandwidthRegValue>
 8007140:	4603      	mov	r3, r0
 8007142:	461a      	mov	r2, r3
 8007144:	4b84      	ldr	r3, [pc, #528]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800714a:	4b83      	ldr	r3, [pc, #524]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800714c:	2200      	movs	r2, #0
 800714e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen) << 3 ; // convert byte into bit
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	b29b      	uxth	r3, r3
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	b29a      	uxth	r2, r3
 800715a:	4b7f      	ldr	r3, [pc, #508]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800715c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = (RadioPreambleDetection_t) config->fsk.PreambleMinDetect;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	7d1a      	ldrb	r2, [r3, #20]
 8007162:	4b7d      	ldr	r3, [pc, #500]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007164:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = (config->fsk.SyncWordLength) << 3; // convert byte into bit
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	7d5b      	ldrb	r3, [r3, #21]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b7a      	ldr	r3, [pc, #488]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007170:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = (RadioAddressComp_t)config->fsk.AddrComp;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007178:	4b77      	ldr	r3, [pc, #476]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800717a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = (RadioPacketLengthModes_t) config->fsk.LengthMode;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007182:	4b75      	ldr	r3, [pc, #468]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007184:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007186:	4a74      	ldr	r2, [pc, #464]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718c:	7593      	strb	r3, [r2, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) config->fsk.CrcLength;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007194:	4b70      	ldr	r3, [pc, #448]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007196:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = (RadioDcFree_t) config->fsk.Whitening;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800719e:	4b6e      	ldr	r3, [pc, #440]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80071a0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80071a2:	f001 f916 	bl	80083d2 <RadioStandby>
            RadioSetModem(  MODEM_FSK );
 80071a6:	2000      	movs	r0, #0
 80071a8:	f000 fad8 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80071ac:	486b      	ldr	r0, [pc, #428]	; (800735c <RadioSetRxGenericConfig+0x304>)
 80071ae:	f002 f9f7 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80071b2:	486b      	ldr	r0, [pc, #428]	; (8007360 <RadioSetRxGenericConfig+0x308>)
 80071b4:	f002 fac2 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( syncword );
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	4618      	mov	r0, r3
 80071be:	f001 fdcc 	bl	8008d5a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	8c1b      	ldrh	r3, [r3, #32]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fe16 	bl	8008df8 <SUBGRF_SetWhiteningSeed>
            SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fdf1 	bl	8008db8 <SUBGRF_SetCrcPolynomial>
            SubgRf.RxTimeout = ( uint32_t )( (symbTimeout * 1000* 8 )/config->fsk.BitRate );
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80071dc:	fb02 f203 	mul.w	r2, r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e8:	4a5b      	ldr	r2, [pc, #364]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80071ea:	6093      	str	r3, [r2, #8]
            break;
 80071ec:	e0af      	b.n	800734e <RadioSetRxGenericConfig+0x2f6>
            if  (config->lora.PreambleLen== 0)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <RadioSetRxGenericConfig+0x1a4>
                return -1;
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	e0a9      	b.n	8007350 <RadioSetRxGenericConfig+0x2f8>
            if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007202:	2b01      	cmp	r3, #1
 8007204:	d104      	bne.n	8007210 <RadioSetRxGenericConfig+0x1b8>
                MaxPayloadLength = config->fsk.MaxPayloadLength;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800720e:	e002      	b.n	8007216 <RadioSetRxGenericConfig+0x1be>
                MaxPayloadLength = 0xFF;
 8007210:	23ff      	movs	r3, #255	; 0xff
 8007212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            SUBGRF_SetStopRxTimerOnPreambleDetect(  (config->lora.StopTimerOnPreambleDetect==0)? false:true  );
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	2b00      	cmp	r3, #0
 800721c:	bf14      	ite	ne
 800721e:	2301      	movne	r3, #1
 8007220:	2300      	moveq	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	4618      	mov	r0, r3
 8007226:	f001 ff75 	bl	8009114 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	4618      	mov	r0, r3
 8007230:	f001 ff82 	bl	8009138 <SUBGRF_SetLoRaSymbNumTimeout>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007234:	4b48      	ldr	r3, [pc, #288]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t) config->lora.SpreadingFactor;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007242:	4b45      	ldr	r3, [pc, #276]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = (RadioLoRaBandwidths_t) config->lora.Bandwidth;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800724e:	4b42      	ldr	r3, [pc, #264]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t) config->lora.Coderate;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800725a:	4b3f      	ldr	r3, [pc, #252]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800725c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            switch (config->lora.LowDatarateOptimize)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007266:	2b02      	cmp	r3, #2
 8007268:	d010      	beq.n	800728c <RadioSetRxGenericConfig+0x234>
 800726a:	2b02      	cmp	r3, #2
 800726c:	dc22      	bgt.n	80072b4 <RadioSetRxGenericConfig+0x25c>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <RadioSetRxGenericConfig+0x220>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d005      	beq.n	8007282 <RadioSetRxGenericConfig+0x22a>
                break;
 8007276:	e01d      	b.n	80072b4 <RadioSetRxGenericConfig+0x25c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007278:	4b37      	ldr	r3, [pc, #220]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 8007280:	e019      	b.n	80072b6 <RadioSetRxGenericConfig+0x25e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007282:	4b35      	ldr	r3, [pc, #212]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 800728a:	e014      	b.n	80072b6 <RadioSetRxGenericConfig+0x25e>
                if ((config->lora.SpreadingFactor==RADIO_LORA_SF11) || (config->lora.SpreadingFactor==RADIO_LORA_SF12))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007292:	2b0b      	cmp	r3, #11
 8007294:	d004      	beq.n	80072a0 <RadioSetRxGenericConfig+0x248>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800729c:	2b0c      	cmp	r3, #12
 800729e:	d104      	bne.n	80072aa <RadioSetRxGenericConfig+0x252>
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80072a0:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 80072a8:	e005      	b.n	80072b6 <RadioSetRxGenericConfig+0x25e>
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 80072b2:	e000      	b.n	80072b6 <RadioSetRxGenericConfig+0x25e>
                break;
 80072b4:	bf00      	nop
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80072b6:	4b28      	ldr	r3, [pc, #160]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80072c0:	4b25      	ldr	r3, [pc, #148]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072c2:	839a      	strh	r2, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t) config->lora.LengthMode;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80072ca:	4b23      	ldr	r3, [pc, #140]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072cc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80072ce:	4a22      	ldr	r2, [pc, #136]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d4:	77d3      	strb	r3, [r2, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80072dc:	4b1e      	ldr	r3, [pc, #120]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072de:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t) config->lora.IqInverted;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80072e8:	4b1b      	ldr	r3, [pc, #108]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 80072ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80072ee:	f001 f870 	bl	80083d2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80072f2:	2001      	movs	r0, #1
 80072f4:	f000 fa32 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80072f8:	4818      	ldr	r0, [pc, #96]	; (800735c <RadioSetRxGenericConfig+0x304>)
 80072fa:	f002 f951 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80072fe:	4818      	ldr	r0, [pc, #96]	; (8007360 <RadioSetRxGenericConfig+0x308>)
 8007300:	f002 fa1c 	bl	800973c <SUBGRF_SetPacketParams>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007304:	4b14      	ldr	r3, [pc, #80]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800730a:	2b01      	cmp	r3, #1
 800730c:	d10d      	bne.n	800732a <RadioSetRxGenericConfig+0x2d2>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800730e:	f240 7036 	movw	r0, #1846	; 0x736
 8007312:	f002 fb7b 	bl	8009a0c <SUBGRF_ReadRegister>
 8007316:	4603      	mov	r3, r0
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4619      	mov	r1, r3
 8007320:	f240 7036 	movw	r0, #1846	; 0x736
 8007324:	f002 fb5e 	bl	80099e4 <SUBGRF_WriteRegister>
 8007328:	e00c      	b.n	8007344 <RadioSetRxGenericConfig+0x2ec>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800732a:	f240 7036 	movw	r0, #1846	; 0x736
 800732e:	f002 fb6d 	bl	8009a0c <SUBGRF_ReadRegister>
 8007332:	4603      	mov	r3, r0
 8007334:	f043 0304 	orr.w	r3, r3, #4
 8007338:	b2db      	uxtb	r3, r3
 800733a:	4619      	mov	r1, r3
 800733c:	f240 7036 	movw	r0, #1846	; 0x736
 8007340:	f002 fb50 	bl	80099e4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <RadioSetRxGenericConfig+0x300>)
 8007346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800734a:	609a      	str	r2, [r3, #8]
            break;
 800734c:	bf00      	nop
    }
    return status;
 800734e:	69fb      	ldr	r3, [r7, #28]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3728      	adds	r7, #40	; 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200006f4 	.word	0x200006f4
 800735c:	2000072c 	.word	0x2000072c
 8007360:	20000702 	.word	0x20000702

08007364 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
 8007372:	4613      	mov	r3, r2
 8007374:	73bb      	strb	r3, [r7, #14]
  uint8_t syncword[8]={0};
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
    switch( modem )
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b02      	cmp	r3, #2
 8007382:	f000 811c 	beq.w	80075be <RadioSetTxGenericConfig+0x25a>
 8007386:	2b02      	cmp	r3, #2
 8007388:	f300 8138 	bgt.w	80075fc <RadioSetTxGenericConfig+0x298>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <RadioSetTxGenericConfig+0x34>
 8007390:	2b01      	cmp	r3, #1
 8007392:	f000 8083 	beq.w	800749c <RadioSetTxGenericConfig+0x138>
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = config->bpsk.BitRate;
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
        default:
            break;
 8007396:	e131      	b.n	80075fc <RadioSetTxGenericConfig+0x298>
            if ((config->fsk.BitRate== 0) || (config->fsk.PreambleLen== 0))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <RadioSetTxGenericConfig+0x44>
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <RadioSetTxGenericConfig+0x4a>
                return -1;
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ac:	e135      	b.n	800761a <RadioSetTxGenericConfig+0x2b6>
            if ( config->fsk.SyncWordLength>8)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	7d1b      	ldrb	r3, [r3, #20]
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	d902      	bls.n	80073bc <RadioSetTxGenericConfig+0x58>
                return -1;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	e12e      	b.n	800761a <RadioSetTxGenericConfig+0x2b6>
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e00d      	b.n	80073de <RadioSetTxGenericConfig+0x7a>
                    syncword[i]=config->fsk.SyncWord[i];
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	7819      	ldrb	r1, [r3, #0]
 80073cc:	f107 0214 	add.w	r2, r7, #20
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	460a      	mov	r2, r1
 80073d6:	701a      	strb	r2, [r3, #0]
                for(int i =0; i<config->fsk.SyncWordLength; i++)
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	3301      	adds	r3, #1
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	7d1b      	ldrb	r3, [r3, #20]
 80073e2:	461a      	mov	r2, r3
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	dbeb      	blt.n	80073c2 <RadioSetTxGenericConfig+0x5e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80073ea:	4b8e      	ldr	r3, [pc, #568]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	4a8b      	ldr	r2, [pc, #556]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80073f8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	4b89      	ldr	r3, [pc, #548]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f911 	bl	8007630 <RadioGetFskBandwidthRegValue>
 800740e:	4603      	mov	r3, r0
 8007410:	461a      	mov	r2, r3
 8007412:	4b84      	ldr	r3, [pc, #528]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4a81      	ldr	r2, [pc, #516]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800741e:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007420:	4b80      	ldr	r3, [pc, #512]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007422:	2200      	movs	r2, #0
 8007424:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen << 3 ); // convert byte into bit
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	b29b      	uxth	r3, r3
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	b29a      	uxth	r2, r3
 8007430:	4b7c      	ldr	r3, [pc, #496]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007432:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; //don't care in tx
 8007434:	4b7b      	ldr	r3, [pc, #492]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007436:	2204      	movs	r2, #4
 8007438:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = (config->fsk.SyncWordLength ) << 3 ; // convert byte into bit
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	7d1b      	ldrb	r3, [r3, #20]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4b78      	ldr	r3, [pc, #480]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007444:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; /*don't care in tx*/
 8007446:	4b77      	ldr	r3, [pc, #476]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007448:	2200      	movs	r2, #0
 800744a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = (RadioPacketLengthModes_t) config->fsk.HeaderType;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	7f9a      	ldrb	r2, [r3, #30]
 8007450:	4b74      	ldr	r3, [pc, #464]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007452:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) config->fsk.CrcLength;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	7fda      	ldrb	r2, [r3, #31]
 8007458:	4b72      	ldr	r3, [pc, #456]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800745a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = (RadioDcFree_t) config->fsk.Whitening;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007462:	4b70      	ldr	r3, [pc, #448]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007464:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007466:	f000 ffb4 	bl	80083d2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800746a:	2000      	movs	r0, #0
 800746c:	f000 f976 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007470:	486d      	ldr	r0, [pc, #436]	; (8007628 <RadioSetTxGenericConfig+0x2c4>)
 8007472:	f002 f895 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007476:	486d      	ldr	r0, [pc, #436]	; (800762c <RadioSetTxGenericConfig+0x2c8>)
 8007478:	f002 f960 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( syncword );
 800747c:	f107 0314 	add.w	r3, r7, #20
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fc6a 	bl	8008d5a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	8b9b      	ldrh	r3, [r3, #28]
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fcb4 	bl	8008df8 <SUBGRF_SetWhiteningSeed>
            SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	8c1b      	ldrh	r3, [r3, #32]
 8007494:	4618      	mov	r0, r3
 8007496:	f001 fc8f 	bl	8008db8 <SUBGRF_SetCrcPolynomial>
            break;
 800749a:	e0b0      	b.n	80075fe <RadioSetTxGenericConfig+0x29a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800749c:	4b61      	ldr	r3, [pc, #388]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80074aa:	4b5e      	ldr	r3, [pc, #376]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80074ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = (RadioLoRaBandwidths_t) config->lora.Bandwidth;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80074b6:	4b5b      	ldr	r3, [pc, #364]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80074b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t) config->lora.Coderate;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80074c2:	4b58      	ldr	r3, [pc, #352]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80074c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            switch (config->lora.LowDatarateOptimize)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d010      	beq.n	80074f4 <RadioSetTxGenericConfig+0x190>
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	dc22      	bgt.n	800751c <RadioSetTxGenericConfig+0x1b8>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <RadioSetTxGenericConfig+0x17c>
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d005      	beq.n	80074ea <RadioSetTxGenericConfig+0x186>
                break;
 80074de:	e01d      	b.n	800751c <RadioSetTxGenericConfig+0x1b8>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80074e0:	4b50      	ldr	r3, [pc, #320]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 80074e8:	e019      	b.n	800751e <RadioSetTxGenericConfig+0x1ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80074ea:	4b4e      	ldr	r3, [pc, #312]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 80074f2:	e014      	b.n	800751e <RadioSetTxGenericConfig+0x1ba>
                if ((config->lora.SpreadingFactor==RADIO_LORA_SF11) || (config->lora.SpreadingFactor==RADIO_LORA_SF12))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074fa:	2b0b      	cmp	r3, #11
 80074fc:	d004      	beq.n	8007508 <RadioSetTxGenericConfig+0x1a4>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d104      	bne.n	8007512 <RadioSetTxGenericConfig+0x1ae>
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007508:	4b46      	ldr	r3, [pc, #280]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 8007510:	e005      	b.n	800751e <RadioSetTxGenericConfig+0x1ba>
                  SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007512:	4b44      	ldr	r3, [pc, #272]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
                break;
 800751a:	e000      	b.n	800751e <RadioSetTxGenericConfig+0x1ba>
                break;
 800751c:	bf00      	nop
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = (config->lora.LowDatarateOptimize==0)?0:1;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007524:	2b00      	cmp	r3, #0
 8007526:	bf14      	ite	ne
 8007528:	2301      	movne	r3, #1
 800752a:	2300      	moveq	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	4b3c      	ldr	r3, [pc, #240]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007532:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007536:	4b3b      	ldr	r3, [pc, #236]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007538:	2201      	movs	r2, #1
 800753a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007540:	4b38      	ldr	r3, [pc, #224]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007542:	839a      	strh	r2, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = (RadioLoRaPacketLengthsMode_t) config->lora.LengthMode;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800754a:	4b36      	ldr	r3, [pc, #216]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800754c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.CrcMode = (RadioLoRaCrcModes_t) config->lora.CrcMode;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8007554:	4b33      	ldr	r3, [pc, #204]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007556:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = (RadioLoRaIQModes_t) config->lora.IqInverted;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007560:	4b30      	ldr	r3, [pc, #192]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007566:	f000 ff34 	bl	80083d2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800756a:	2001      	movs	r0, #1
 800756c:	f000 f8f6 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007570:	482d      	ldr	r0, [pc, #180]	; (8007628 <RadioSetTxGenericConfig+0x2c4>)
 8007572:	f002 f815 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007576:	482d      	ldr	r0, [pc, #180]	; (800762c <RadioSetTxGenericConfig+0x2c8>)
 8007578:	f002 f8e0 	bl	800973c <SUBGRF_SetPacketParams>
            if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800757c:	4b29      	ldr	r3, [pc, #164]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800757e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007582:	2b06      	cmp	r3, #6
 8007584:	d10d      	bne.n	80075a2 <RadioSetTxGenericConfig+0x23e>
                SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007586:	f640 0089 	movw	r0, #2185	; 0x889
 800758a:	f002 fa3f 	bl	8009a0c <SUBGRF_ReadRegister>
 800758e:	4603      	mov	r3, r0
 8007590:	f023 0304 	bic.w	r3, r3, #4
 8007594:	b2db      	uxtb	r3, r3
 8007596:	4619      	mov	r1, r3
 8007598:	f640 0089 	movw	r0, #2185	; 0x889
 800759c:	f002 fa22 	bl	80099e4 <SUBGRF_WriteRegister>
            break;
 80075a0:	e02d      	b.n	80075fe <RadioSetTxGenericConfig+0x29a>
                SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80075a2:	f640 0089 	movw	r0, #2185	; 0x889
 80075a6:	f002 fa31 	bl	8009a0c <SUBGRF_ReadRegister>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f043 0304 	orr.w	r3, r3, #4
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	4619      	mov	r1, r3
 80075b4:	f640 0089 	movw	r0, #2185	; 0x889
 80075b8:	f002 fa14 	bl	80099e4 <SUBGRF_WriteRegister>
            break;
 80075bc:	e01f      	b.n	80075fe <RadioSetTxGenericConfig+0x29a>
            if ((config->fsk.BitRate== 0) || (config->fsk.BitRate> 1000))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <RadioSetTxGenericConfig+0x26c>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ce:	d902      	bls.n	80075d6 <RadioSetTxGenericConfig+0x272>
                return -1;
 80075d0:	f04f 33ff 	mov.w	r3, #4294967295
 80075d4:	e021      	b.n	800761a <RadioSetTxGenericConfig+0x2b6>
            RadioSetModem( MODEM_BPSK );
 80075d6:	2002      	movs	r0, #2
 80075d8:	f000 f8c0 	bl	800775c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = config->bpsk.BitRate;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	4a0e      	ldr	r2, [pc, #56]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80075ea:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 80075ee:	2216      	movs	r2, #22
 80075f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075f4:	480c      	ldr	r0, [pc, #48]	; (8007628 <RadioSetTxGenericConfig+0x2c4>)
 80075f6:	f001 ffd3 	bl	80095a0 <SUBGRF_SetModulationParams>
            break;
 80075fa:	e000      	b.n	80075fe <RadioSetTxGenericConfig+0x29a>
            break;
 80075fc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80075fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007602:	4618      	mov	r0, r3
 8007604:	f002 fa92 	bl	8009b2c <SUBGRF_SetRfTxPower>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 800760e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    SubgRf.TxTimeout = timeout;
 8007612:	4a04      	ldr	r2, [pc, #16]	; (8007624 <RadioSetTxGenericConfig+0x2c0>)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6053      	str	r3, [r2, #4]
    return 0;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200006f4 	.word	0x200006f4
 8007628:	2000072c 	.word	0x2000072c
 800762c:	20000702 	.word	0x20000702

08007630 <RadioGetFskBandwidthRegValue>:

/* Private  functions ---------------------------------------------------------*/
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <RadioGetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800763e:	231f      	movs	r3, #31
 8007640:	e016      	b.n	8007670 <RadioGetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
 8007646:	e00f      	b.n	8007668 <RadioGetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	4a0c      	ldr	r2, [pc, #48]	; (800767c <RadioGetFskBandwidthRegValue+0x4c>)
 800764c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d205      	bcs.n	8007662 <RadioGetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	4a08      	ldr	r2, [pc, #32]	; (800767c <RadioGetFskBandwidthRegValue+0x4c>)
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	791b      	ldrb	r3, [r3, #4]
 8007660:	e006      	b.n	8007670 <RadioGetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	3301      	adds	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b15      	cmp	r3, #21
 800766c:	d9ec      	bls.n	8007648 <RadioGetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800766e:	e7fe      	b.n	800766e <RadioGetFskBandwidthRegValue+0x3e>
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	0800b490 	.word	0x0800b490

08007680 <RadioInit>:

static void RadioInit( RadioEvents_t *events )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af02      	add	r7, sp, #8
 8007686:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007688:	4a21      	ldr	r2, [pc, #132]	; (8007710 <RadioInit+0x90>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <RadioInit+0x94>)
 8007690:	2200      	movs	r2, #0
 8007692:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007694:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <RadioInit+0x94>)
 8007696:	2200      	movs	r2, #0
 8007698:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800769a:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <RadioInit+0x94>)
 800769c:	2200      	movs	r2, #0
 800769e:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80076a0:	481d      	ldr	r0, [pc, #116]	; (8007718 <RadioInit+0x98>)
 80076a2:	f001 fac5 	bl	8008c30 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80076a6:	2000      	movs	r0, #0
 80076a8:	f000 ffdc 	bl	8008664 <RadioSetPublicNetwork>

    SUBGRF_SetRegulatorMode(  );
 80076ac:	f001 fd76 	bl	800919c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80076b0:	2100      	movs	r1, #0
 80076b2:	2000      	movs	r0, #0
 80076b4:	f002 f8e2 	bl	800987c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80076b8:	2204      	movs	r2, #4
 80076ba:	2100      	movs	r1, #0
 80076bc:	2001      	movs	r0, #1
 80076be:	f001 ff07 	bl	80094d0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80076c2:	2300      	movs	r3, #0
 80076c4:	2200      	movs	r2, #0
 80076c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076ce:	f001 fe33 	bl	8009338 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80076d2:	f000 fe6b 	bl	80083ac <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80076d6:	2300      	movs	r3, #0
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <RadioInit+0x9c>)
 80076dc:	2200      	movs	r2, #0
 80076de:	f04f 31ff 	mov.w	r1, #4294967295
 80076e2:	480f      	ldr	r0, [pc, #60]	; (8007720 <RadioInit+0xa0>)
 80076e4:	f003 f85c 	bl	800a7a0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <RadioInit+0xa4>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	f04f 31ff 	mov.w	r1, #4294967295
 80076f4:	480c      	ldr	r0, [pc, #48]	; (8007728 <RadioInit+0xa8>)
 80076f6:	f003 f853 	bl	800a7a0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80076fa:	4809      	ldr	r0, [pc, #36]	; (8007720 <RadioInit+0xa0>)
 80076fc:	f003 f8f4 	bl	800a8e8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007700:	4809      	ldr	r0, [pc, #36]	; (8007728 <RadioInit+0xa8>)
 8007702:	f003 f8f1 	bl	800a8e8 <UTIL_TIMER_Stop>
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	200001a0 	.word	0x200001a0
 8007714:	200006f4 	.word	0x200006f4
 8007718:	08008749 	.word	0x08008749
 800771c:	080086d1 	.word	0x080086d1
 8007720:	2000074c 	.word	0x2000074c
 8007724:	0800870d 	.word	0x0800870d
 8007728:	20000764 	.word	0x20000764

0800772c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007730:	f001 fac4 	bl	8008cbc <SUBGRF_GetOperatingMode>
 8007734:	4603      	mov	r3, r0
 8007736:	2b07      	cmp	r3, #7
 8007738:	d00a      	beq.n	8007750 <RadioGetStatus+0x24>
 800773a:	2b07      	cmp	r3, #7
 800773c:	dc0a      	bgt.n	8007754 <RadioGetStatus+0x28>
 800773e:	2b04      	cmp	r3, #4
 8007740:	d002      	beq.n	8007748 <RadioGetStatus+0x1c>
 8007742:	2b05      	cmp	r3, #5
 8007744:	d002      	beq.n	800774c <RadioGetStatus+0x20>
 8007746:	e005      	b.n	8007754 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007748:	2302      	movs	r3, #2
 800774a:	e004      	b.n	8007756 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800774c:	2301      	movs	r3, #1
 800774e:	e002      	b.n	8007756 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007750:	2303      	movs	r3, #3
 8007752:	e000      	b.n	8007756 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007754:	2300      	movs	r3, #0
    }
}
 8007756:	4618      	mov	r0, r3
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007766:	4a19      	ldr	r2, [pc, #100]	; (80077cc <RadioSetModem+0x70>)
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	7013      	strb	r3, [r2, #0]
    switch( modem )
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	2b04      	cmp	r3, #4
 8007770:	d023      	beq.n	80077ba <RadioSetModem+0x5e>
 8007772:	2b04      	cmp	r3, #4
 8007774:	dc03      	bgt.n	800777e <RadioSetModem+0x22>
 8007776:	2b01      	cmp	r3, #1
 8007778:	d008      	beq.n	800778c <RadioSetModem+0x30>
 800777a:	2b03      	cmp	r3, #3
 800777c:	d019      	beq.n	80077b2 <RadioSetModem+0x56>
    {
        default:
        case MODEM_FSK:
            SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800777e:	2000      	movs	r0, #0
 8007780:	f001 fe7e 	bl	8009480 <SUBGRF_SetPacketType>
            // When switching to GFSK mode the LoRa SyncWord register value is reset
            // Thus, we also reset the RadioPublicNetwork variable
            SubgRf.PublicNetwork.Current = false;
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <RadioSetModem+0x70>)
 8007786:	2200      	movs	r2, #0
 8007788:	735a      	strb	r2, [r3, #13]
            break;
 800778a:	e01b      	b.n	80077c4 <RadioSetModem+0x68>
        case MODEM_LORA:
            SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800778c:	2001      	movs	r0, #1
 800778e:	f001 fe77 	bl	8009480 <SUBGRF_SetPacketType>
            // Public/Private network register is reset when switching modems
            if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007792:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <RadioSetModem+0x70>)
 8007794:	7b5a      	ldrb	r2, [r3, #13]
 8007796:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <RadioSetModem+0x70>)
 8007798:	7b1b      	ldrb	r3, [r3, #12]
 800779a:	429a      	cmp	r2, r3
 800779c:	d011      	beq.n	80077c2 <RadioSetModem+0x66>
            {
                SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <RadioSetModem+0x70>)
 80077a0:	7b1a      	ldrb	r2, [r3, #12]
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <RadioSetModem+0x70>)
 80077a4:	735a      	strb	r2, [r3, #13]
                RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <RadioSetModem+0x70>)
 80077a8:	7b5b      	ldrb	r3, [r3, #13]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 ff5a 	bl	8008664 <RadioSetPublicNetwork>
            }
            break;
 80077b0:	e007      	b.n	80077c2 <RadioSetModem+0x66>
        case MODEM_SIGFOX_TX:
            SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80077b2:	2002      	movs	r0, #2
 80077b4:	f001 fe64 	bl	8009480 <SUBGRF_SetPacketType>
            break;
 80077b8:	e004      	b.n	80077c4 <RadioSetModem+0x68>
        case MODEM_SIGFOX_RX:
            SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80077ba:	2000      	movs	r0, #0
 80077bc:	f001 fe60 	bl	8009480 <SUBGRF_SetPacketType>
            break;
 80077c0:	e000      	b.n	80077c4 <RadioSetModem+0x68>
            break;
 80077c2:	bf00      	nop
    }
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	200006f4 	.word	0x200006f4

080077d0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 fe0d 	bl	80093f8 <SUBGRF_SetRfFrequency>
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b090      	sub	sp, #64	; 0x40
 80077ea:	af0a      	add	r7, sp, #40	; 0x28
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	603b      	str	r3, [r7, #0]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8007802:	f000 fde6 	bl	80083d2 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8007806:	2000      	movs	r0, #0
 8007808:	f7ff ffa8 	bl	800775c <RadioSetModem>

    RadioSetChannel( freq );
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff ffdf 	bl	80077d0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007812:	2301      	movs	r3, #1
 8007814:	9309      	str	r3, [sp, #36]	; 0x24
 8007816:	2300      	movs	r3, #0
 8007818:	9308      	str	r3, [sp, #32]
 800781a:	2300      	movs	r3, #0
 800781c:	9307      	str	r3, [sp, #28]
 800781e:	2300      	movs	r3, #0
 8007820:	9306      	str	r3, [sp, #24]
 8007822:	2300      	movs	r3, #0
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	2300      	movs	r3, #0
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	2300      	movs	r3, #0
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	2300      	movs	r3, #0
 8007830:	9302      	str	r3, [sp, #8]
 8007832:	2303      	movs	r3, #3
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	2300      	movs	r3, #0
 800783c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	2000      	movs	r0, #0
 8007844:	f000 f840 	bl	80078c8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007848:	2000      	movs	r0, #0
 800784a:	f000 fdc9 	bl	80083e0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800784e:	f000 ff37 	bl	80086c0 <RadioGetWakeupTime>
 8007852:	4603      	mov	r3, r0
 8007854:	4618      	mov	r0, r3
 8007856:	f7f9 fbe0 	bl	800101a <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800785a:	f003 f95f 	bl	800ab1c <UTIL_TIMER_GetCurrentTime>
 800785e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007860:	e00d      	b.n	800787e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007862:	2000      	movs	r0, #0
 8007864:	f000 fe7c 	bl	8008560 <RadioRssi>
 8007868:	4603      	mov	r3, r0
 800786a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800786c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007874:	429a      	cmp	r2, r3
 8007876:	dd02      	ble.n	800787e <RadioIsChannelFree+0x98>
        {
            status = false;
 8007878:	2300      	movs	r3, #0
 800787a:	75fb      	strb	r3, [r7, #23]
            break;
 800787c:	e006      	b.n	800788c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800787e:	6938      	ldr	r0, [r7, #16]
 8007880:	f003 f95e 	bl	800ab40 <UTIL_TIMER_GetElapsedTime>
 8007884:	4602      	mov	r2, r0
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	4293      	cmp	r3, r2
 800788a:	d8ea      	bhi.n	8007862 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800788c:	f000 fda1 	bl	80083d2 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    /* Set LoRa modem ON */
    RadioSetModem( MODEM_LORA );
 80078a4:	2001      	movs	r0, #1
 80078a6:	f7ff ff59 	bl	800775c <RadioSetModem>

    /* Disable LoRa modem interrupts */
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80078aa:	2300      	movs	r3, #0
 80078ac:	2200      	movs	r2, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	2000      	movs	r0, #0
 80078b2:	f001 fd41 	bl	8009338 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80078b6:	f001 fad2 	bl	8008e5e <SUBGRF_GetRandom>
 80078ba:	6078      	str	r0, [r7, #4]

    return rnd;
 80078bc:	687b      	ldr	r3, [r7, #4]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	461a      	mov	r2, r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
 80078d8:	4613      	mov	r3, r2
 80078da:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80078dc:	4abc      	ldr	r2, [pc, #752]	; (8007bd0 <RadioSetRxConfig+0x308>)
 80078de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80078e2:	7053      	strb	r3, [r2, #1]
    if( rxContinuous == true )
 80078e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <RadioSetRxConfig+0x28>
    {
        symbTimeout = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80078f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <RadioSetRxConfig+0x3a>
    {
        MaxPayloadLength = payloadLen;
 80078f8:	4ab6      	ldr	r2, [pc, #728]	; (8007bd4 <RadioSetRxConfig+0x30c>)
 80078fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80078fe:	7013      	strb	r3, [r2, #0]
 8007900:	e002      	b.n	8007908 <RadioSetRxConfig+0x40>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007902:	4bb4      	ldr	r3, [pc, #720]	; (8007bd4 <RadioSetRxConfig+0x30c>)
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	2b04      	cmp	r3, #4
 800790c:	d009      	beq.n	8007922 <RadioSetRxConfig+0x5a>
 800790e:	2b04      	cmp	r3, #4
 8007910:	f300 81da 	bgt.w	8007cc8 <RadioSetRxConfig+0x400>
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80bf 	beq.w	8007a98 <RadioSetRxConfig+0x1d0>
 800791a:	2b01      	cmp	r3, #1
 800791c:	f000 812c 	beq.w	8007b78 <RadioSetRxConfig+0x2b0>
            /* Timeout Max, Timeout handled directly in SetRx function */
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007920:	e1d2      	b.n	8007cc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007922:	2001      	movs	r0, #1
 8007924:	f001 fbf6 	bl	8009114 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007928:	4ba9      	ldr	r3, [pc, #676]	; (8007bd0 <RadioSetRxConfig+0x308>)
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007930:	4aa7      	ldr	r2, [pc, #668]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007936:	4ba6      	ldr	r3, [pc, #664]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007938:	2209      	movs	r2, #9
 800793a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800793e:	4ba4      	ldr	r3, [pc, #656]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007940:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007944:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8007946:	68b8      	ldr	r0, [r7, #8]
 8007948:	f7ff fe72 	bl	8007630 <RadioGetFskBandwidthRegValue>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	4b9f      	ldr	r3, [pc, #636]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007956:	4b9e      	ldr	r3, [pc, #632]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007958:	2200      	movs	r2, #0
 800795a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800795c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	b29a      	uxth	r2, r3
 8007962:	4b9b      	ldr	r3, [pc, #620]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007964:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007966:	4b9a      	ldr	r3, [pc, #616]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007968:	2200      	movs	r2, #0
 800796a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800796c:	4b98      	ldr	r3, [pc, #608]	; (8007bd0 <RadioSetRxConfig+0x308>)
 800796e:	2210      	movs	r2, #16
 8007970:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007972:	4b97      	ldr	r3, [pc, #604]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007974:	2200      	movs	r2, #0
 8007976:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007978:	4b95      	ldr	r3, [pc, #596]	; (8007bd0 <RadioSetRxConfig+0x308>)
 800797a:	2200      	movs	r2, #0
 800797c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800797e:	4b95      	ldr	r3, [pc, #596]	; (8007bd4 <RadioSetRxConfig+0x30c>)
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	4b93      	ldr	r3, [pc, #588]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007984:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007986:	4b92      	ldr	r3, [pc, #584]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007988:	2201      	movs	r2, #1
 800798a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800798c:	4b90      	ldr	r3, [pc, #576]	; (8007bd0 <RadioSetRxConfig+0x308>)
 800798e:	2200      	movs	r2, #0
 8007990:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007992:	2004      	movs	r0, #4
 8007994:	f7ff fee2 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007998:	488f      	ldr	r0, [pc, #572]	; (8007bd8 <RadioSetRxConfig+0x310>)
 800799a:	f001 fe01 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800799e:	488f      	ldr	r0, [pc, #572]	; (8007bdc <RadioSetRxConfig+0x314>)
 80079a0:	f001 fecc 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80079a4:	4a8e      	ldr	r2, [pc, #568]	; (8007be0 <RadioSetRxConfig+0x318>)
 80079a6:	f107 031c 	add.w	r3, r7, #28
 80079aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80079b2:	f107 031c 	add.w	r3, r7, #28
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 f9cf 	bl	8008d5a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80079bc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079c0:	f001 fa1a 	bl	8008df8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80079c4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80079c8:	f000 fde9 	bl	800859e <RadioRead>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80079d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d6:	f023 0310 	bic.w	r3, r3, #16
 80079da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e2:	4619      	mov	r1, r3
 80079e4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80079e8:	f000 fdc7 	bl	800857a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80079ec:	2104      	movs	r1, #4
 80079ee:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80079f2:	f000 fdc2 	bl	800857a <RadioWrite>
            modReg= RadioRead(0x89b);
 80079f6:	f640 009b 	movw	r0, #2203	; 0x89b
 80079fa:	f000 fdd0 	bl	800859e <RadioRead>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a08:	f023 031c 	bic.w	r3, r3, #28
 8007a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8007a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a14:	f043 0308 	orr.w	r3, r3, #8
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f640 009b 	movw	r0, #2203	; 0x89b
 8007a20:	f000 fdab 	bl	800857a <RadioWrite>
            modReg= RadioRead(0x6d1);
 8007a24:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007a28:	f000 fdb9 	bl	800859e <RadioRead>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a36:	f023 0318 	bic.w	r3, r3, #24
 8007a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8007a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a42:	f043 0318 	orr.w	r3, r3, #24
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007a4e:	f000 fd94 	bl	800857a <RadioWrite>
            modReg= RadioRead(0x6ac);
 8007a52:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007a56:	f000 fda2 	bl	800859e <RadioRead>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	4619      	mov	r1, r3
 8007a78:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007a7c:	f000 fd7d 	bl	800857a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007a80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	4a4f      	ldr	r2, [pc, #316]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007a94:	6093      	str	r3, [r2, #8]
            break;
 8007a96:	e118      	b.n	8007cca <RadioSetRxConfig+0x402>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f001 fb3b 	bl	8009114 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007a9e:	4b4c      	ldr	r3, [pc, #304]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007aa6:	4a4a      	ldr	r2, [pc, #296]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007aac:	4b48      	ldr	r3, [pc, #288]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007aae:	220b      	movs	r2, #11
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8007ab4:	68b8      	ldr	r0, [r7, #8]
 8007ab6:	f7ff fdbb 	bl	8007630 <RadioGetFskBandwidthRegValue>
 8007aba:	4603      	mov	r3, r0
 8007abc:	461a      	mov	r2, r3
 8007abe:	4b44      	ldr	r3, [pc, #272]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007ac4:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007aca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007ad2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007ad4:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007ada:	4b3d      	ldr	r3, [pc, #244]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007adc:	2218      	movs	r2, #24
 8007ade:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007ae0:	4b3b      	ldr	r3, [pc, #236]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007ae6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007aea:	f083 0301 	eor.w	r3, r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	4b37      	ldr	r3, [pc, #220]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007af4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007af6:	4b37      	ldr	r3, [pc, #220]	; (8007bd4 <RadioSetRxConfig+0x30c>)
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007afc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007afe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <RadioSetRxConfig+0x246>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007b06:	4b32      	ldr	r3, [pc, #200]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b08:	22f2      	movs	r2, #242	; 0xf2
 8007b0a:	75da      	strb	r2, [r3, #23]
 8007b0c:	e002      	b.n	8007b14 <RadioSetRxConfig+0x24c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007b0e:	4b30      	ldr	r3, [pc, #192]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007b14:	4b2e      	ldr	r3, [pc, #184]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007b1a:	f000 fc5a 	bl	80083d2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007b1e:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fe14 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b34:	4828      	ldr	r0, [pc, #160]	; (8007bd8 <RadioSetRxConfig+0x310>)
 8007b36:	f001 fd33 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b3a:	4828      	ldr	r0, [pc, #160]	; (8007bdc <RadioSetRxConfig+0x314>)
 8007b3c:	f001 fdfe 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007b40:	4a28      	ldr	r2, [pc, #160]	; (8007be4 <RadioSetRxConfig+0x31c>)
 8007b42:	f107 0314 	add.w	r3, r7, #20
 8007b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 f901 	bl	8008d5a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007b58:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b5c:	f001 f94c 	bl	8008df8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007b60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b72:	4a17      	ldr	r2, [pc, #92]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b74:	6093      	str	r3, [r2, #8]
            break;
 8007b76:	e0a8      	b.n	8007cca <RadioSetRxConfig+0x402>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f001 facb 	bl	8009114 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007b90:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <RadioSetRxConfig+0x320>)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4413      	add	r3, r2
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007b9e:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <RadioSetRxConfig+0x2f0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b0b      	cmp	r3, #11
 8007bb0:	d008      	beq.n	8007bc4 <RadioSetRxConfig+0x2fc>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	d005      	beq.n	8007bc4 <RadioSetRxConfig+0x2fc>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d116      	bne.n	8007bec <RadioSetRxConfig+0x324>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b0c      	cmp	r3, #12
 8007bc2:	d113      	bne.n	8007bec <RadioSetRxConfig+0x324>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <RadioSetRxConfig+0x308>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007bcc:	e012      	b.n	8007bf4 <RadioSetRxConfig+0x32c>
 8007bce:	bf00      	nop
 8007bd0:	200006f4 	.word	0x200006f4
 8007bd4:	20000025 	.word	0x20000025
 8007bd8:	2000072c 	.word	0x2000072c
 8007bdc:	20000702 	.word	0x20000702
 8007be0:	0800b270 	.word	0x0800b270
 8007be4:	0800b278 	.word	0x0800b278
 8007be8:	0800b540 	.word	0x0800b540
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007bec:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007bf4:	4b37      	ldr	r3, [pc, #220]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007bfa:	4b36      	ldr	r3, [pc, #216]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c00:	2b05      	cmp	r3, #5
 8007c02:	d004      	beq.n	8007c0e <RadioSetRxConfig+0x346>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007c04:	4b33      	ldr	r3, [pc, #204]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007c0a:	2b06      	cmp	r3, #6
 8007c0c:	d10a      	bne.n	8007c24 <RadioSetRxConfig+0x35c>
                if( preambleLen < 12 )
 8007c0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c10:	2b0b      	cmp	r3, #11
 8007c12:	d803      	bhi.n	8007c1c <RadioSetRxConfig+0x354>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007c14:	4b2f      	ldr	r3, [pc, #188]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c16:	220c      	movs	r2, #12
 8007c18:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007c1a:	e006      	b.n	8007c2a <RadioSetRxConfig+0x362>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c1c:	4a2d      	ldr	r2, [pc, #180]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c20:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007c22:	e002      	b.n	8007c2a <RadioSetRxConfig+0x362>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c24:	4a2b      	ldr	r2, [pc, #172]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c28:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007c2a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007c2e:	4b29      	ldr	r3, [pc, #164]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c30:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007c32:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <RadioSetRxConfig+0x410>)
 8007c34:	781a      	ldrb	r2, [r3, #0]
 8007c36:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c38:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007c3a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007c3e:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c40:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007c44:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007c48:	4b22      	ldr	r3, [pc, #136]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007c4e:	f000 fbc0 	bl	80083d2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007c52:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bf14      	ite	ne
 8007c5c:	2301      	movne	r3, #1
 8007c5e:	2300      	moveq	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fd7a 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c68:	481c      	ldr	r0, [pc, #112]	; (8007cdc <RadioSetRxConfig+0x414>)
 8007c6a:	f001 fc99 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c6e:	481c      	ldr	r0, [pc, #112]	; (8007ce0 <RadioSetRxConfig+0x418>)
 8007c70:	f001 fd64 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007c74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fa5d 	bl	8009138 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007c7e:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007c80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d10d      	bne.n	8007ca4 <RadioSetRxConfig+0x3dc>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8007c88:	f240 7036 	movw	r0, #1846	; 0x736
 8007c8c:	f001 febe 	bl	8009a0c <SUBGRF_ReadRegister>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f023 0304 	bic.w	r3, r3, #4
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f240 7036 	movw	r0, #1846	; 0x736
 8007c9e:	f001 fea1 	bl	80099e4 <SUBGRF_WriteRegister>
 8007ca2:	e00c      	b.n	8007cbe <RadioSetRxConfig+0x3f6>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8007ca4:	f240 7036 	movw	r0, #1846	; 0x736
 8007ca8:	f001 feb0 	bl	8009a0c <SUBGRF_ReadRegister>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f043 0304 	orr.w	r3, r3, #4
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f240 7036 	movw	r0, #1846	; 0x736
 8007cba:	f001 fe93 	bl	80099e4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <RadioSetRxConfig+0x40c>)
 8007cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cc4:	609a      	str	r2, [r3, #8]
            break;
 8007cc6:	e000      	b.n	8007cca <RadioSetRxConfig+0x402>
            break;
 8007cc8:	bf00      	nop
    }
}
 8007cca:	bf00      	nop
 8007ccc:	3728      	adds	r7, #40	; 0x28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200006f4 	.word	0x200006f4
 8007cd8:	20000025 	.word	0x20000025
 8007cdc:	2000072c 	.word	0x2000072c
 8007ce0:	20000702 	.word	0x20000702

08007ce4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60ba      	str	r2, [r7, #8]
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	73bb      	strb	r3, [r7, #14]

    switch( modem )
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d007      	beq.n	8007d0c <RadioSetTxConfig+0x28>
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	f300 80e5 	bgt.w	8007ecc <RadioSetTxConfig+0x1e8>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d014      	beq.n	8007d30 <RadioSetTxConfig+0x4c>
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d073      	beq.n	8007df2 <RadioSetTxConfig+0x10e>
            RadioStandby( );
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        default:
            break;
 8007d0a:	e0df      	b.n	8007ecc <RadioSetTxConfig+0x1e8>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007d0c:	2003      	movs	r0, #3
 8007d0e:	f7ff fd25 	bl	800775c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007d12:	4b89      	ldr	r3, [pc, #548]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d14:	2202      	movs	r2, #2
 8007d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007d1a:	4a87      	ldr	r2, [pc, #540]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007d20:	4b85      	ldr	r3, [pc, #532]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d22:	2216      	movs	r2, #22
 8007d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007d28:	4884      	ldr	r0, [pc, #528]	; (8007f3c <RadioSetTxConfig+0x258>)
 8007d2a:	f001 fc39 	bl	80095a0 <SUBGRF_SetModulationParams>
            break;
 8007d2e:	e0ce      	b.n	8007ece <RadioSetTxConfig+0x1ea>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007d30:	4b81      	ldr	r3, [pc, #516]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007d38:	4a7f      	ldr	r2, [pc, #508]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007d3e:	4b7e      	ldr	r3, [pc, #504]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d40:	220b      	movs	r2, #11
 8007d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth );
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fc72 	bl	8007630 <RadioGetFskBandwidthRegValue>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4b79      	ldr	r3, [pc, #484]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007d56:	4a78      	ldr	r2, [pc, #480]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007d5c:	4b76      	ldr	r3, [pc, #472]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007d62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	4b73      	ldr	r3, [pc, #460]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d6a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007d6c:	4b72      	ldr	r3, [pc, #456]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d6e:	2204      	movs	r2, #4
 8007d70:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007d72:	4b71      	ldr	r3, [pc, #452]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d74:	2218      	movs	r2, #24
 8007d76:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007d78:	4b6f      	ldr	r3, [pc, #444]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d82:	f083 0301 	eor.w	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4b6b      	ldr	r3, [pc, #428]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d8c:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007d8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <RadioSetTxConfig+0xba>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007d96:	4b68      	ldr	r3, [pc, #416]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007d98:	22f2      	movs	r2, #242	; 0xf2
 8007d9a:	75da      	strb	r2, [r3, #23]
 8007d9c:	e002      	b.n	8007da4 <RadioSetTxConfig+0xc0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007d9e:	4b66      	ldr	r3, [pc, #408]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007da4:	4b64      	ldr	r3, [pc, #400]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007daa:	f000 fb12 	bl	80083d2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007dae:	4b62      	ldr	r3, [pc, #392]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf14      	ite	ne
 8007db8:	2301      	movne	r3, #1
 8007dba:	2300      	moveq	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fccc 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007dc4:	485d      	ldr	r0, [pc, #372]	; (8007f3c <RadioSetTxConfig+0x258>)
 8007dc6:	f001 fbeb 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007dca:	485d      	ldr	r0, [pc, #372]	; (8007f40 <RadioSetTxConfig+0x25c>)
 8007dcc:	f001 fcb6 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007dd0:	4a5c      	ldr	r2, [pc, #368]	; (8007f44 <RadioSetTxConfig+0x260>)
 8007dd2:	f107 0310 	add.w	r3, r7, #16
 8007dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dda:	e883 0003 	stmia.w	r3, {r0, r1}
 8007dde:	f107 0310 	add.w	r3, r7, #16
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 ffb9 	bl	8008d5a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007de8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dec:	f001 f804 	bl	8008df8 <SUBGRF_SetWhiteningSeed>
            break;
 8007df0:	e06d      	b.n	8007ece <RadioSetTxConfig+0x1ea>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007df2:	4b51      	ldr	r3, [pc, #324]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	4b4e      	ldr	r3, [pc, #312]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007e04:	4a50      	ldr	r2, [pc, #320]	; (8007f48 <RadioSetTxConfig+0x264>)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4413      	add	r3, r2
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	4b4a      	ldr	r3, [pc, #296]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007e12:	4a49      	ldr	r2, [pc, #292]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e18:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d105      	bne.n	8007e2e <RadioSetTxConfig+0x14a>
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2b0b      	cmp	r3, #11
 8007e26:	d008      	beq.n	8007e3a <RadioSetTxConfig+0x156>
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	2b0c      	cmp	r3, #12
 8007e2c:	d005      	beq.n	8007e3a <RadioSetTxConfig+0x156>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d107      	bne.n	8007e44 <RadioSetTxConfig+0x160>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b0c      	cmp	r3, #12
 8007e38:	d104      	bne.n	8007e44 <RadioSetTxConfig+0x160>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007e3a:	4b3f      	ldr	r3, [pc, #252]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007e42:	e003      	b.n	8007e4c <RadioSetTxConfig+0x168>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007e44:	4b3c      	ldr	r3, [pc, #240]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007e4c:	4b3a      	ldr	r3, [pc, #232]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007e52:	4b39      	ldr	r3, [pc, #228]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d004      	beq.n	8007e66 <RadioSetTxConfig+0x182>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007e5c:	4b36      	ldr	r3, [pc, #216]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007e62:	2b06      	cmp	r3, #6
 8007e64:	d10a      	bne.n	8007e7c <RadioSetTxConfig+0x198>
                if( preambleLen < 12 )
 8007e66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e68:	2b0b      	cmp	r3, #11
 8007e6a:	d803      	bhi.n	8007e74 <RadioSetTxConfig+0x190>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007e6c:	4b32      	ldr	r3, [pc, #200]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e6e:	220c      	movs	r2, #12
 8007e70:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007e72:	e006      	b.n	8007e82 <RadioSetTxConfig+0x19e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007e74:	4a30      	ldr	r2, [pc, #192]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e78:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007e7a:	e002      	b.n	8007e82 <RadioSetTxConfig+0x19e>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007e7c:	4a2e      	ldr	r2, [pc, #184]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e80:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007e82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007e86:	4b2c      	ldr	r3, [pc, #176]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e88:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007e8a:	4b30      	ldr	r3, [pc, #192]	; (8007f4c <RadioSetTxConfig+0x268>)
 8007e8c:	781a      	ldrb	r2, [r3, #0]
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e90:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007e92:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007e96:	4b28      	ldr	r3, [pc, #160]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007e98:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007e9c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007ea0:	4b25      	ldr	r3, [pc, #148]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007ea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007ea6:	f000 fa94 	bl	80083d2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007eaa:	4b23      	ldr	r3, [pc, #140]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2301      	movne	r3, #1
 8007eb6:	2300      	moveq	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fc4e 	bl	800775c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007ec0:	481e      	ldr	r0, [pc, #120]	; (8007f3c <RadioSetTxConfig+0x258>)
 8007ec2:	f001 fb6d 	bl	80095a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ec6:	481e      	ldr	r0, [pc, #120]	; (8007f40 <RadioSetTxConfig+0x25c>)
 8007ec8:	f001 fc38 	bl	800973c <SUBGRF_SetPacketParams>
            break;
 8007ecc:	bf00      	nop
    }

    /* WORKAROUND - Modulation Quality with 500 kHz LoRa� Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1 */
    if( ( modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d112      	bne.n	8007efa <RadioSetTxConfig+0x216>
 8007ed4:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007eda:	2b06      	cmp	r3, #6
 8007edc:	d10d      	bne.n	8007efa <RadioSetTxConfig+0x216>
    {
        /* RegTxModulation = @address 0x0889 */
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007ede:	f640 0089 	movw	r0, #2185	; 0x889
 8007ee2:	f001 fd93 	bl	8009a0c <SUBGRF_ReadRegister>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f023 0304 	bic.w	r3, r3, #4
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	4619      	mov	r1, r3
 8007ef0:	f640 0089 	movw	r0, #2185	; 0x889
 8007ef4:	f001 fd76 	bl	80099e4 <SUBGRF_WriteRegister>
 8007ef8:	e00c      	b.n	8007f14 <RadioSetTxConfig+0x230>
    }
    else
    {
        /* RegTxModulation = @address 0x0889 */
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8007efa:	f640 0089 	movw	r0, #2185	; 0x889
 8007efe:	f001 fd85 	bl	8009a0c <SUBGRF_ReadRegister>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f043 0304 	orr.w	r3, r3, #4
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	f640 0089 	movw	r0, #2185	; 0x889
 8007f10:	f001 fd68 	bl	80099e4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 fe07 	bl	8009b2c <SUBGRF_SetRfTxPower>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	461a      	mov	r2, r3
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007f24:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    SubgRf.TxTimeout = timeout;
 8007f28:	4a03      	ldr	r2, [pc, #12]	; (8007f38 <RadioSetTxConfig+0x254>)
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2c:	6053      	str	r3, [r2, #4]
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	200006f4 	.word	0x200006f4
 8007f3c:	2000072c 	.word	0x2000072c
 8007f40:	20000702 	.word	0x20000702
 8007f44:	0800b278 	.word	0x0800b278
 8007f48:	0800b540 	.word	0x0800b540
 8007f4c:	20000025 	.word	0x20000025

08007f50 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
    return true;
 8007f58:	2301      	movs	r3, #1
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr

08007f64 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b0a      	cmp	r3, #10
 8007f76:	d83e      	bhi.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fcd 	.word	0x08007fcd
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	08007fe5 	.word	0x08007fe5
 8007f94:	08007feb 	.word	0x08007feb
 8007f98:	08007ff1 	.word	0x08007ff1
 8007f9c:	08007ff7 	.word	0x08007ff7
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fc5 	.word	0x08007fc5
 8007fa8:	08007fd5 	.word	0x08007fd5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007fac:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007fb0:	60fb      	str	r3, [r7, #12]
        break;
 8007fb2:	e020      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007fb4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007fb8:	60fb      	str	r3, [r7, #12]
        break;
 8007fba:	e01c      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007fbc:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007fc0:	60fb      	str	r3, [r7, #12]
        break;
 8007fc2:	e018      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007fc4:	f245 1361 	movw	r3, #20833	; 0x5161
 8007fc8:	60fb      	str	r3, [r7, #12]
        break;
 8007fca:	e014      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007fcc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007fd0:	60fb      	str	r3, [r7, #12]
        break;
 8007fd2:	e010      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007fd4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007fd8:	60fb      	str	r3, [r7, #12]
        break;
 8007fda:	e00c      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007fdc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007fe0:	60fb      	str	r3, [r7, #12]
        break;
 8007fe2:	e008      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007fe4:	4b07      	ldr	r3, [pc, #28]	; (8008004 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007fe6:	60fb      	str	r3, [r7, #12]
        break;
 8007fe8:	e005      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007fea:	4b07      	ldr	r3, [pc, #28]	; (8008008 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007fec:	60fb      	str	r3, [r7, #12]
        break;
 8007fee:	e002      	b.n	8007ff6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <RadioGetLoRaBandwidthInHz+0xa8>)
 8007ff2:	60fb      	str	r3, [r7, #12]
        break;
 8007ff4:	bf00      	nop
    }

    return bandwidthInHz;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	0001e848 	.word	0x0001e848
 8008008:	0003d090 	.word	0x0003d090
 800800c:	0007a120 	.word	0x0007a120

08008010 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	4603      	mov	r3, r0
 8008020:	70fb      	strb	r3, [r7, #3]
 8008022:	460b      	mov	r3, r1
 8008024:	803b      	strh	r3, [r7, #0]
 8008026:	4613      	mov	r3, r2
 8008028:	70bb      	strb	r3, [r7, #2]
               ( ( crcOn == true ) ? 2 : 0 )
               ) << 3
             );
    */
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800802a:	883b      	ldrh	r3, [r7, #0]
 800802c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800802e:	78ba      	ldrb	r2, [r7, #2]
 8008030:	f082 0201 	eor.w	r2, r2, #1
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	2a00      	cmp	r2, #0
 8008038:	d001      	beq.n	800803e <RadioGetGfskTimeOnAirNumerator+0x2e>
 800803a:	2208      	movs	r2, #8
 800803c:	e000      	b.n	8008040 <RadioGetGfskTimeOnAirNumerator+0x30>
 800803e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008040:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008042:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008046:	7c3b      	ldrb	r3, [r7, #16]
 8008048:	7d39      	ldrb	r1, [r7, #20]
 800804a:	2900      	cmp	r1, #0
 800804c:	d001      	beq.n	8008052 <RadioGetGfskTimeOnAirNumerator+0x42>
 800804e:	2102      	movs	r1, #2
 8008050:	e000      	b.n	8008054 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008052:	2100      	movs	r1, #0
 8008054:	440b      	add	r3, r1
 8008056:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008058:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	bc80      	pop	{r7}
 8008062:	4770      	bx	lr

08008064 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008064:	b480      	push	{r7}
 8008066:	b08b      	sub	sp, #44	; 0x2c
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4611      	mov	r1, r2
 8008070:	461a      	mov	r2, r3
 8008072:	460b      	mov	r3, r1
 8008074:	71fb      	strb	r3, [r7, #7]
 8008076:	4613      	mov	r3, r2
 8008078:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	3304      	adds	r3, #4
 800807e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008080:	2300      	movs	r3, #0
 8008082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Ensure that the preamble length is at least 12 symbols when using SF5 or SF6 */
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b05      	cmp	r3, #5
 800808a:	d002      	beq.n	8008092 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b06      	cmp	r3, #6
 8008090:	d104      	bne.n	800809c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008092:	88bb      	ldrh	r3, [r7, #4]
 8008094:	2b0b      	cmp	r3, #11
 8008096:	d801      	bhi.n	800809c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008098:	230c      	movs	r3, #12
 800809a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d105      	bne.n	80080ae <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b0b      	cmp	r3, #11
 80080a6:	d008      	beq.n	80080ba <RadioGetLoRaTimeOnAirNumerator+0x56>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b0c      	cmp	r3, #12
 80080ac:	d005      	beq.n	80080ba <RadioGetLoRaTimeOnAirNumerator+0x56>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d105      	bne.n	80080c0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d102      	bne.n	80080c0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80080c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80080c4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80080c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080ca:	2a00      	cmp	r2, #0
 80080cc:	d001      	beq.n	80080d2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80080ce:	2210      	movs	r2, #16
 80080d0:	e000      	b.n	80080d4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80080d2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80080d4:	4413      	add	r3, r2
 80080d6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80080dc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80080de:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	d001      	beq.n	80080ea <RadioGetLoRaTimeOnAirNumerator+0x86>
 80080e6:	2200      	movs	r2, #0
 80080e8:	e000      	b.n	80080ec <RadioGetLoRaTimeOnAirNumerator+0x88>
 80080ea:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80080ec:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80080ee:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b06      	cmp	r3, #6
 80080f4:	d803      	bhi.n	80080fe <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	623b      	str	r3, [r7, #32]
 80080fc:	e00e      	b.n	800811c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	3308      	adds	r3, #8
 8008102:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	3b02      	subs	r3, #2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	623b      	str	r3, [r7, #32]
 8008114:	e002      	b.n	800811c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	da01      	bge.n	8008126 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	4413      	add	r3, r2
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	fb92 f3f3 	sdiv	r3, r2, r3
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	fb02 f203 	mul.w	r2, r2, r3
 800813a:	88bb      	ldrh	r3, [r7, #4]
 800813c:	4413      	add	r3, r2
    int32_t intermediate =
 800813e:	330c      	adds	r3, #12
 8008140:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b06      	cmp	r3, #6
 8008146:	d802      	bhi.n	800814e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	3302      	adds	r3, #2
 800814c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	3b02      	subs	r3, #2
 8008158:	fa02 f303 	lsl.w	r3, r2, r3
}
 800815c:	4618      	mov	r0, r3
 800815e:	372c      	adds	r7, #44	; 0x2c
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr
	...

08008168 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af04      	add	r7, sp, #16
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	461a      	mov	r2, r3
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]
 8008178:	4613      	mov	r3, r2
 800817a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008180:	2301      	movs	r3, #1
 8008182:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <RadioTimeOnAir+0x28>
 800818a:	2b01      	cmp	r3, #1
 800818c:	d017      	beq.n	80081be <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800818e:	e035      	b.n	80081fc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008190:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008194:	8c3a      	ldrh	r2, [r7, #32]
 8008196:	7bb9      	ldrb	r1, [r7, #14]
 8008198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	4603      	mov	r3, r0
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ff32 	bl	8008010 <RadioGetGfskTimeOnAirNumerator>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	613b      	str	r3, [r7, #16]
        break;
 80081bc:	e01e      	b.n	80081fc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80081be:	8c39      	ldrh	r1, [r7, #32]
 80081c0:	7bba      	ldrb	r2, [r7, #14]
 80081c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	460b      	mov	r3, r1
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f7ff ff43 	bl	8008064 <RadioGetLoRaTimeOnAirNumerator>
 80081de:	4603      	mov	r3, r0
 80081e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081e4:	fb02 f303 	mul.w	r3, r2, r3
 80081e8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80081ea:	4a0a      	ldr	r2, [pc, #40]	; (8008214 <RadioTimeOnAir+0xac>)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4413      	add	r3, r2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff feb6 	bl	8007f64 <RadioGetLoRaBandwidthInHz>
 80081f8:	6138      	str	r0, [r7, #16]
        break;
 80081fa:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator);
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	4413      	add	r3, r2
 8008202:	1e5a      	subs	r2, r3, #1
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	0800b540 	.word	0x0800b540

08008218 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08c      	sub	sp, #48	; 0x30
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
    /* Radio IRQ is set to DIO1 by default */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8008224:	2300      	movs	r3, #0
 8008226:	2200      	movs	r2, #0
 8008228:	f240 2101 	movw	r1, #513	; 0x201
 800822c:	f240 2001 	movw	r0, #513	; 0x201
 8008230:	f001 f882 	bl	8009338 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8008234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008238:	4858      	ldr	r0, [pc, #352]	; (800839c <RadioSend+0x184>)
 800823a:	f7fe fef3 	bl	8007024 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800823e:	4b58      	ldr	r3, [pc, #352]	; (80083a0 <RadioSend+0x188>)
 8008240:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008244:	2101      	movs	r1, #1
 8008246:	4618      	mov	r0, r3
 8008248:	f001 fc48 	bl	8009adc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    switch(SubgRf.Modem)
 800824c:	4b54      	ldr	r3, [pc, #336]	; (80083a0 <RadioSend+0x188>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b03      	cmp	r3, #3
 8008252:	f200 8094 	bhi.w	800837e <RadioSend+0x166>
 8008256:	a201      	add	r2, pc, #4	; (adr r2, 800825c <RadioSend+0x44>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	08008287 	.word	0x08008287
 8008260:	0800826d 	.word	0x0800826d
 8008264:	080082a1 	.word	0x080082a1
 8008268:	080082c1 	.word	0x080082c1
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800826c:	4a4c      	ldr	r2, [pc, #304]	; (80083a0 <RadioSend+0x188>)
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008272:	484c      	ldr	r0, [pc, #304]	; (80083a4 <RadioSend+0x18c>)
 8008274:	f001 fa62 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	2200      	movs	r2, #0
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fd58 	bl	8008d34 <SUBGRF_SendPayload>
            break;
 8008284:	e07c      	b.n	8008380 <RadioSend+0x168>
        }
        case MODEM_FSK:
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008286:	4a46      	ldr	r2, [pc, #280]	; (80083a0 <RadioSend+0x188>)
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	7593      	strb	r3, [r2, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800828c:	4845      	ldr	r0, [pc, #276]	; (80083a4 <RadioSend+0x18c>)
 800828e:	f001 fa55 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	2200      	movs	r2, #0
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fd4b 	bl	8008d34 <SUBGRF_SendPayload>
            break;
 800829e:	e06f      	b.n	8008380 <RadioSend+0x168>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80082a0:	4b3f      	ldr	r3, [pc, #252]	; (80083a0 <RadioSend+0x188>)
 80082a2:	2202      	movs	r2, #2
 80082a4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80082a6:	4a3e      	ldr	r2, [pc, #248]	; (80083a0 <RadioSend+0x188>)
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082ac:	483d      	ldr	r0, [pc, #244]	; (80083a4 <RadioSend+0x18c>)
 80082ae:	f001 fa45 	bl	800973c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	2200      	movs	r2, #0
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fd3b 	bl	8008d34 <SUBGRF_SendPayload>
            break;
 80082be:	e05f      	b.n	8008380 <RadioSend+0x168>
        }
        case MODEM_SIGFOX_TX:
        {
            uint8_t outBuffer[35] = {0};
 80082c0:	2300      	movs	r3, #0
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	f107 030c 	add.w	r3, r7, #12
 80082c8:	221f      	movs	r2, #31
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f002 ff85 	bl	800b1dc <memset>
            /*from bpsk to dbpsk*/
            /*first 1 bit duplicated*/
            payload_integration( outBuffer, buffer, size );
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	f107 0308 	add.w	r3, r7, #8
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fc17 	bl	8008b0e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80082e0:	4b2f      	ldr	r3, [pc, #188]	; (80083a0 <RadioSend+0x188>)
 80082e2:	2202      	movs	r2, #2
 80082e4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	3301      	adds	r3, #1
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	4b2c      	ldr	r3, [pc, #176]	; (80083a0 <RadioSend+0x188>)
 80082ee:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082f0:	482c      	ldr	r0, [pc, #176]	; (80083a4 <RadioSend+0x18c>)
 80082f2:	f001 fa23 	bl	800973c <SUBGRF_SetPacketParams>

            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80082f6:	4b2a      	ldr	r3, [pc, #168]	; (80083a0 <RadioSend+0x188>)
 80082f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fa:	2b64      	cmp	r3, #100	; 0x64
 80082fc:	d110      	bne.n	8008320 <RadioSend+0x108>
            {
                RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80082fe:	2100      	movs	r1, #0
 8008300:	20f1      	movs	r0, #241	; 0xf1
 8008302:	f000 f93a 	bl	800857a <RadioWrite>
                RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8008306:	2100      	movs	r1, #0
 8008308:	20f0      	movs	r0, #240	; 0xf0
 800830a:	f000 f936 	bl	800857a <RadioWrite>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800830e:	2170      	movs	r1, #112	; 0x70
 8008310:	20f3      	movs	r0, #243	; 0xf3
 8008312:	f000 f932 	bl	800857a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8008316:	211d      	movs	r1, #29
 8008318:	20f2      	movs	r0, #242	; 0xf2
 800831a:	f000 f92e 	bl	800857a <RadioWrite>
 800831e:	e00f      	b.n	8008340 <RadioSend+0x128>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8008320:	2100      	movs	r1, #0
 8008322:	20f1      	movs	r0, #241	; 0xf1
 8008324:	f000 f929 	bl	800857a <RadioWrite>
                RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8008328:	2100      	movs	r1, #0
 800832a:	20f0      	movs	r0, #240	; 0xf0
 800832c:	f000 f925 	bl	800857a <RadioWrite>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8008330:	21e1      	movs	r1, #225	; 0xe1
 8008332:	20f3      	movs	r0, #243	; 0xf3
 8008334:	f000 f921 	bl	800857a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8008338:	2104      	movs	r1, #4
 800833a:	20f2      	movs	r0, #242	; 0xf2
 800833c:	f000 f91d 	bl	800857a <RadioWrite>
            }

            uint16_t bitNum = (size*8)+2;
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	b29b      	uxth	r3, r3
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	b29b      	uxth	r3, r3
 8008348:	3302      	adds	r3, #2
 800834a:	85fb      	strh	r3, [r7, #46]	; 0x2e
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800834c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800834e:	0a1b      	lsrs	r3, r3, #8
 8008350:	b29b      	uxth	r3, r3
 8008352:	b2db      	uxtb	r3, r3
 8008354:	4619      	mov	r1, r3
 8008356:	20f4      	movs	r0, #244	; 0xf4
 8008358:	f000 f90f 	bl	800857a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800835c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800835e:	b2db      	uxtb	r3, r3
 8008360:	4619      	mov	r1, r3
 8008362:	20f5      	movs	r0, #245	; 0xf5
 8008364:	f000 f909 	bl	800857a <RadioWrite>
            //
            SUBGRF_SendPayload( outBuffer, size+1 , 0xFFFFFF );
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	3301      	adds	r3, #1
 800836c:	b2d9      	uxtb	r1, r3
 800836e:	f107 0308 	add.w	r3, r7, #8
 8008372:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fcdc 	bl	8008d34 <SUBGRF_SendPayload>
            break;
 800837c:	e000      	b.n	8008380 <RadioSend+0x168>
        }
        default:
            break;
 800837e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <RadioSend+0x188>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4619      	mov	r1, r3
 8008386:	4808      	ldr	r0, [pc, #32]	; (80083a8 <RadioSend+0x190>)
 8008388:	f002 fb1e 	bl	800a9c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800838c:	4806      	ldr	r0, [pc, #24]	; (80083a8 <RadioSend+0x190>)
 800838e:	f002 fa3d 	bl	800a80c <UTIL_TIMER_Start>
}
 8008392:	bf00      	nop
 8008394:	3730      	adds	r7, #48	; 0x30
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	48000400 	.word	0x48000400
 80083a0:	200006f4 	.word	0x200006f4
 80083a4:	20000702 	.word	0x20000702
 80083a8:	2000074c 	.word	0x2000074c

080083ac <RadioSleep>:

static void RadioSleep( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80083b2:	2300      	movs	r3, #0
 80083b4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80083b6:	793b      	ldrb	r3, [r7, #4]
 80083b8:	f043 0304 	orr.w	r3, r3, #4
 80083bc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80083be:	7938      	ldrb	r0, [r7, #4]
 80083c0:	f000 fd94 	bl	8008eec <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80083c4:	2002      	movs	r0, #2
 80083c6:	f7f8 fe28 	bl	800101a <HAL_Delay>
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <RadioStandby>:

static void RadioStandby( void )
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80083d6:	2000      	movs	r0, #0
 80083d8:	f000 fdbc 	bl	8008f54 <SUBGRF_SetStandby>
}
 80083dc:	bf00      	nop
 80083de:	bd80      	pop	{r7, pc}

080083e0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
    /* Radio IRQ is set to DIO1 by default */
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80083e8:	2300      	movs	r3, #0
 80083ea:	2200      	movs	r2, #0
 80083ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80083f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80083f4:	f000 ffa0 	bl	8009338 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    if( timeout != 0 )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d006      	beq.n	800840c <RadioRx+0x2c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4812      	ldr	r0, [pc, #72]	; (800844c <RadioRx+0x6c>)
 8008402:	f002 fae1 	bl	800a9c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008406:	4811      	ldr	r0, [pc, #68]	; (800844c <RadioRx+0x6c>)
 8008408:	f002 fa00 	bl	800a80c <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 800840c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008410:	480f      	ldr	r0, [pc, #60]	; (8008450 <RadioRx+0x70>)
 8008412:	f7fe fe07 	bl	8007024 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <RadioRx+0x74>)
 8008418:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fb5c 	bl	8009adc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8008424:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <RadioRx+0x74>)
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <RadioRx+0x56>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800842c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008430:	f000 fdd0 	bl	8008fd4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008434:	e005      	b.n	8008442 <RadioRx+0x62>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <RadioRx+0x74>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	019b      	lsls	r3, r3, #6
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fdc9 	bl	8008fd4 <SUBGRF_SetRx>
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000764 	.word	0x20000764
 8008450:	48000400 	.word	0x48000400
 8008454:	200006f4 	.word	0x200006f4

08008458 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8008460:	2300      	movs	r3, #0
 8008462:	2200      	movs	r2, #0
 8008464:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008468:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800846c:	f000 ff64 	bl	8009338 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    if( timeout != 0 )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <RadioRxBoosted+0x2c>
    {
         TimerSetValue( &RxTimeoutTimer, timeout );
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	480f      	ldr	r0, [pc, #60]	; (80084b8 <RadioRxBoosted+0x60>)
 800847a:	f002 faa5 	bl	800a9c8 <UTIL_TIMER_SetPeriod>
         TimerStart( &RxTimeoutTimer );
 800847e:	480e      	ldr	r0, [pc, #56]	; (80084b8 <RadioRxBoosted+0x60>)
 8008480:	f002 f9c4 	bl	800a80c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8008484:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <RadioRxBoosted+0x64>)
 8008486:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fb25 	bl	8009adc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <RadioRxBoosted+0x64>)
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <RadioRxBoosted+0x4c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800849a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800849e:	f000 fdbb 	bl	8009018 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80084a2:	e005      	b.n	80084b0 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <RadioRxBoosted+0x64>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	019b      	lsls	r3, r3, #6
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fdb4 	bl	8009018 <SUBGRF_SetRxBoosted>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000764 	.word	0x20000764
 80084bc:	200006f4 	.word	0x200006f4

080084c0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <RadioSetRxDutyCycle+0x28>)
 80084cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80084d0:	2100      	movs	r1, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 fb02 	bl	8009adc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fdc2 	bl	8009064 <SUBGRF_SetRxDutyCycle>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	200006f4 	.word	0x200006f4

080084ec <RadioStartCad>:

static void RadioStartCad( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED, IRQ_CAD_CLEAR | IRQ_CAD_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80084f0:	2300      	movs	r3, #0
 80084f2:	2200      	movs	r2, #0
 80084f4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80084f8:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80084fc:	f000 ff1c 	bl	8009338 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8008500:	f000 fdde 	bl	80090c0 <SUBGRF_SetCad>
}
 8008504:	bf00      	nop
 8008506:	bd80      	pop	{r7, pc}

08008508 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
 8008514:	4613      	mov	r3, r2
 8008516:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = (uint32_t)time * 1000;
 8008518:	883b      	ldrh	r3, [r7, #0]
 800851a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 ff67 	bl	80093f8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800852a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800852e:	4618      	mov	r0, r3
 8008530:	f001 fafc 	bl	8009b2c <SUBGRF_SetRfTxPower>
 8008534:	4603      	mov	r3, r0
 8008536:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	2101      	movs	r1, #1
 800853c:	4618      	mov	r0, r3
 800853e:	f001 facd 	bl	8009adc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008542:	f000 fdcf 	bl	80090e4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	4804      	ldr	r0, [pc, #16]	; (800855c <RadioSetTxContinuousWave+0x54>)
 800854a:	f002 fa3d 	bl	800a9c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800854e:	4803      	ldr	r0, [pc, #12]	; (800855c <RadioSetTxContinuousWave+0x54>)
 8008550:	f002 f95c 	bl	800a80c <UTIL_TIMER_Start>
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	2000074c 	.word	0x2000074c

08008560 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800856a:	f001 f9a1 	bl	80098b0 <SUBGRF_GetRssiInst>
 800856e:	4603      	mov	r3, r0
 8008570:	b21b      	sxth	r3, r3
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	4603      	mov	r3, r0
 8008582:	460a      	mov	r2, r1
 8008584:	80fb      	strh	r3, [r7, #6]
 8008586:	4613      	mov	r3, r2
 8008588:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800858a:	797a      	ldrb	r2, [r7, #5]
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fa27 	bl	80099e4 <SUBGRF_WriteRegister>
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	4603      	mov	r3, r0
 80085a6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fa2e 	bl	8009a0c <SUBGRF_ReadRegister>
 80085b0:	4603      	mov	r3, r0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	4603      	mov	r3, r0
 80085c2:	6039      	str	r1, [r7, #0]
 80085c4:	80fb      	strh	r3, [r7, #6]
 80085c6:	4613      	mov	r3, r2
 80085c8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80085ca:	797b      	ldrb	r3, [r7, #5]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fa2e 	bl	8009a34 <SUBGRF_WriteRegisters>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	80fb      	strh	r3, [r7, #6]
 80085ec:	4613      	mov	r3, r2
 80085ee:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80085f0:	797b      	ldrb	r3, [r7, #5]
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fa2f 	bl	8009a5c <SUBGRF_ReadRegisters>
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	460a      	mov	r2, r1
 8008612:	71fb      	strb	r3, [r7, #7]
 8008614:	4613      	mov	r3, r2
 8008616:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d10a      	bne.n	8008634 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800861e:	4a0e      	ldr	r2, [pc, #56]	; (8008658 <RadioSetMaxPayloadLength+0x50>)
 8008620:	79bb      	ldrb	r3, [r7, #6]
 8008622:	7013      	strb	r3, [r2, #0]
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <RadioSetMaxPayloadLength+0x50>)
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	4b0c      	ldr	r3, [pc, #48]	; (800865c <RadioSetMaxPayloadLength+0x54>)
 800862a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800862c:	480c      	ldr	r0, [pc, #48]	; (8008660 <RadioSetMaxPayloadLength+0x58>)
 800862e:	f001 f885 	bl	800973c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008632:	e00d      	b.n	8008650 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <RadioSetMaxPayloadLength+0x54>)
 8008636:	7d5b      	ldrb	r3, [r3, #21]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d109      	bne.n	8008650 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800863c:	4a06      	ldr	r2, [pc, #24]	; (8008658 <RadioSetMaxPayloadLength+0x50>)
 800863e:	79bb      	ldrb	r3, [r7, #6]
 8008640:	7013      	strb	r3, [r2, #0]
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <RadioSetMaxPayloadLength+0x50>)
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <RadioSetMaxPayloadLength+0x54>)
 8008648:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800864a:	4805      	ldr	r0, [pc, #20]	; (8008660 <RadioSetMaxPayloadLength+0x58>)
 800864c:	f001 f876 	bl	800973c <SUBGRF_SetPacketParams>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000025 	.word	0x20000025
 800865c:	200006f4 	.word	0x200006f4
 8008660:	20000702 	.word	0x20000702

08008664 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800866e:	4a13      	ldr	r2, [pc, #76]	; (80086bc <RadioSetPublicNetwork+0x58>)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	7313      	strb	r3, [r2, #12]
 8008674:	4b11      	ldr	r3, [pc, #68]	; (80086bc <RadioSetPublicNetwork+0x58>)
 8008676:	7b1a      	ldrb	r2, [r3, #12]
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <RadioSetPublicNetwork+0x58>)
 800867a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800867c:	2001      	movs	r0, #1
 800867e:	f7ff f86d 	bl	800775c <RadioSetModem>
    if( enable == true )
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <RadioSetPublicNetwork+0x3a>
    {
      /* Change LoRa modem SyncWord */
      SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008688:	2134      	movs	r1, #52	; 0x34
 800868a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800868e:	f001 f9a9 	bl	80099e4 <SUBGRF_WriteRegister>
      SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008692:	2144      	movs	r1, #68	; 0x44
 8008694:	f240 7041 	movw	r0, #1857	; 0x741
 8008698:	f001 f9a4 	bl	80099e4 <SUBGRF_WriteRegister>
    {
      /* Change LoRa modem SyncWord */
      SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
      SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800869c:	e009      	b.n	80086b2 <RadioSetPublicNetwork+0x4e>
      SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800869e:	2114      	movs	r1, #20
 80086a0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80086a4:	f001 f99e 	bl	80099e4 <SUBGRF_WriteRegister>
      SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80086a8:	2124      	movs	r1, #36	; 0x24
 80086aa:	f240 7041 	movw	r0, #1857	; 0x741
 80086ae:	f001 f999 	bl	80099e4 <SUBGRF_WriteRegister>
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200006f4 	.word	0x200006f4

080086c0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80086c4:	f001 fa66 	bl	8009b94 <SUBGRF_GetRadioWakeUpTime>
 80086c8:	4603      	mov	r3, r0
 80086ca:	3303      	adds	r3, #3
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <RadioOnTxTimeoutIrq>:


static void RadioOnTxTimeoutIrq( void* context )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 80086d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086dc:	4809      	ldr	r0, [pc, #36]	; (8008704 <RadioOnTxTimeoutIrq+0x34>)
 80086de:	f7fe fcae 	bl	800703e <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <RadioOnTxTimeoutIrq+0x38>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <RadioOnTxTimeoutIrq+0x2c>
 80086ea:	4b07      	ldr	r3, [pc, #28]	; (8008708 <RadioOnTxTimeoutIrq+0x38>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <RadioOnTxTimeoutIrq+0x2c>
    {
        RadioEvents->TxTimeout( );
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <RadioOnTxTimeoutIrq+0x38>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	4798      	blx	r3
    }
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	48000400 	.word	0x48000400
 8008708:	200001a0 	.word	0x200001a0

0800870c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8008714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008718:	4809      	ldr	r0, [pc, #36]	; (8008740 <RadioOnRxTimeoutIrq+0x34>)
 800871a:	f7fe fc90 	bl	800703e <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <RadioOnRxTimeoutIrq+0x38>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <RadioOnRxTimeoutIrq+0x2c>
 8008726:	4b07      	ldr	r3, [pc, #28]	; (8008744 <RadioOnRxTimeoutIrq+0x38>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <RadioOnRxTimeoutIrq+0x2c>
    {
        RadioEvents->RxTimeout( );
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <RadioOnRxTimeoutIrq+0x38>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4798      	blx	r3
    }
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	48000400 	.word	0x48000400
 8008744:	200001a0 	.word	0x200001a0

08008748 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	80fb      	strh	r3, [r7, #6]
  SubgRf.RadioIrq = radioIrq;
 8008752:	4a05      	ldr	r2, [pc, #20]	; (8008768 <RadioOnDioIrq+0x20>)
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  RadioIrqProcess();
 800875a:	f000 f807 	bl	800876c <RadioIrqProcess>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200006f4 	.word	0x200006f4

0800876c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800876c:	b590      	push	{r4, r7, lr}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
  uint8_t size;

  switch (SubgRf.RadioIrq)
 8008772:	4bad      	ldr	r3, [pc, #692]	; (8008a28 <RadioIrqProcess+0x2bc>)
 8008774:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	f000 8117 	beq.w	80089ae <RadioIrqProcess+0x242>
 8008780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008784:	f300 8179 	bgt.w	8008a7a <RadioIrqProcess+0x30e>
 8008788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878c:	f000 80fd 	beq.w	800898a <RadioIrqProcess+0x21e>
 8008790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008794:	f300 8171 	bgt.w	8008a7a <RadioIrqProcess+0x30e>
 8008798:	2b80      	cmp	r3, #128	; 0x80
 800879a:	f000 80e2 	beq.w	8008962 <RadioIrqProcess+0x1f6>
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	f300 816b 	bgt.w	8008a7a <RadioIrqProcess+0x30e>
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	dc49      	bgt.n	800883c <RadioIrqProcess+0xd0>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f340 8166 	ble.w	8008a7a <RadioIrqProcess+0x30e>
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b1f      	cmp	r3, #31
 80087b2:	f200 8162 	bhi.w	8008a7a <RadioIrqProcess+0x30e>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <RadioIrqProcess+0x50>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008843 	.word	0x08008843
 80087c0:	08008879 	.word	0x08008879
 80087c4:	08008a7b 	.word	0x08008a7b
 80087c8:	08008a7b 	.word	0x08008a7b
 80087cc:	08008a7b 	.word	0x08008a7b
 80087d0:	08008a7b 	.word	0x08008a7b
 80087d4:	08008a7b 	.word	0x08008a7b
 80087d8:	08008a7b 	.word	0x08008a7b
 80087dc:	08008a7b 	.word	0x08008a7b
 80087e0:	08008a7b 	.word	0x08008a7b
 80087e4:	08008a7b 	.word	0x08008a7b
 80087e8:	08008a7b 	.word	0x08008a7b
 80087ec:	08008a7b 	.word	0x08008a7b
 80087f0:	08008a7b 	.word	0x08008a7b
 80087f4:	08008a7b 	.word	0x08008a7b
 80087f8:	08008a7b 	.word	0x08008a7b
 80087fc:	08008a7b 	.word	0x08008a7b
 8008800:	08008a7b 	.word	0x08008a7b
 8008804:	08008a7b 	.word	0x08008a7b
 8008808:	08008a7b 	.word	0x08008a7b
 800880c:	08008a7b 	.word	0x08008a7b
 8008810:	08008a7b 	.word	0x08008a7b
 8008814:	08008a7b 	.word	0x08008a7b
 8008818:	08008a7b 	.word	0x08008a7b
 800881c:	08008a7b 	.word	0x08008a7b
 8008820:	08008a7b 	.word	0x08008a7b
 8008824:	08008a7b 	.word	0x08008a7b
 8008828:	08008a7b 	.word	0x08008a7b
 800882c:	08008a7b 	.word	0x08008a7b
 8008830:	08008a7b 	.word	0x08008a7b
 8008834:	08008a7b 	.word	0x08008a7b
 8008838:	08008a45 	.word	0x08008a45
 800883c:	2b40      	cmp	r3, #64	; 0x40
 800883e:	d076      	beq.n	800892e <RadioIrqProcess+0x1c2>
      //MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" ); //RD_EDIT: tat HDR KO send uart
    }
    break;

  default:
    break;
 8008840:	e11b      	b.n	8008a7a <RadioIrqProcess+0x30e>
    DBG_GPIO_RADIO_TX(RST);
 8008842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008846:	4879      	ldr	r0, [pc, #484]	; (8008a2c <RadioIrqProcess+0x2c0>)
 8008848:	f7fe fbf9 	bl	800703e <LL_GPIO_ResetOutputPin>
    TimerStop( &TxTimeoutTimer );
 800884c:	4878      	ldr	r0, [pc, #480]	; (8008a30 <RadioIrqProcess+0x2c4>)
 800884e:	f002 f84b 	bl	800a8e8 <UTIL_TIMER_Stop>
    SUBGRF_SetStandby( STDBY_RC );
 8008852:	2000      	movs	r0, #0
 8008854:	f000 fb7e 	bl	8008f54 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008858:	4b76      	ldr	r3, [pc, #472]	; (8008a34 <RadioIrqProcess+0x2c8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 810e 	beq.w	8008a7e <RadioIrqProcess+0x312>
 8008862:	4b74      	ldr	r3, [pc, #464]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8108 	beq.w	8008a7e <RadioIrqProcess+0x312>
      RadioEvents->TxDone( );
 800886e:	4b71      	ldr	r3, [pc, #452]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4798      	blx	r3
    break;
 8008876:	e102      	b.n	8008a7e <RadioIrqProcess+0x312>
    DBG_GPIO_RADIO_RX(RST);
 8008878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800887c:	486b      	ldr	r0, [pc, #428]	; (8008a2c <RadioIrqProcess+0x2c0>)
 800887e:	f7fe fbde 	bl	800703e <LL_GPIO_ResetOutputPin>
    TimerStop( &RxTimeoutTimer );
 8008882:	486d      	ldr	r0, [pc, #436]	; (8008a38 <RadioIrqProcess+0x2cc>)
 8008884:	f002 f830 	bl	800a8e8 <UTIL_TIMER_Stop>
    if( SubgRf.RxContinuous == false )
 8008888:	4b67      	ldr	r3, [pc, #412]	; (8008a28 <RadioIrqProcess+0x2bc>)
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	f083 0301 	eor.w	r3, r3, #1
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d014      	beq.n	80088c0 <RadioIrqProcess+0x154>
      SUBGRF_SetStandby( STDBY_RC );
 8008896:	2000      	movs	r0, #0
 8008898:	f000 fb5c 	bl	8008f54 <SUBGRF_SetStandby>
      SUBGRF_WriteRegister( 0x0902, 0x00 );
 800889c:	2100      	movs	r1, #0
 800889e:	f640 1002 	movw	r0, #2306	; 0x902
 80088a2:	f001 f89f 	bl	80099e4 <SUBGRF_WriteRegister>
      SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80088a6:	f640 1044 	movw	r0, #2372	; 0x944
 80088aa:	f001 f8af 	bl	8009a0c <SUBGRF_ReadRegister>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f043 0302 	orr.w	r3, r3, #2
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	4619      	mov	r1, r3
 80088b8:	f640 1044 	movw	r0, #2372	; 0x944
 80088bc:	f001 f892 	bl	80099e4 <SUBGRF_WriteRegister>
    SUBGRF_GetPayload( RadioRxPayload, &size , 255 );
 80088c0:	1dfb      	adds	r3, r7, #7
 80088c2:	22ff      	movs	r2, #255	; 0xff
 80088c4:	4619      	mov	r1, r3
 80088c6:	485d      	ldr	r0, [pc, #372]	; (8008a3c <RadioIrqProcess+0x2d0>)
 80088c8:	f000 fa12 	bl	8008cf0 <SUBGRF_GetPayload>
    SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80088cc:	485c      	ldr	r0, [pc, #368]	; (8008a40 <RadioIrqProcess+0x2d4>)
 80088ce:	f001 f835 	bl	800993c <SUBGRF_GetPacketStatus>
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80088d2:	4b58      	ldr	r3, [pc, #352]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d027      	beq.n	800892a <RadioIrqProcess+0x1be>
 80088da:	4b56      	ldr	r3, [pc, #344]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d022      	beq.n	800892a <RadioIrqProcess+0x1be>
      switch (SubgRf.PacketStatus.packetType)
 80088e4:	4b50      	ldr	r3, [pc, #320]	; (8008a28 <RadioIrqProcess+0x2bc>)
 80088e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d10e      	bne.n	800890c <RadioIrqProcess+0x1a0>
        RadioEvents->RxDone( RadioRxPayload, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80088ee:	4b51      	ldr	r3, [pc, #324]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689c      	ldr	r4, [r3, #8]
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	b299      	uxth	r1, r3
 80088f8:	4b4b      	ldr	r3, [pc, #300]	; (8008a28 <RadioIrqProcess+0x2bc>)
 80088fa:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80088fe:	b21a      	sxth	r2, r3
 8008900:	4b49      	ldr	r3, [pc, #292]	; (8008a28 <RadioIrqProcess+0x2bc>)
 8008902:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008906:	484d      	ldr	r0, [pc, #308]	; (8008a3c <RadioIrqProcess+0x2d0>)
 8008908:	47a0      	blx	r4
        break;
 800890a:	e00f      	b.n	800892c <RadioIrqProcess+0x1c0>
        RadioEvents->RxDone( RadioRxPayload, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t)(SubgRf.PacketStatus.Params.Gfsk.FreqError) );
 800890c:	4b49      	ldr	r3, [pc, #292]	; (8008a34 <RadioIrqProcess+0x2c8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689c      	ldr	r4, [r3, #8]
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	b299      	uxth	r1, r3
 8008916:	4b44      	ldr	r3, [pc, #272]	; (8008a28 <RadioIrqProcess+0x2bc>)
 8008918:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800891c:	b21a      	sxth	r2, r3
 800891e:	4b42      	ldr	r3, [pc, #264]	; (8008a28 <RadioIrqProcess+0x2bc>)
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	b25b      	sxtb	r3, r3
 8008924:	4845      	ldr	r0, [pc, #276]	; (8008a3c <RadioIrqProcess+0x2d0>)
 8008926:	47a0      	blx	r4
        break;
 8008928:	e000      	b.n	800892c <RadioIrqProcess+0x1c0>
    }
 800892a:	bf00      	nop
    break;
 800892c:	e0b2      	b.n	8008a94 <RadioIrqProcess+0x328>
    if( SubgRf.RxContinuous == false )
 800892e:	4b3e      	ldr	r3, [pc, #248]	; (8008a28 <RadioIrqProcess+0x2bc>)
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	f083 0301 	eor.w	r3, r3, #1
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <RadioIrqProcess+0x1d6>
      SUBGRF_SetStandby( STDBY_RC );
 800893c:	2000      	movs	r0, #0
 800893e:	f000 fb09 	bl	8008f54 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008942:	4b3c      	ldr	r3, [pc, #240]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 809b 	beq.w	8008a82 <RadioIrqProcess+0x316>
 800894c:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <RadioIrqProcess+0x2c8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 8095 	beq.w	8008a82 <RadioIrqProcess+0x316>
      RadioEvents->RxError( );
 8008958:	4b36      	ldr	r3, [pc, #216]	; (8008a34 <RadioIrqProcess+0x2c8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	4798      	blx	r3
    break;
 8008960:	e08f      	b.n	8008a82 <RadioIrqProcess+0x316>
    SUBGRF_SetStandby( STDBY_RC );
 8008962:	2000      	movs	r0, #0
 8008964:	f000 faf6 	bl	8008f54 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008968:	4b32      	ldr	r3, [pc, #200]	; (8008a34 <RadioIrqProcess+0x2c8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 808a 	beq.w	8008a86 <RadioIrqProcess+0x31a>
 8008972:	4b30      	ldr	r3, [pc, #192]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8084 	beq.w	8008a86 <RadioIrqProcess+0x31a>
      RadioEvents->CadDone( false );
 800897e:	4b2d      	ldr	r3, [pc, #180]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	2000      	movs	r0, #0
 8008986:	4798      	blx	r3
    break;
 8008988:	e07d      	b.n	8008a86 <RadioIrqProcess+0x31a>
    SUBGRF_SetStandby( STDBY_RC );
 800898a:	2000      	movs	r0, #0
 800898c:	f000 fae2 	bl	8008f54 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008990:	4b28      	ldr	r3, [pc, #160]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d078      	beq.n	8008a8a <RadioIrqProcess+0x31e>
 8008998:	4b26      	ldr	r3, [pc, #152]	; (8008a34 <RadioIrqProcess+0x2c8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d073      	beq.n	8008a8a <RadioIrqProcess+0x31e>
      RadioEvents->CadDone( true );
 80089a2:	4b24      	ldr	r3, [pc, #144]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	2001      	movs	r0, #1
 80089aa:	4798      	blx	r3
    break;
 80089ac:	e06d      	b.n	8008a8a <RadioIrqProcess+0x31e>
    if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80089ae:	f000 f985 	bl	8008cbc <SUBGRF_GetOperatingMode>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d118      	bne.n	80089ea <RadioIrqProcess+0x27e>
      DBG_GPIO_RADIO_TX(RST);
 80089b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089bc:	481b      	ldr	r0, [pc, #108]	; (8008a2c <RadioIrqProcess+0x2c0>)
 80089be:	f7fe fb3e 	bl	800703e <LL_GPIO_ResetOutputPin>
      TimerStop( &TxTimeoutTimer );
 80089c2:	481b      	ldr	r0, [pc, #108]	; (8008a30 <RadioIrqProcess+0x2c4>)
 80089c4:	f001 ff90 	bl	800a8e8 <UTIL_TIMER_Stop>
      SUBGRF_SetStandby( STDBY_RC );
 80089c8:	2000      	movs	r0, #0
 80089ca:	f000 fac3 	bl	8008f54 <SUBGRF_SetStandby>
      if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80089ce:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d05b      	beq.n	8008a8e <RadioIrqProcess+0x322>
 80089d6:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d056      	beq.n	8008a8e <RadioIrqProcess+0x322>
        RadioEvents->TxTimeout( );
 80089e0:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <RadioIrqProcess+0x2c8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4798      	blx	r3
    break;
 80089e8:	e051      	b.n	8008a8e <RadioIrqProcess+0x322>
    else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80089ea:	f000 f967 	bl	8008cbc <SUBGRF_GetOperatingMode>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d14c      	bne.n	8008a8e <RadioIrqProcess+0x322>
      DBG_GPIO_RADIO_RX(RST);
 80089f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089f8:	480c      	ldr	r0, [pc, #48]	; (8008a2c <RadioIrqProcess+0x2c0>)
 80089fa:	f7fe fb20 	bl	800703e <LL_GPIO_ResetOutputPin>
      TimerStop( &RxTimeoutTimer );
 80089fe:	480e      	ldr	r0, [pc, #56]	; (8008a38 <RadioIrqProcess+0x2cc>)
 8008a00:	f001 ff72 	bl	800a8e8 <UTIL_TIMER_Stop>
      SUBGRF_SetStandby( STDBY_RC );
 8008a04:	2000      	movs	r0, #0
 8008a06:	f000 faa5 	bl	8008f54 <SUBGRF_SetStandby>
      if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d03d      	beq.n	8008a8e <RadioIrqProcess+0x322>
 8008a12:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d038      	beq.n	8008a8e <RadioIrqProcess+0x322>
        RadioEvents->RxTimeout( );
 8008a1c:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <RadioIrqProcess+0x2c8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	4798      	blx	r3
    break;
 8008a24:	e033      	b.n	8008a8e <RadioIrqProcess+0x322>
 8008a26:	bf00      	nop
 8008a28:	200006f4 	.word	0x200006f4
 8008a2c:	48000400 	.word	0x48000400
 8008a30:	2000074c 	.word	0x2000074c
 8008a34:	200001a0 	.word	0x200001a0
 8008a38:	20000764 	.word	0x20000764
 8008a3c:	200000a0 	.word	0x200000a0
 8008a40:	20000718 	.word	0x20000718
    TimerStop( &RxTimeoutTimer );
 8008a44:	4815      	ldr	r0, [pc, #84]	; (8008a9c <RadioIrqProcess+0x330>)
 8008a46:	f001 ff4f 	bl	800a8e8 <UTIL_TIMER_Stop>
    if( SubgRf.RxContinuous == false )
 8008a4a:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <RadioIrqProcess+0x334>)
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	f083 0301 	eor.w	r3, r3, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <RadioIrqProcess+0x2f2>
      SUBGRF_SetStandby( STDBY_RC );
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f000 fa7b 	bl	8008f54 <SUBGRF_SetStandby>
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008a5e:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <RadioIrqProcess+0x338>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d015      	beq.n	8008a92 <RadioIrqProcess+0x326>
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <RadioIrqProcess+0x338>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d010      	beq.n	8008a92 <RadioIrqProcess+0x326>
      RadioEvents->RxTimeout( );
 8008a70:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <RadioIrqProcess+0x338>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	4798      	blx	r3
    break;
 8008a78:	e00b      	b.n	8008a92 <RadioIrqProcess+0x326>
    break;
 8008a7a:	bf00      	nop
 8008a7c:	e00a      	b.n	8008a94 <RadioIrqProcess+0x328>
    break;
 8008a7e:	bf00      	nop
 8008a80:	e008      	b.n	8008a94 <RadioIrqProcess+0x328>
    break;
 8008a82:	bf00      	nop
 8008a84:	e006      	b.n	8008a94 <RadioIrqProcess+0x328>
    break;
 8008a86:	bf00      	nop
 8008a88:	e004      	b.n	8008a94 <RadioIrqProcess+0x328>
    break;
 8008a8a:	bf00      	nop
 8008a8c:	e002      	b.n	8008a94 <RadioIrqProcess+0x328>
    break;
 8008a8e:	bf00      	nop
 8008a90:	e000      	b.n	8008a94 <RadioIrqProcess+0x328>
    break;
 8008a92:	bf00      	nop

  }
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd90      	pop	{r4, r7, pc}
 8008a9c:	20000764 	.word	0x20000764
 8008aa0:	200006f4 	.word	0x200006f4
 8008aa4:	200001a0 	.word	0x200001a0

08008aa8 <RadioTxPrbs>:

static void RadioTxPrbs(void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <RadioTxPrbs+0x2c>)
 8008aae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 f811 	bl	8009adc <SUBGRF_SetSwitch>
    Radio.Write(0x6B8, 0x2d);  // sel mode prbs9 instead of preamble
 8008aba:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <RadioTxPrbs+0x30>)
 8008abc:	212d      	movs	r1, #45	; 0x2d
 8008abe:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008ac2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble();
 8008ac4:	f000 fb1a 	bl	80090fc <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx(0x0fffff);
 8008ac8:	4804      	ldr	r0, [pc, #16]	; (8008adc <RadioTxPrbs+0x34>)
 8008aca:	f000 fa61 	bl	8008f90 <SUBGRF_SetTx>
}
 8008ace:	bf00      	nop
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200006f4 	.word	0x200006f4
 8008ad8:	0800857b 	.word	0x0800857b
 8008adc:	000fffff 	.word	0x000fffff

08008ae0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f81c 	bl	8009b2c <SUBGRF_SetRfTxPower>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX);
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	2101      	movs	r1, #1
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 ffed 	bl	8009adc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave();
 8008b02:	f000 faef 	bl	80090e4 <SUBGRF_SetTxContinuousWave>
}
 8008b06:	bf00      	nop
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b089      	sub	sp, #36	; 0x24
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	71fb      	strb	r3, [r7, #7]
  uint8_t prevInt=0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	77fb      	strb	r3, [r7, #31]
  uint8_t currBit;
  uint8_t index_bit;
  uint8_t index_byte;
  uint8_t index_bit_out;
  uint8_t index_byte_out;
  int i=0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61bb      	str	r3, [r7, #24]

  for (i=0; i<size; i++)
 8008b24:	2300      	movs	r3, #0
 8008b26:	61bb      	str	r3, [r7, #24]
 8008b28:	e011      	b.n	8008b4e <payload_integration+0x40>
  {
    /*reverse all inputs*/
    inBuffer[i]=~inBuffer[i];
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	4413      	add	r3, r2
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	440b      	add	r3, r1
 8008b38:	43d2      	mvns	r2, r2
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]
    /*init outBuffer*/
    outBuffer[i]=0;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
  for (i=0; i<size; i++)
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	dbe9      	blt.n	8008b2a <payload_integration+0x1c>
  }

  for (i=0; i<size*8; i++)
 8008b56:	2300      	movs	r3, #0
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	e049      	b.n	8008bf0 <payload_integration+0xe2>
  {
    /*index to take bit in inBuffer*/
    index_bit = 7 - (i%8);
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	425a      	negs	r2, r3
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	f002 0207 	and.w	r2, r2, #7
 8008b68:	bf58      	it	pl
 8008b6a:	4253      	negpl	r3, r2
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f1c3 0307 	rsb	r3, r3, #7
 8008b72:	75fb      	strb	r3, [r7, #23]
    index_byte = i / 8;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da00      	bge.n	8008b7c <payload_integration+0x6e>
 8008b7a:	3307      	adds	r3, #7
 8008b7c:	10db      	asrs	r3, r3, #3
 8008b7e:	75bb      	strb	r3, [r7, #22]
    /*index to place bit in outBuffer is shifted 1 bit rigth*/
    index_bit_out = 7 - ((i+1)%8);
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	3301      	adds	r3, #1
 8008b84:	425a      	negs	r2, r3
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	f002 0207 	and.w	r2, r2, #7
 8008b8e:	bf58      	it	pl
 8008b90:	4253      	negpl	r3, r2
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f1c3 0307 	rsb	r3, r3, #7
 8008b98:	757b      	strb	r3, [r7, #21]
    index_byte_out = (i+1) / 8;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da00      	bge.n	8008ba4 <payload_integration+0x96>
 8008ba2:	3307      	adds	r3, #7
 8008ba4:	10db      	asrs	r3, r3, #3
 8008ba6:	753b      	strb	r3, [r7, #20]
    /*extract current bit from input*/
    currBit = (inBuffer[index_byte] >> index_bit) & 0x01; 
 8008ba8:	7dbb      	ldrb	r3, [r7, #22]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	fa42 f303 	asr.w	r3, r2, r3
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	74fb      	strb	r3, [r7, #19]
    /*integration*/
    prevInt ^= currBit;
 8008bc0:	7ffa      	ldrb	r2, [r7, #31]
 8008bc2:	7cfb      	ldrb	r3, [r7, #19]
 8008bc4:	4053      	eors	r3, r2
 8008bc6:	77fb      	strb	r3, [r7, #31]
    /* write result integration in output*/
    outBuffer[index_byte_out]|= (prevInt << index_bit_out);
 8008bc8:	7d3b      	ldrb	r3, [r7, #20]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	b25a      	sxtb	r2, r3
 8008bd2:	7ff9      	ldrb	r1, [r7, #31]
 8008bd4:	7d7b      	ldrb	r3, [r7, #21]
 8008bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b259      	sxtb	r1, r3
 8008be0:	7d3b      	ldrb	r3, [r7, #20]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	b2ca      	uxtb	r2, r1
 8008be8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<size*8; i++)
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	3301      	adds	r3, #1
 8008bee:	61bb      	str	r3, [r7, #24]
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	dbb0      	blt.n	8008b5c <payload_integration+0x4e>
  }

  outBuffer[size] =(prevInt<<7) | (prevInt<<6) | (( (!prevInt) & 0x01)<<5) ;
 8008bfa:	7ffb      	ldrb	r3, [r7, #31]
 8008bfc:	01db      	lsls	r3, r3, #7
 8008bfe:	b25a      	sxtb	r2, r3
 8008c00:	7ffb      	ldrb	r3, [r7, #31]
 8008c02:	019b      	lsls	r3, r3, #6
 8008c04:	b25b      	sxtb	r3, r3
 8008c06:	4313      	orrs	r3, r2
 8008c08:	b25b      	sxtb	r3, r3
 8008c0a:	7ffa      	ldrb	r2, [r7, #31]
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d101      	bne.n	8008c14 <payload_integration+0x106>
 8008c10:	2220      	movs	r2, #32
 8008c12:	e000      	b.n	8008c16 <payload_integration+0x108>
 8008c14:	2200      	movs	r2, #0
 8008c16:	4313      	orrs	r3, r2
 8008c18:	b259      	sxtb	r1, r3
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	b2ca      	uxtb	r2, r1
 8008c22:	701a      	strb	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	3724      	adds	r7, #36	; 0x24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr
	...

08008c30 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	; (8008cb0 <SUBGRF_Init+0x80>)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6013      	str	r3, [r2, #0]
    }

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008c44:	2002      	movs	r0, #2
 8008c46:	f001 f83d 	bl	8009cc4 <Radio_SMPS_Set>

    RADIO_INIT();
 8008c4a:	f7f8 f8b9 	bl	8000dc0 <MX_SUBGHZ_Init>

    ImageCalibrated = false;
 8008c4e:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <SUBGRF_Init+0x84>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008c54:	2000      	movs	r0, #0
 8008c56:	f000 f97d 	bl	8008f54 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008c5a:	f7f8 ffbf 	bl	8001bdc <RBI_IsTCXO>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d112      	bne.n	8008c8a <SUBGRF_Init+0x5a>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RBI_GetWakeUpTime() << 6 );// 100 ms
 8008c64:	f7f8 ffb3 	bl	8001bce <RBI_GetWakeUpTime>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	019b      	lsls	r3, r3, #6
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	2001      	movs	r0, #1
 8008c70:	f000 fb9e 	bl	80093b0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008c74:	2100      	movs	r1, #0
 8008c76:	f640 1011 	movw	r0, #2321	; 0x911
 8008c7a:	f000 feb3 	bl	80099e4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008c7e:	237f      	movs	r3, #127	; 0x7f
 8008c80:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008c82:	7b38      	ldrb	r0, [r7, #12]
 8008c84:	f000 faa4 	bl	80091d0 <SUBGRF_Calibrate>
 8008c88:	e009      	b.n	8008c9e <SUBGRF_Init+0x6e>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008c8a:	2120      	movs	r1, #32
 8008c8c:	f640 1011 	movw	r0, #2321	; 0x911
 8008c90:	f000 fea8 	bl	80099e4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008c94:	2120      	movs	r1, #32
 8008c96:	f640 1012 	movw	r0, #2322	; 0x912
 8008c9a:	f000 fea3 	bl	80099e4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8008c9e:	f7f8 fef5 	bl	8001a8c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <SUBGRF_Init+0x88>)
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	701a      	strb	r2, [r3, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200001b0 	.word	0x200001b0
 8008cb4:	200001ac 	.word	0x200001ac
 8008cb8:	200001a4 	.word	0x200001a4

08008cbc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <SUBGRF_GetOperatingMode+0x10>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr
 8008ccc:	200001a4 	.word	0x200001a4

08008cd0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6879      	ldr	r1, [r7, #4]
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f000 fece 	bl	8009a84 <SUBGRF_WriteBuffer>
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8008d02:	f107 0317 	add.w	r3, r7, #23
 8008d06:	4619      	mov	r1, r3
 8008d08:	68b8      	ldr	r0, [r7, #8]
 8008d0a:	f000 fde9 	bl	80098e0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	79fa      	ldrb	r2, [r7, #7]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d201      	bcs.n	8008d1c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e007      	b.n	8008d2c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008d1c:	7df8      	ldrb	r0, [r7, #23]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68f9      	ldr	r1, [r7, #12]
 8008d26:	f000 fec3 	bl	8009ab0 <SUBGRF_ReadBuffer>
    return 0;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	4619      	mov	r1, r3
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff ffc2 	bl	8008cd0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f91f 	bl	8008f90 <SUBGRF_SetTx>
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8008d62:	2208      	movs	r2, #8
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8008d6a:	f000 fe63 	bl	8009a34 <SUBGRF_WriteRegisters>
    return 0;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	0a1b      	lsrs	r3, r3, #8
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008d92:	f000 fb93 	bl	80094bc <SUBGRF_GetPacketType>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d108      	bne.n	8008dae <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008d9c:	f107 030c 	add.w	r3, r7, #12
 8008da0:	2202      	movs	r2, #2
 8008da2:	4619      	mov	r1, r3
 8008da4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008da8:	f000 fe44 	bl	8009a34 <SUBGRF_WriteRegisters>
            break;
 8008dac:	e000      	b.n	8008db0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008dae:	bf00      	nop
    }
}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008dcc:	88fb      	ldrh	r3, [r7, #6]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008dd2:	f000 fb73 	bl	80094bc <SUBGRF_GetPacketType>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d108      	bne.n	8008dee <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008ddc:	f107 030c 	add.w	r3, r7, #12
 8008de0:	2202      	movs	r2, #2
 8008de2:	4619      	mov	r1, r3
 8008de4:	f240 60be 	movw	r0, #1726	; 0x6be
 8008de8:	f000 fe24 	bl	8009a34 <SUBGRF_WriteRegisters>
            break;
 8008dec:	e000      	b.n	8008df0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008dee:	bf00      	nop
    }
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008e06:	f000 fb59 	bl	80094bc <SUBGRF_GetPacketType>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d121      	bne.n	8008e54 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008e10:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008e14:	f000 fdfa 	bl	8009a0c <SUBGRF_ReadRegister>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008e20:	88fb      	ldrh	r3, [r7, #6]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	b25b      	sxtb	r3, r3
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	b25a      	sxtb	r2, r3
 8008e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008e40:	f000 fdd0 	bl	80099e4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008e44:	88fb      	ldrh	r3, [r7, #6]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8008e4e:	f000 fdc9 	bl	80099e4 <SUBGRF_WriteRegister>
            break;
 8008e52:	e000      	b.n	8008e56 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008e54:	bf00      	nop
    }
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008e70:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008e74:	f000 fdca 	bl	8009a0c <SUBGRF_ReadRegister>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	4619      	mov	r1, r3
 8008e86:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008e8a:	f000 fdab 	bl	80099e4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008e8e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008e92:	f000 fdbb 	bl	8009a0c <SUBGRF_ReadRegister>
 8008e96:	4603      	mov	r3, r0
 8008e98:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008e9a:	79bb      	ldrb	r3, [r7, #6]
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008ea8:	f000 fd9c 	bl	80099e4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008eac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008eb0:	f000 f890 	bl	8008fd4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f640 0019 	movw	r0, #2073	; 0x819
 8008ebe:	f000 fdcd 	bl	8009a5c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	f000 f846 	bl	8008f54 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008ed0:	f000 fd88 	bl	80099e4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008ed4:	79bb      	ldrb	r3, [r7, #6]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008edc:	f000 fd82 	bl	80099e4 <SUBGRF_WriteRegister>

    return number;
 8008ee0:	683b      	ldr	r3, [r7, #0]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f7f8 fe07 	bl	8001b08 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008efa:	2002      	movs	r0, #2
 8008efc:	f000 fee2 	bl	8009cc4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f00:	793b      	ldrb	r3, [r7, #4]
 8008f02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008f0c:	793b      	ldrb	r3, [r7, #4]
 8008f0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f16:	b25b      	sxtb	r3, r3
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008f1c:	793b      	ldrb	r3, [r7, #4]
 8008f1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008f26:	4313      	orrs	r3, r2
 8008f28:	b25b      	sxtb	r3, r3
 8008f2a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f2c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008f2e:	f107 020f 	add.w	r2, r7, #15
 8008f32:	2301      	movs	r3, #1
 8008f34:	2184      	movs	r1, #132	; 0x84
 8008f36:	4805      	ldr	r0, [pc, #20]	; (8008f4c <SUBGRF_SetSleep+0x60>)
 8008f38:	f7fb fff2 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
    OperatingMode = MODE_SLEEP;
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <SUBGRF_SetSleep+0x64>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	200005f0 	.word	0x200005f0
 8008f50:	200001a4 	.word	0x200001a4

08008f54 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008f5e:	1dfa      	adds	r2, r7, #7
 8008f60:	2301      	movs	r3, #1
 8008f62:	2180      	movs	r1, #128	; 0x80
 8008f64:	4808      	ldr	r0, [pc, #32]	; (8008f88 <SUBGRF_SetStandby+0x34>)
 8008f66:	f7fb ffdb 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
    if( standbyConfig == STDBY_RC )
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d103      	bne.n	8008f78 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <SUBGRF_SetStandby+0x38>)
 8008f72:	2201      	movs	r2, #1
 8008f74:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008f76:	e002      	b.n	8008f7e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <SUBGRF_SetStandby+0x38>)
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	701a      	strb	r2, [r3, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	200005f0 	.word	0x200005f0
 8008f8c:	200001a4 	.word	0x200001a4

08008f90 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008f98:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <SUBGRF_SetTx+0x3c>)
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	0a1b      	lsrs	r3, r3, #8
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008fb4:	f107 020c 	add.w	r2, r7, #12
 8008fb8:	2303      	movs	r3, #3
 8008fba:	2183      	movs	r1, #131	; 0x83
 8008fbc:	4804      	ldr	r0, [pc, #16]	; (8008fd0 <SUBGRF_SetTx+0x40>)
 8008fbe:	f7fb ffaf 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	200001a4 	.word	0x200001a4
 8008fd0:	200005f0 	.word	0x200005f0

08008fd4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <SUBGRF_SetRx+0x3c>)
 8008fde:	2205      	movs	r2, #5
 8008fe0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	0c1b      	lsrs	r3, r3, #16
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008ff8:	f107 020c 	add.w	r2, r7, #12
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	2182      	movs	r1, #130	; 0x82
 8009000:	4804      	ldr	r0, [pc, #16]	; (8009014 <SUBGRF_SetRx+0x40>)
 8009002:	f7fb ff8d 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	200001a4 	.word	0x200001a4
 8009014:	200005f0 	.word	0x200005f0

08009018 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009020:	4b0e      	ldr	r3, [pc, #56]	; (800905c <SUBGRF_SetRxBoosted+0x44>)
 8009022:	2205      	movs	r2, #5
 8009024:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009026:	2197      	movs	r1, #151	; 0x97
 8009028:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800902c:	f000 fcda 	bl	80099e4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	0c1b      	lsrs	r3, r3, #16
 8009034:	b2db      	uxtb	r3, r3
 8009036:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	b2db      	uxtb	r3, r3
 800903e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009046:	f107 020c 	add.w	r2, r7, #12
 800904a:	2303      	movs	r3, #3
 800904c:	2182      	movs	r1, #130	; 0x82
 800904e:	4804      	ldr	r0, [pc, #16]	; (8009060 <SUBGRF_SetRxBoosted+0x48>)
 8009050:	f7fb ff66 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 8009054:	bf00      	nop
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	200001a4 	.word	0x200001a4
 8009060:	200005f0 	.word	0x200005f0

08009064 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	0c1b      	lsrs	r3, r3, #16
 8009072:	b2db      	uxtb	r3, r3
 8009074:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	0a1b      	lsrs	r3, r3, #8
 800907a:	b2db      	uxtb	r3, r3
 800907c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	b2db      	uxtb	r3, r3
 800908a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	b2db      	uxtb	r3, r3
 8009092:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800909a:	f107 0208 	add.w	r2, r7, #8
 800909e:	2306      	movs	r3, #6
 80090a0:	2194      	movs	r1, #148	; 0x94
 80090a2:	4805      	ldr	r0, [pc, #20]	; (80090b8 <SUBGRF_SetRxDutyCycle+0x54>)
 80090a4:	f7fb ff3c 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
    OperatingMode = MODE_RX_DC;
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <SUBGRF_SetRxDutyCycle+0x58>)
 80090aa:	2206      	movs	r2, #6
 80090ac:	701a      	strb	r2, [r3, #0]
}
 80090ae:	bf00      	nop
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	200005f0 	.word	0x200005f0
 80090bc:	200001a4 	.word	0x200001a4

080090c0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80090c4:	2300      	movs	r3, #0
 80090c6:	2200      	movs	r2, #0
 80090c8:	21c5      	movs	r1, #197	; 0xc5
 80090ca:	4804      	ldr	r0, [pc, #16]	; (80090dc <SUBGRF_SetCad+0x1c>)
 80090cc:	f7fb ff28 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
    OperatingMode = MODE_CAD;
 80090d0:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <SUBGRF_SetCad+0x20>)
 80090d2:	2207      	movs	r2, #7
 80090d4:	701a      	strb	r2, [r3, #0]
}
 80090d6:	bf00      	nop
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200005f0 	.word	0x200005f0
 80090e0:	200001a4 	.word	0x200001a4

080090e4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80090e8:	2300      	movs	r3, #0
 80090ea:	2200      	movs	r2, #0
 80090ec:	21d1      	movs	r1, #209	; 0xd1
 80090ee:	4802      	ldr	r0, [pc, #8]	; (80090f8 <SUBGRF_SetTxContinuousWave+0x14>)
 80090f0:	f7fb ff16 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80090f4:	bf00      	nop
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200005f0 	.word	0x200005f0

080090fc <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009100:	2300      	movs	r3, #0
 8009102:	2200      	movs	r2, #0
 8009104:	21d2      	movs	r1, #210	; 0xd2
 8009106:	4802      	ldr	r0, [pc, #8]	; (8009110 <SUBGRF_SetTxInfinitePreamble+0x14>)
 8009108:	f7fb ff0a 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 800910c:	bf00      	nop
 800910e:	bd80      	pop	{r7, pc}
 8009110:	200005f0 	.word	0x200005f0

08009114 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800911e:	1dfa      	adds	r2, r7, #7
 8009120:	2301      	movs	r3, #1
 8009122:	219f      	movs	r1, #159	; 0x9f
 8009124:	4803      	ldr	r0, [pc, #12]	; (8009134 <SUBGRF_SetStopRxTimerOnPreambleDetect+0x20>)
 8009126:	f7fb fefb 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	200005f0 	.word	0x200005f0

08009138 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009142:	1dfa      	adds	r2, r7, #7
 8009144:	2301      	movs	r3, #1
 8009146:	21a0      	movs	r1, #160	; 0xa0
 8009148:	4813      	ldr	r0, [pc, #76]	; (8009198 <SUBGRF_SetLoRaSymbNumTimeout+0x60>)
 800914a:	f7fb fee9 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>

    if( symbNum >= 64 )
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	2b3f      	cmp	r3, #63	; 0x3f
 8009152:	d91c      	bls.n	800918e <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	085b      	lsrs	r3, r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009162:	e005      	b.n	8009170 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	089b      	lsrs	r3, r3, #2
 8009168:	73fb      	strb	r3, [r7, #15]
            exp++;
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	3301      	adds	r3, #1
 800916e:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b1f      	cmp	r3, #31
 8009174:	d8f6      	bhi.n	8009164 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	b2da      	uxtb	r2, r3
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	4413      	add	r3, r2
 8009180:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009182:	7b7b      	ldrb	r3, [r7, #13]
 8009184:	4619      	mov	r1, r3
 8009186:	f240 7006 	movw	r0, #1798	; 0x706
 800918a:	f000 fc2b 	bl	80099e4 <SUBGRF_WriteRegister>
    }
}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	200005f0 	.word	0x200005f0

0800919c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( 1U == RBI_IsDCDC() )
 80091a2:	f7f8 fd22 	bl	8001bea <RBI_IsDCDC>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d102      	bne.n	80091b2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80091ac:	2301      	movs	r3, #1
 80091ae:	71fb      	strb	r3, [r7, #7]
 80091b0:	e001      	b.n	80091b6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80091b2:	2300      	movs	r3, #0
 80091b4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80091b6:	1dfa      	adds	r2, r7, #7
 80091b8:	2301      	movs	r3, #1
 80091ba:	2196      	movs	r1, #150	; 0x96
 80091bc:	4803      	ldr	r0, [pc, #12]	; (80091cc <SUBGRF_SetRegulatorMode+0x30>)
 80091be:	f7fb feaf 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200005f0 	.word	0x200005f0

080091d0 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80091d8:	793b      	ldrb	r3, [r7, #4]
 80091da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	019b      	lsls	r3, r3, #6
 80091e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80091e4:	793b      	ldrb	r3, [r7, #4]
 80091e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80091ee:	b25b      	sxtb	r3, r3
 80091f0:	4313      	orrs	r3, r2
 80091f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80091f4:	793b      	ldrb	r3, [r7, #4]
 80091f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80091fe:	b25b      	sxtb	r3, r3
 8009200:	4313      	orrs	r3, r2
 8009202:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009204:	793b      	ldrb	r3, [r7, #4]
 8009206:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800920a:	b2db      	uxtb	r3, r3
 800920c:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800920e:	b25b      	sxtb	r3, r3
 8009210:	4313      	orrs	r3, r2
 8009212:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009214:	793b      	ldrb	r3, [r7, #4]
 8009216:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800921a:	b2db      	uxtb	r3, r3
 800921c:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800921e:	b25b      	sxtb	r3, r3
 8009220:	4313      	orrs	r3, r2
 8009222:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009224:	793b      	ldrb	r3, [r7, #4]
 8009226:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800922a:	b2db      	uxtb	r3, r3
 800922c:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800922e:	b25b      	sxtb	r3, r3
 8009230:	4313      	orrs	r3, r2
 8009232:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009234:	793b      	ldrb	r3, [r7, #4]
 8009236:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800923a:	b2db      	uxtb	r3, r3
 800923c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800923e:	4313      	orrs	r3, r2
 8009240:	b25b      	sxtb	r3, r3
 8009242:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009244:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009246:	f107 020f 	add.w	r2, r7, #15
 800924a:	2301      	movs	r3, #1
 800924c:	2189      	movs	r1, #137	; 0x89
 800924e:	4803      	ldr	r0, [pc, #12]	; (800925c <SUBGRF_Calibrate+0x8c>)
 8009250:	f7fb fe66 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	200005f0 	.word	0x200005f0

08009260 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a1b      	ldr	r2, [pc, #108]	; (80092d8 <SUBGRF_CalibrateImage+0x78>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d904      	bls.n	800927a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009270:	23e1      	movs	r3, #225	; 0xe1
 8009272:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009274:	23e9      	movs	r3, #233	; 0xe9
 8009276:	737b      	strb	r3, [r7, #13]
 8009278:	e022      	b.n	80092c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a17      	ldr	r2, [pc, #92]	; (80092dc <SUBGRF_CalibrateImage+0x7c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d904      	bls.n	800928c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009282:	23d7      	movs	r3, #215	; 0xd7
 8009284:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009286:	23db      	movs	r3, #219	; 0xdb
 8009288:	737b      	strb	r3, [r7, #13]
 800928a:	e019      	b.n	80092c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a14      	ldr	r2, [pc, #80]	; (80092e0 <SUBGRF_CalibrateImage+0x80>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d904      	bls.n	800929e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009294:	23c1      	movs	r3, #193	; 0xc1
 8009296:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009298:	23c5      	movs	r3, #197	; 0xc5
 800929a:	737b      	strb	r3, [r7, #13]
 800929c:	e010      	b.n	80092c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a10      	ldr	r2, [pc, #64]	; (80092e4 <SUBGRF_CalibrateImage+0x84>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d904      	bls.n	80092b0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80092a6:	2375      	movs	r3, #117	; 0x75
 80092a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80092aa:	2381      	movs	r3, #129	; 0x81
 80092ac:	737b      	strb	r3, [r7, #13]
 80092ae:	e007      	b.n	80092c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a0d      	ldr	r2, [pc, #52]	; (80092e8 <SUBGRF_CalibrateImage+0x88>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d903      	bls.n	80092c0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80092b8:	236b      	movs	r3, #107	; 0x6b
 80092ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80092bc:	236f      	movs	r3, #111	; 0x6f
 80092be:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80092c0:	f107 020c 	add.w	r2, r7, #12
 80092c4:	2302      	movs	r3, #2
 80092c6:	2198      	movs	r1, #152	; 0x98
 80092c8:	4808      	ldr	r0, [pc, #32]	; (80092ec <SUBGRF_CalibrateImage+0x8c>)
 80092ca:	f7fb fe29 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80092ce:	bf00      	nop
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	35a4e900 	.word	0x35a4e900
 80092dc:	32a9f880 	.word	0x32a9f880
 80092e0:	2de54480 	.word	0x2de54480
 80092e4:	1b6b0b00 	.word	0x1b6b0b00
 80092e8:	1954fc40 	.word	0x1954fc40
 80092ec:	200005f0 	.word	0x200005f0

080092f0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80092f0:	b590      	push	{r4, r7, lr}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	4623      	mov	r3, r4
 8009300:	71fb      	strb	r3, [r7, #7]
 8009302:	4603      	mov	r3, r0
 8009304:	71bb      	strb	r3, [r7, #6]
 8009306:	460b      	mov	r3, r1
 8009308:	717b      	strb	r3, [r7, #5]
 800930a:	4613      	mov	r3, r2
 800930c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009312:	79bb      	ldrb	r3, [r7, #6]
 8009314:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009316:	797b      	ldrb	r3, [r7, #5]
 8009318:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800931a:	793b      	ldrb	r3, [r7, #4]
 800931c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800931e:	f107 020c 	add.w	r2, r7, #12
 8009322:	2304      	movs	r3, #4
 8009324:	2195      	movs	r1, #149	; 0x95
 8009326:	4803      	ldr	r0, [pc, #12]	; (8009334 <SUBGRF_SetPaConfig+0x44>)
 8009328:	f7fb fdfa 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 800932c:	bf00      	nop
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}
 8009334:	200005f0 	.word	0x200005f0

08009338 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4623      	mov	r3, r4
 8009348:	80fb      	strh	r3, [r7, #6]
 800934a:	4603      	mov	r3, r0
 800934c:	80bb      	strh	r3, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	807b      	strh	r3, [r7, #2]
 8009352:	4613      	mov	r3, r2
 8009354:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	b29b      	uxth	r3, r3
 800935c:	b2db      	uxtb	r3, r3
 800935e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009366:	88bb      	ldrh	r3, [r7, #4]
 8009368:	0a1b      	lsrs	r3, r3, #8
 800936a:	b29b      	uxth	r3, r3
 800936c:	b2db      	uxtb	r3, r3
 800936e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009370:	88bb      	ldrh	r3, [r7, #4]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009376:	887b      	ldrh	r3, [r7, #2]
 8009378:	0a1b      	lsrs	r3, r3, #8
 800937a:	b29b      	uxth	r3, r3
 800937c:	b2db      	uxtb	r3, r3
 800937e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009386:	883b      	ldrh	r3, [r7, #0]
 8009388:	0a1b      	lsrs	r3, r3, #8
 800938a:	b29b      	uxth	r3, r3
 800938c:	b2db      	uxtb	r3, r3
 800938e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009390:	883b      	ldrh	r3, [r7, #0]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009396:	f107 0208 	add.w	r2, r7, #8
 800939a:	2308      	movs	r3, #8
 800939c:	2108      	movs	r1, #8
 800939e:	4803      	ldr	r0, [pc, #12]	; (80093ac <SUBGRF_SetDioIrqParams+0x74>)
 80093a0:	f7fb fdbe 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd90      	pop	{r4, r7, pc}
 80093ac:	200005f0 	.word	0x200005f0

080093b0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	0c1b      	lsrs	r3, r3, #16
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	0a1b      	lsrs	r3, r3, #8
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80093dc:	f107 020c 	add.w	r2, r7, #12
 80093e0:	2304      	movs	r3, #4
 80093e2:	2197      	movs	r1, #151	; 0x97
 80093e4:	4803      	ldr	r0, [pc, #12]	; (80093f4 <SUBGRF_SetTcxoMode+0x44>)
 80093e6:	f7fb fd9b 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200005f0 	.word	0x200005f0

080093f8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80093f8:	b5b0      	push	{r4, r5, r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]

    frequency+= RF_FREQUENCY_ERROR;

    if( ImageCalibrated == false )
 8009404:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <SUBGRF_SetRfFrequency+0x7c>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f083 0301 	eor.w	r3, r3, #1
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff ff24 	bl	8009260 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <SUBGRF_SetRfFrequency+0x7c>)
 800941a:	2201      	movs	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	461a      	mov	r2, r3
 8009422:	f04f 0300 	mov.w	r3, #0
 8009426:	09d5      	lsrs	r5, r2, #7
 8009428:	0654      	lsls	r4, r2, #25
 800942a:	4a13      	ldr	r2, [pc, #76]	; (8009478 <SUBGRF_SetRfFrequency+0x80>)
 800942c:	f04f 0300 	mov.w	r3, #0
 8009430:	4620      	mov	r0, r4
 8009432:	4629      	mov	r1, r5
 8009434:	f7f6 fea8 	bl	8000188 <__aeabi_uldivmod>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4613      	mov	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	0e1b      	lsrs	r3, r3, #24
 8009444:	b2db      	uxtb	r3, r3
 8009446:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	b2db      	uxtb	r3, r3
 800944e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	b2db      	uxtb	r3, r3
 8009456:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800945e:	f107 0208 	add.w	r2, r7, #8
 8009462:	2304      	movs	r3, #4
 8009464:	2186      	movs	r1, #134	; 0x86
 8009466:	4805      	ldr	r0, [pc, #20]	; (800947c <SUBGRF_SetRfFrequency+0x84>)
 8009468:	f7fb fd5a 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bdb0      	pop	{r4, r5, r7, pc}
 8009474:	200001ac 	.word	0x200001ac
 8009478:	01e84800 	.word	0x01e84800
 800947c:	200005f0 	.word	0x200005f0

08009480 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800948a:	79fa      	ldrb	r2, [r7, #7]
 800948c:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <SUBGRF_SetPacketType+0x34>)
 800948e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009496:	2100      	movs	r1, #0
 8009498:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800949c:	f000 faa2 	bl	80099e4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80094a0:	1dfa      	adds	r2, r7, #7
 80094a2:	2301      	movs	r3, #1
 80094a4:	218a      	movs	r1, #138	; 0x8a
 80094a6:	4804      	ldr	r0, [pc, #16]	; (80094b8 <SUBGRF_SetPacketType+0x38>)
 80094a8:	f7fb fd3a 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	200001a5 	.word	0x200001a5
 80094b8:	200005f0 	.word	0x200005f0

080094bc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
    return PacketType;
 80094c0:	4b02      	ldr	r3, [pc, #8]	; (80094cc <SUBGRF_GetPacketType+0x10>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr
 80094cc:	200001a5 	.word	0x200001a5

080094d0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	71fb      	strb	r3, [r7, #7]
 80094da:	460b      	mov	r3, r1
 80094dc:	71bb      	strb	r3, [r7, #6]
 80094de:	4613      	mov	r3, r2
 80094e0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d124      	bne.n	8009532 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80094e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80094ec:	2b0f      	cmp	r3, #15
 80094ee:	d106      	bne.n	80094fe <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80094f0:	2301      	movs	r3, #1
 80094f2:	2201      	movs	r2, #1
 80094f4:	2100      	movs	r1, #0
 80094f6:	2006      	movs	r0, #6
 80094f8:	f7ff fefa 	bl	80092f0 <SUBGRF_SetPaConfig>
 80094fc:	e005      	b.n	800950a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80094fe:	2301      	movs	r3, #1
 8009500:	2201      	movs	r2, #1
 8009502:	2100      	movs	r1, #0
 8009504:	2004      	movs	r0, #4
 8009506:	f7ff fef3 	bl	80092f0 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800950a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800950e:	2b0d      	cmp	r3, #13
 8009510:	dd02      	ble.n	8009518 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8009512:	230e      	movs	r3, #14
 8009514:	71bb      	strb	r3, [r7, #6]
 8009516:	e006      	b.n	8009526 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8009518:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800951c:	f113 0f11 	cmn.w	r3, #17
 8009520:	da01      	bge.n	8009526 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8009522:	23ef      	movs	r3, #239	; 0xef
 8009524:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8009526:	2118      	movs	r1, #24
 8009528:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800952c:	f000 fa5a 	bl	80099e4 <SUBGRF_WriteRegister>
 8009530:	e025      	b.n	800957e <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8009532:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009536:	f000 fa69 	bl	8009a0c <SUBGRF_ReadRegister>
 800953a:	4603      	mov	r3, r0
 800953c:	f043 031e 	orr.w	r3, r3, #30
 8009540:	b2db      	uxtb	r3, r3
 8009542:	4619      	mov	r1, r3
 8009544:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009548:	f000 fa4c 	bl	80099e4 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800954c:	2301      	movs	r3, #1
 800954e:	2200      	movs	r2, #0
 8009550:	2107      	movs	r1, #7
 8009552:	2004      	movs	r0, #4
 8009554:	f7ff fecc 	bl	80092f0 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8009558:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800955c:	2b16      	cmp	r3, #22
 800955e:	dd02      	ble.n	8009566 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8009560:	2316      	movs	r3, #22
 8009562:	71bb      	strb	r3, [r7, #6]
 8009564:	e006      	b.n	8009574 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8009566:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800956a:	f113 0f09 	cmn.w	r3, #9
 800956e:	da01      	bge.n	8009574 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8009570:	23f7      	movs	r3, #247	; 0xf7
 8009572:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8009574:	2138      	movs	r1, #56	; 0x38
 8009576:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800957a:	f000 fa33 	bl	80099e4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800957e:	79bb      	ldrb	r3, [r7, #6]
 8009580:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8009582:	797b      	ldrb	r3, [r7, #5]
 8009584:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8009586:	f107 020c 	add.w	r2, r7, #12
 800958a:	2302      	movs	r3, #2
 800958c:	218e      	movs	r1, #142	; 0x8e
 800958e:	4803      	ldr	r0, [pc, #12]	; (800959c <SUBGRF_SetTxParams+0xcc>)
 8009590:	f7fb fcc6 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 8009594:	bf00      	nop
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	200005f0 	.word	0x200005f0

080095a0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80095a0:	b5b0      	push	{r4, r5, r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80095ac:	4a5e      	ldr	r2, [pc, #376]	; (8009728 <SUBGRF_SetModulationParams+0x188>)
 80095ae:	f107 0308 	add.w	r3, r7, #8
 80095b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095b6:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781a      	ldrb	r2, [r3, #0]
 80095be:	4b5b      	ldr	r3, [pc, #364]	; (800972c <SUBGRF_SetModulationParams+0x18c>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d004      	beq.n	80095d0 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff ff58 	bl	8009480 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	f200 80a2 	bhi.w	800971e <SUBGRF_SetModulationParams+0x17e>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <SUBGRF_SetModulationParams+0x40>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	080095f1 	.word	0x080095f1
 80095e4:	080096ad 	.word	0x080096ad
 80095e8:	0800966f 	.word	0x0800966f
 80095ec:	080096db 	.word	0x080096db
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80095f0:	2308      	movs	r3, #8
 80095f2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4a4d      	ldr	r2, [pc, #308]	; (8009730 <SUBGRF_SetModulationParams+0x190>)
 80095fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	0c1b      	lsrs	r3, r3, #16
 8009604:	b2db      	uxtb	r3, r3
 8009606:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	0a1b      	lsrs	r3, r3, #8
 800960c:	b2db      	uxtb	r3, r3
 800960e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7b1b      	ldrb	r3, [r3, #12]
 800961a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7b5b      	ldrb	r3, [r3, #13]
 8009620:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	461a      	mov	r2, r3
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	09d5      	lsrs	r5, r2, #7
 800962e:	0654      	lsls	r4, r2, #25
 8009630:	4a40      	ldr	r2, [pc, #256]	; (8009734 <SUBGRF_SetModulationParams+0x194>)
 8009632:	f04f 0300 	mov.w	r3, #0
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	f7f6 fda5 	bl	8000188 <__aeabi_uldivmod>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4613      	mov	r3, r2
 8009644:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	0c1b      	lsrs	r3, r3, #16
 800964a:	b2db      	uxtb	r3, r3
 800964c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	0a1b      	lsrs	r3, r3, #8
 8009652:	b2db      	uxtb	r3, r3
 8009654:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800965c:	7cfb      	ldrb	r3, [r7, #19]
 800965e:	b29b      	uxth	r3, r3
 8009660:	f107 0208 	add.w	r2, r7, #8
 8009664:	218b      	movs	r1, #139	; 0x8b
 8009666:	4834      	ldr	r0, [pc, #208]	; (8009738 <SUBGRF_SetModulationParams+0x198>)
 8009668:	f7fb fc5a 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
        break;
 800966c:	e058      	b.n	8009720 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800966e:	2304      	movs	r3, #4
 8009670:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	4a2e      	ldr	r2, [pc, #184]	; (8009730 <SUBGRF_SetModulationParams+0x190>)
 8009678:	fbb2 f3f3 	udiv	r3, r2, r3
 800967c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	b2db      	uxtb	r3, r3
 8009684:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	0a1b      	lsrs	r3, r3, #8
 800968a:	b2db      	uxtb	r3, r3
 800968c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	7d1b      	ldrb	r3, [r3, #20]
 8009698:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800969a:	7cfb      	ldrb	r3, [r7, #19]
 800969c:	b29b      	uxth	r3, r3
 800969e:	f107 0208 	add.w	r2, r7, #8
 80096a2:	218b      	movs	r1, #139	; 0x8b
 80096a4:	4824      	ldr	r0, [pc, #144]	; (8009738 <SUBGRF_SetModulationParams+0x198>)
 80096a6:	f7fb fc3b 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
        break;
 80096aa:	e039      	b.n	8009720 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 80096ac:	2304      	movs	r3, #4
 80096ae:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7e1b      	ldrb	r3, [r3, #24]
 80096b4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	7e5b      	ldrb	r3, [r3, #25]
 80096ba:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	7e9b      	ldrb	r3, [r3, #26]
 80096c0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	7edb      	ldrb	r3, [r3, #27]
 80096c6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80096c8:	7cfb      	ldrb	r3, [r7, #19]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	f107 0208 	add.w	r2, r7, #8
 80096d0:	218b      	movs	r1, #139	; 0x8b
 80096d2:	4819      	ldr	r0, [pc, #100]	; (8009738 <SUBGRF_SetModulationParams+0x198>)
 80096d4:	f7fb fc24 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>

        break;
 80096d8:	e022      	b.n	8009720 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80096da:	2305      	movs	r3, #5
 80096dc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	4a13      	ldr	r2, [pc, #76]	; (8009730 <SUBGRF_SetModulationParams+0x190>)
 80096e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	0c1b      	lsrs	r3, r3, #16
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	0a1b      	lsrs	r3, r3, #8
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	7b1b      	ldrb	r3, [r3, #12]
 8009704:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7b5b      	ldrb	r3, [r3, #13]
 800970a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800970c:	7cfb      	ldrb	r3, [r7, #19]
 800970e:	b29b      	uxth	r3, r3
 8009710:	f107 0208 	add.w	r2, r7, #8
 8009714:	218b      	movs	r1, #139	; 0x8b
 8009716:	4808      	ldr	r0, [pc, #32]	; (8009738 <SUBGRF_SetModulationParams+0x198>)
 8009718:	f7fb fc02 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
        break;
 800971c:	e000      	b.n	8009720 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800971e:	bf00      	nop
    }
}
 8009720:	bf00      	nop
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bdb0      	pop	{r4, r5, r7, pc}
 8009728:	0800b280 	.word	0x0800b280
 800972c:	200001a5 	.word	0x200001a5
 8009730:	3d090000 	.word	0x3d090000
 8009734:	01e84800 	.word	0x01e84800
 8009738:	200005f0 	.word	0x200005f0

0800973c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009748:	4a48      	ldr	r2, [pc, #288]	; (800986c <SUBGRF_SetPacketParams+0x130>)
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009750:	c303      	stmia	r3!, {r0, r1}
 8009752:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	781a      	ldrb	r2, [r3, #0]
 8009758:	4b45      	ldr	r3, [pc, #276]	; (8009870 <SUBGRF_SetPacketParams+0x134>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d004      	beq.n	800976a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff fe8b 	bl	8009480 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b03      	cmp	r3, #3
 8009770:	d878      	bhi.n	8009864 <SUBGRF_SetPacketParams+0x128>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <SUBGRF_SetPacketParams+0x3c>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	08009789 	.word	0x08009789
 800977c:	08009819 	.word	0x08009819
 8009780:	0800980d 	.word	0x0800980d
 8009784:	08009789 	.word	0x08009789
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7a5b      	ldrb	r3, [r3, #9]
 800978c:	2bf1      	cmp	r3, #241	; 0xf1
 800978e:	d10a      	bne.n	80097a6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009790:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009794:	f7ff faf0 	bl	8008d78 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009798:	f248 0005 	movw	r0, #32773	; 0x8005
 800979c:	f7ff fb0c 	bl	8008db8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80097a0:	2302      	movs	r3, #2
 80097a2:	75bb      	strb	r3, [r7, #22]
 80097a4:	e011      	b.n	80097ca <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	2bf2      	cmp	r3, #242	; 0xf2
 80097ac:	d10a      	bne.n	80097c4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80097ae:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80097b2:	f7ff fae1 	bl	8008d78 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80097b6:	f241 0021 	movw	r0, #4129	; 0x1021
 80097ba:	f7ff fafd 	bl	8008db8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80097be:	2306      	movs	r3, #6
 80097c0:	75bb      	strb	r3, [r7, #22]
 80097c2:	e002      	b.n	80097ca <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7a5b      	ldrb	r3, [r3, #9]
 80097c8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80097ca:	2309      	movs	r3, #9
 80097cc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	885b      	ldrh	r3, [r3, #2]
 80097d2:	0a1b      	lsrs	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	885b      	ldrh	r3, [r3, #2]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	791b      	ldrb	r3, [r3, #4]
 80097e6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	795b      	ldrb	r3, [r3, #5]
 80097ec:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	799b      	ldrb	r3, [r3, #6]
 80097f2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	79db      	ldrb	r3, [r3, #7]
 80097f8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	7a1b      	ldrb	r3, [r3, #8]
 80097fe:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009800:	7dbb      	ldrb	r3, [r7, #22]
 8009802:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	7a9b      	ldrb	r3, [r3, #10]
 8009808:	753b      	strb	r3, [r7, #20]
        break;
 800980a:	e022      	b.n	8009852 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800980c:	2301      	movs	r3, #1
 800980e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7b1b      	ldrb	r3, [r3, #12]
 8009814:	733b      	strb	r3, [r7, #12]
        break;
 8009816:	e01c      	b.n	8009852 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009818:	2306      	movs	r3, #6
 800981a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	89db      	ldrh	r3, [r3, #14]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	b29b      	uxth	r3, r3
 8009824:	b2db      	uxtb	r3, r3
 8009826:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	89db      	ldrh	r3, [r3, #14]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7c1a      	ldrb	r2, [r3, #16]
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <SUBGRF_SetPacketParams+0x138>)
 8009836:	4611      	mov	r1, r2
 8009838:	7019      	strb	r1, [r3, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7c5b      	ldrb	r3, [r3, #17]
 8009842:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7c9b      	ldrb	r3, [r3, #18]
 8009848:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7cdb      	ldrb	r3, [r3, #19]
 800984e:	747b      	strb	r3, [r7, #17]
        break;
 8009850:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f107 020c 	add.w	r2, r7, #12
 800985a:	218c      	movs	r1, #140	; 0x8c
 800985c:	4806      	ldr	r0, [pc, #24]	; (8009878 <SUBGRF_SetPacketParams+0x13c>)
 800985e:	f7fb fb5f 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
 8009862:	e000      	b.n	8009866 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009864:	bf00      	nop
}
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	0800b288 	.word	0x0800b288
 8009870:	200001a5 	.word	0x200001a5
 8009874:	200001a6 	.word	0x200001a6
 8009878:	200005f0 	.word	0x200005f0

0800987c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	460a      	mov	r2, r1
 8009886:	71fb      	strb	r3, [r7, #7]
 8009888:	4613      	mov	r3, r2
 800988a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009890:	79bb      	ldrb	r3, [r7, #6]
 8009892:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009894:	f107 020c 	add.w	r2, r7, #12
 8009898:	2302      	movs	r3, #2
 800989a:	218f      	movs	r1, #143	; 0x8f
 800989c:	4803      	ldr	r0, [pc, #12]	; (80098ac <SUBGRF_SetBufferBaseAddress+0x30>)
 800989e:	f7fb fb3f 	bl	8004f20 <HAL_SUBGHZ_ExecSetCmd>
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	200005f0 	.word	0x200005f0

080098b0 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80098ba:	1d3a      	adds	r2, r7, #4
 80098bc:	2301      	movs	r3, #1
 80098be:	2115      	movs	r1, #21
 80098c0:	4806      	ldr	r0, [pc, #24]	; (80098dc <SUBGRF_GetRssiInst+0x2c>)
 80098c2:	f7fb fb8c 	bl	8004fde <HAL_SUBGHZ_ExecGetCmd>
    rssi = -buf[0] >> 1;
 80098c6:	793b      	ldrb	r3, [r7, #4]
 80098c8:	425b      	negs	r3, r3
 80098ca:	105b      	asrs	r3, r3, #1
 80098cc:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80098ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	200005f0 	.word	0x200005f0

080098e0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80098ea:	f107 020c 	add.w	r2, r7, #12
 80098ee:	2302      	movs	r3, #2
 80098f0:	2113      	movs	r1, #19
 80098f2:	4810      	ldr	r0, [pc, #64]	; (8009934 <SUBGRF_GetRxBufferStatus+0x54>)
 80098f4:	f7fb fb73 	bl	8004fde <HAL_SUBGHZ_ExecGetCmd>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80098f8:	f7ff fde0 	bl	80094bc <SUBGRF_GetPacketType>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d10d      	bne.n	800991e <SUBGRF_GetRxBufferStatus+0x3e>
 8009902:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <SUBGRF_GetRxBufferStatus+0x58>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b01      	cmp	r3, #1
 800990a:	d108      	bne.n	800991e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800990c:	f240 7002 	movw	r0, #1794	; 0x702
 8009910:	f000 f87c 	bl	8009a0c <SUBGRF_ReadRegister>
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e002      	b.n	8009924 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800991e:	7b3a      	ldrb	r2, [r7, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009924:	7b7a      	ldrb	r2, [r7, #13]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	701a      	strb	r2, [r3, #0]
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	200005f0 	.word	0x200005f0
 8009938:	200001a6 	.word	0x200001a6

0800993c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009944:	f107 020c 	add.w	r2, r7, #12
 8009948:	2303      	movs	r3, #3
 800994a:	2114      	movs	r1, #20
 800994c:	4823      	ldr	r0, [pc, #140]	; (80099dc <SUBGRF_GetPacketStatus+0xa0>)
 800994e:	f7fb fb46 	bl	8004fde <HAL_SUBGHZ_ExecGetCmd>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009952:	f7ff fdb3 	bl	80094bc <SUBGRF_GetPacketType>
 8009956:	4603      	mov	r3, r0
 8009958:	461a      	mov	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <SUBGRF_GetPacketStatus+0x30>
 8009966:	2b01      	cmp	r3, #1
 8009968:	d013      	beq.n	8009992 <SUBGRF_GetPacketStatus+0x56>
 800996a:	e02a      	b.n	80099c2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800996c:	7b3a      	ldrb	r2, [r7, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009972:	7b7b      	ldrb	r3, [r7, #13]
 8009974:	425b      	negs	r3, r3
 8009976:	105b      	asrs	r3, r3, #1
 8009978:	b25a      	sxtb	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	425b      	negs	r3, r3
 8009982:	105b      	asrs	r3, r3, #1
 8009984:	b25a      	sxtb	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	609a      	str	r2, [r3, #8]
            break;
 8009990:	e020      	b.n	80099d4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009992:	7b3b      	ldrb	r3, [r7, #12]
 8009994:	425b      	negs	r3, r3
 8009996:	105b      	asrs	r3, r3, #1
 8009998:	b25a      	sxtb	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800999e:	7b7b      	ldrb	r3, [r7, #13]
 80099a0:	b25b      	sxtb	r3, r3
 80099a2:	3302      	adds	r3, #2
 80099a4:	109b      	asrs	r3, r3, #2
 80099a6:	b25a      	sxtb	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	425b      	negs	r3, r3
 80099b0:	105b      	asrs	r3, r3, #1
 80099b2:	b25a      	sxtb	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <SUBGRF_GetPacketStatus+0xa4>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	611a      	str	r2, [r3, #16]
            break;
 80099c0:	e008      	b.n	80099d4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80099c2:	2214      	movs	r2, #20
 80099c4:	2100      	movs	r1, #0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fcd6 	bl	800a378 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	220f      	movs	r2, #15
 80099d0:	701a      	strb	r2, [r3, #0]
            break;
 80099d2:	bf00      	nop
    }
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	200005f0 	.word	0x200005f0
 80099e0:	200001a8 	.word	0x200001a8

080099e4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	460a      	mov	r2, r1
 80099ee:	80fb      	strh	r3, [r7, #6]
 80099f0:	4613      	mov	r3, r2
 80099f2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80099f4:	1d7a      	adds	r2, r7, #5
 80099f6:	88f9      	ldrh	r1, [r7, #6]
 80099f8:	2301      	movs	r3, #1
 80099fa:	4803      	ldr	r0, [pc, #12]	; (8009a08 <SUBGRF_WriteRegister+0x24>)
 80099fc:	f7fb f9d0 	bl	8004da0 <HAL_SUBGHZ_WriteRegisters>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	200005f0 	.word	0x200005f0

08009a0c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009a16:	f107 020f 	add.w	r2, r7, #15
 8009a1a:	88f9      	ldrh	r1, [r7, #6]
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4804      	ldr	r0, [pc, #16]	; (8009a30 <SUBGRF_ReadRegister+0x24>)
 8009a20:	f7fb fa1d 	bl	8004e5e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	200005f0 	.word	0x200005f0

08009a34 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	80fb      	strh	r3, [r7, #6]
 8009a40:	4613      	mov	r3, r2
 8009a42:	80bb      	strh	r3, [r7, #4]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009a44:	88bb      	ldrh	r3, [r7, #4]
 8009a46:	88f9      	ldrh	r1, [r7, #6]
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	4803      	ldr	r0, [pc, #12]	; (8009a58 <SUBGRF_WriteRegisters+0x24>)
 8009a4c:	f7fb f9a8 	bl	8004da0 <HAL_SUBGHZ_WriteRegisters>
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	200005f0 	.word	0x200005f0

08009a5c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	6039      	str	r1, [r7, #0]
 8009a66:	80fb      	strh	r3, [r7, #6]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	80bb      	strh	r3, [r7, #4]
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009a6c:	88bb      	ldrh	r3, [r7, #4]
 8009a6e:	88f9      	ldrh	r1, [r7, #6]
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	4803      	ldr	r0, [pc, #12]	; (8009a80 <SUBGRF_ReadRegisters+0x24>)
 8009a74:	f7fb f9f3 	bl	8004e5e <HAL_SUBGHZ_ReadRegisters>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200005f0 	.word	0x200005f0

08009a84 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	6039      	str	r1, [r7, #0]
 8009a8e:	71fb      	strb	r3, [r7, #7]
 8009a90:	4613      	mov	r3, r2
 8009a92:	71bb      	strb	r3, [r7, #6]
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009a94:	79bb      	ldrb	r3, [r7, #6]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	79f9      	ldrb	r1, [r7, #7]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	4803      	ldr	r0, [pc, #12]	; (8009aac <SUBGRF_WriteBuffer+0x28>)
 8009a9e:	f7fb faf2 	bl	8005086 <HAL_SUBGHZ_WriteBuffer>
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200005f0 	.word	0x200005f0

08009ab0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6039      	str	r1, [r7, #0]
 8009aba:	71fb      	strb	r3, [r7, #7]
 8009abc:	4613      	mov	r3, r2
 8009abe:	71bb      	strb	r3, [r7, #6]
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009ac0:	79bb      	ldrb	r3, [r7, #6]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	79f9      	ldrb	r1, [r7, #7]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4803      	ldr	r0, [pc, #12]	; (8009ad8 <SUBGRF_ReadBuffer+0x28>)
 8009aca:	f7fb fb2f 	bl	800512c <HAL_SUBGHZ_ReadBuffer>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200005f0 	.word	0x200005f0

08009adc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	460a      	mov	r2, r1
 8009ae6:	71fb      	strb	r3, [r7, #7]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RFO_HP; //RD_EDIT: test RF Power
 8009aec:	2303      	movs	r3, #3
 8009aee:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009af0:	79bb      	ldrb	r3, [r7, #6]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d10d      	bne.n	8009b12 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d104      	bne.n	8009b06 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009afc:	2302      	movs	r3, #2
 8009afe:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009b00:	2004      	movs	r0, #4
 8009b02:	f000 f8df 	bl	8009cc4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d107      	bne.n	8009b1c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	73fb      	strb	r3, [r7, #15]
 8009b10:	e004      	b.n	8009b1c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009b12:	79bb      	ldrb	r3, [r7, #6]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f7 fff2 	bl	8001b08 <RBI_ConfigRFSwitch>
}
 8009b24:	bf00      	nop
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009b36:	2301      	movs	r3, #1
 8009b38:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009b3a:	f7f8 f841 	bl	8001bc0 <RBI_GetTxConfig>
 8009b3e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d016      	beq.n	8009b74 <SUBGRF_SetRfTxPower+0x48>
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	dc16      	bgt.n	8009b7a <SUBGRF_SetRfTxPower+0x4e>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <SUBGRF_SetRfTxPower+0x2e>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d00a      	beq.n	8009b6e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009b58:	e00f      	b.n	8009b7a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b5e:	2b0f      	cmp	r3, #15
 8009b60:	dd02      	ble.n	8009b68 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8009b62:	2302      	movs	r3, #2
 8009b64:	73fb      	strb	r3, [r7, #15]
            break;
 8009b66:	e009      	b.n	8009b7c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	73fb      	strb	r3, [r7, #15]
            break;
 8009b6c:	e006      	b.n	8009b7c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	73fb      	strb	r3, [r7, #15]
            break;
 8009b72:	e003      	b.n	8009b7c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009b74:	2302      	movs	r3, #2
 8009b76:	73fb      	strb	r3, [r7, #15]
            break;
 8009b78:	e000      	b.n	8009b7c <SUBGRF_SetRfTxPower+0x50>
            break;
 8009b7a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009b7c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	2202      	movs	r2, #2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff fca3 	bl	80094d0 <SUBGRF_SetTxParams>

    return paSelect;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
    return ( uint32_t ) RBI_GetWakeUpTime();
 8009b98:	f7f8 f819 	bl	8001bce <RBI_GetWakeUpTime>
 8009b9c:	4603      	mov	r3, r0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009bac:	4b03      	ldr	r3, [pc, #12]	; (8009bbc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	4798      	blx	r3
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	200001b0 	.word	0x200001b0

08009bc0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009bc8:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2002      	movs	r0, #2
 8009bce:	4798      	blx	r3
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	200001b0 	.word	0x200001b0

08009bdc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009be4:	4b03      	ldr	r3, [pc, #12]	; (8009bf4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2040      	movs	r0, #64	; 0x40
 8009bea:	4798      	blx	r3
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	200001b0 	.word	0x200001b0

08009bf8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d005      	beq.n	8009c1a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8009c0e:	e00a      	b.n	8009c26 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009c10:	4b07      	ldr	r3, [pc, #28]	; (8009c30 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2080      	movs	r0, #128	; 0x80
 8009c16:	4798      	blx	r3
            break;
 8009c18:	e005      	b.n	8009c26 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009c22:	4798      	blx	r3
            break;
 8009c24:	bf00      	nop
    }
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200001b0 	.word	0x200001b0

08009c34 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009c44:	4798      	blx	r3
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	200001b0 	.word	0x200001b0

08009c54 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009c5c:	4b03      	ldr	r3, [pc, #12]	; (8009c6c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2020      	movs	r0, #32
 8009c62:	4798      	blx	r3
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	200001b0 	.word	0x200001b0

08009c70 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009c78:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2004      	movs	r0, #4
 8009c7e:	4798      	blx	r3
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200001b0 	.word	0x200001b0

08009c8c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009c94:	4b03      	ldr	r3, [pc, #12]	; (8009ca4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2008      	movs	r0, #8
 8009c9a:	4798      	blx	r3
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	200001b0 	.word	0x200001b0

08009ca8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8009cb0:	4b03      	ldr	r3, [pc, #12]	; (8009cc0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2010      	movs	r0, #16
 8009cb6:	4798      	blx	r3
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	200001b0 	.word	0x200001b0

08009cc4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8009cce:	f7f7 ff8c 	bl	8001bea <RBI_IsDCDC>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d112      	bne.n	8009cfe <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009cd8:	f640 1023 	movw	r0, #2339	; 0x923
 8009cdc:	f7ff fe96 	bl	8009a0c <SUBGRF_ReadRegister>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	f023 0306 	bic.w	r3, r3, #6
 8009cea:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009cec:	7bfa      	ldrb	r2, [r7, #15]
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f640 1023 	movw	r0, #2339	; 0x923
 8009cfa:	f7ff fe73 	bl	80099e4 <SUBGRF_WriteRegister>
  }
}
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8009d0c:	2218      	movs	r2, #24
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4807      	ldr	r0, [pc, #28]	; (8009d30 <UTIL_ADV_TRACE_Init+0x28>)
 8009d12:	f000 fb31 	bl	800a378 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8009d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4805      	ldr	r0, [pc, #20]	; (8009d34 <UTIL_ADV_TRACE_Init+0x2c>)
 8009d1e:	f000 fb2b 	bl	800a378 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8009d22:	4b05      	ldr	r3, [pc, #20]	; (8009d38 <UTIL_ADV_TRACE_Init+0x30>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4805      	ldr	r0, [pc, #20]	; (8009d3c <UTIL_ADV_TRACE_Init+0x34>)
 8009d28:	4798      	blx	r3
 8009d2a:	4603      	mov	r3, r0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200001b4 	.word	0x200001b4
 8009d34:	200001cc 	.word	0x200001cc
 8009d38:	0800b34c 	.word	0x0800b34c
 8009d3c:	08009f89 	.word	0x08009f89

08009d40 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 8009d40:	b408      	push	{r3}
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b08d      	sub	sp, #52	; 0x34
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 8009d52:	2300      	movs	r3, #0
 8009d54:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8009d56:	4b38      	ldr	r3, [pc, #224]	; (8009e38 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8009d58:	7a1b      	ldrb	r3, [r3, #8]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d902      	bls.n	8009d68 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 8009d62:	f06f 0304 	mvn.w	r3, #4
 8009d66:	e05f      	b.n	8009e28 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8009d68:	4b33      	ldr	r3, [pc, #204]	; (8009e38 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d002      	beq.n	8009d7c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8009d76:	f06f 0305 	mvn.w	r3, #5
 8009d7a:	e055      	b.n	8009e28 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8009d7c:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8009d8a:	4b2b      	ldr	r3, [pc, #172]	; (8009e38 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f107 0116 	add.w	r1, r7, #22
 8009d92:	f107 0218 	add.w	r2, r7, #24
 8009d96:	4610      	mov	r0, r2
 8009d98:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8009d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009da8:	4824      	ldr	r0, [pc, #144]	; (8009e3c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8009daa:	f001 f88f 	bl	800aecc <tiny_vsnprintf_like>
 8009dae:	4603      	mov	r3, r0
 8009db0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 8009db2:	f000 f9ef 	bl	800a194 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8009db6:	8afa      	ldrh	r2, [r7, #22]
 8009db8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009dba:	4413      	add	r3, r2
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f107 0214 	add.w	r2, r7, #20
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 f967 	bl	800a098 <TRACE_AllocateBufer>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd0:	d026      	beq.n	8009e20 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009dd6:	e00f      	b.n	8009df8 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8009dd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dda:	8aba      	ldrh	r2, [r7, #20]
 8009ddc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009de0:	440b      	add	r3, r1
 8009de2:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8009de6:	4b16      	ldr	r3, [pc, #88]	; (8009e40 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 8009de8:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8009dea:	8abb      	ldrh	r3, [r7, #20]
 8009dec:	3301      	adds	r3, #1
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8009df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009df4:	3301      	adds	r3, #1
 8009df6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009df8:	8afb      	ldrh	r3, [r7, #22]
 8009dfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d3eb      	bcc.n	8009dd8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8009e00:	8abb      	ldrh	r3, [r7, #20]
 8009e02:	461a      	mov	r2, r3
 8009e04:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 8009e06:	18d0      	adds	r0, r2, r3
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e10:	f001 f85c 	bl	800aecc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8009e14:	f000 f9dc 	bl	800a1d0 <TRACE_UnLock>

    return TRACE_Send();
 8009e18:	f000 f832 	bl	8009e80 <TRACE_Send>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	e003      	b.n	8009e28 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8009e20:	f000 f9d6 	bl	800a1d0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8009e24:	f06f 0302 	mvn.w	r3, #2
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3734      	adds	r7, #52	; 0x34
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e32:	b001      	add	sp, #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	200001b4 	.word	0x200001b4
 8009e3c:	200003cc 	.word	0x200003cc
 8009e40:	200001cc 	.word	0x200001cc

08009e44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 8009e4c:	4a03      	ldr	r2, [pc, #12]	; (8009e5c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6053      	str	r3, [r2, #4]
}
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bc80      	pop	{r7}
 8009e5a:	4770      	bx	lr
 8009e5c:	200001b4 	.word	0x200001b4

08009e60 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	71fb      	strb	r3, [r7, #7]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8009e6a:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	7213      	strb	r3, [r2, #8]
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bc80      	pop	{r7}
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	200001b4 	.word	0x200001b4

08009e80 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 8009e86:	2300      	movs	r3, #0
 8009e88:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e92:	613b      	str	r3, [r7, #16]
  return(result);
 8009e94:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 8009e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e98:	b672      	cpsid	i
}
 8009e9a:	bf00      	nop
  
  if(TRACE_IsLocked() == 0u)
 8009e9c:	f000 f9b6 	bl	800a20c <TRACE_IsLocked>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d15d      	bne.n	8009f62 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8009ea6:	f000 f975 	bl	800a194 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8009eaa:	4b34      	ldr	r3, [pc, #208]	; (8009f7c <TRACE_Send+0xfc>)
 8009eac:	8a1a      	ldrh	r2, [r3, #16]
 8009eae:	4b33      	ldr	r3, [pc, #204]	; (8009f7c <TRACE_Send+0xfc>)
 8009eb0:	8a5b      	ldrh	r3, [r3, #18]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d04d      	beq.n	8009f52 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8009eb6:	4b31      	ldr	r3, [pc, #196]	; (8009f7c <TRACE_Send+0xfc>)
 8009eb8:	789b      	ldrb	r3, [r3, #2]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d117      	bne.n	8009eee <TRACE_Send+0x6e>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8009ebe:	4b2f      	ldr	r3, [pc, #188]	; (8009f7c <TRACE_Send+0xfc>)
 8009ec0:	881a      	ldrh	r2, [r3, #0]
 8009ec2:	4b2e      	ldr	r3, [pc, #184]	; (8009f7c <TRACE_Send+0xfc>)
 8009ec4:	8a1b      	ldrh	r3, [r3, #16]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	4b2c      	ldr	r3, [pc, #176]	; (8009f7c <TRACE_Send+0xfc>)
 8009ecc:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8009ece:	4b2b      	ldr	r3, [pc, #172]	; (8009f7c <TRACE_Send+0xfc>)
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8009ed4:	4b29      	ldr	r3, [pc, #164]	; (8009f7c <TRACE_Send+0xfc>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8009eda:	4b28      	ldr	r3, [pc, #160]	; (8009f7c <TRACE_Send+0xfc>)
 8009edc:	8a9b      	ldrh	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d105      	bne.n	8009eee <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8009ee2:	4b26      	ldr	r3, [pc, #152]	; (8009f7c <TRACE_Send+0xfc>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8009ee8:	4b24      	ldr	r3, [pc, #144]	; (8009f7c <TRACE_Send+0xfc>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8009eee:	4b23      	ldr	r3, [pc, #140]	; (8009f7c <TRACE_Send+0xfc>)
 8009ef0:	789b      	ldrb	r3, [r3, #2]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d115      	bne.n	8009f22 <TRACE_Send+0xa2>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8009ef6:	4b21      	ldr	r3, [pc, #132]	; (8009f7c <TRACE_Send+0xfc>)
 8009ef8:	8a5a      	ldrh	r2, [r3, #18]
 8009efa:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <TRACE_Send+0xfc>)
 8009efc:	8a1b      	ldrh	r3, [r3, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d908      	bls.n	8009f14 <TRACE_Send+0x94>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8009f02:	4b1e      	ldr	r3, [pc, #120]	; (8009f7c <TRACE_Send+0xfc>)
 8009f04:	8a5a      	ldrh	r2, [r3, #18]
 8009f06:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <TRACE_Send+0xfc>)
 8009f08:	8a1b      	ldrh	r3, [r3, #16]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	4b1b      	ldr	r3, [pc, #108]	; (8009f7c <TRACE_Send+0xfc>)
 8009f10:	829a      	strh	r2, [r3, #20]
 8009f12:	e006      	b.n	8009f22 <TRACE_Send+0xa2>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8009f14:	4b19      	ldr	r3, [pc, #100]	; (8009f7c <TRACE_Send+0xfc>)
 8009f16:	8a1b      	ldrh	r3, [r3, #16]
 8009f18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	4b17      	ldr	r3, [pc, #92]	; (8009f7c <TRACE_Send+0xfc>)
 8009f20:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8009f22:	4b16      	ldr	r3, [pc, #88]	; (8009f7c <TRACE_Send+0xfc>)
 8009f24:	8a1b      	ldrh	r3, [r3, #16]
 8009f26:	461a      	mov	r2, r3
 8009f28:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <TRACE_Send+0x100>)
 8009f2a:	4413      	add	r3, r2
 8009f2c:	61bb      	str	r3, [r7, #24]
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f383 8810 	msr	PRIMASK, r3
}
 8009f38:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 8009f3a:	f7f7 f837 	bl	8000fac <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8009f3e:	4b11      	ldr	r3, [pc, #68]	; (8009f84 <TRACE_Send+0x104>)
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	4a0e      	ldr	r2, [pc, #56]	; (8009f7c <TRACE_Send+0xfc>)
 8009f44:	8a92      	ldrh	r2, [r2, #20]
 8009f46:	4611      	mov	r1, r2
 8009f48:	69b8      	ldr	r0, [r7, #24]
 8009f4a:	4798      	blx	r3
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	77fb      	strb	r3, [r7, #31]
 8009f50:	e00d      	b.n	8009f6e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8009f52:	f000 f93d 	bl	800a1d0 <TRACE_UnLock>
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f383 8810 	msr	PRIMASK, r3
}
 8009f60:	e005      	b.n	8009f6e <TRACE_Send+0xee>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f383 8810 	msr	PRIMASK, r3
}
 8009f6c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 8009f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3720      	adds	r7, #32
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200001b4 	.word	0x200001b4
 8009f80:	200001cc 	.word	0x200001cc
 8009f84:	0800b34c 	.word	0x0800b34c

08009f88 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f90:	f3ef 8310 	mrs	r3, PRIMASK
 8009f94:	613b      	str	r3, [r7, #16]
  return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8009f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f9a:	b672      	cpsid	i
}
 8009f9c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8009f9e:	4b3b      	ldr	r3, [pc, #236]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fa0:	789b      	ldrb	r3, [r3, #2]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d106      	bne.n	8009fb4 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8009fa6:	4b39      	ldr	r3, [pc, #228]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 8009fac:	4b37      	ldr	r3, [pc, #220]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	821a      	strh	r2, [r3, #16]
 8009fb2:	e00a      	b.n	8009fca <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8009fb4:	4b35      	ldr	r3, [pc, #212]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fb6:	8a1a      	ldrh	r2, [r3, #16]
 8009fb8:	4b34      	ldr	r3, [pc, #208]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fba:	8a9b      	ldrh	r3, [r3, #20]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	4b31      	ldr	r3, [pc, #196]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fc8:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8009fca:	4b30      	ldr	r3, [pc, #192]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fcc:	8a1a      	ldrh	r2, [r3, #16]
 8009fce:	4b2f      	ldr	r3, [pc, #188]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fd0:	8a5b      	ldrh	r3, [r3, #18]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d04b      	beq.n	800a06e <TRACE_TxCpltCallback+0xe6>
 8009fd6:	4b2d      	ldr	r3, [pc, #180]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fd8:	8adb      	ldrh	r3, [r3, #22]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d147      	bne.n	800a06e <TRACE_TxCpltCallback+0xe6>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8009fde:	4b2b      	ldr	r3, [pc, #172]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fe0:	789b      	ldrb	r3, [r3, #2]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d117      	bne.n	800a016 <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8009fe6:	4b29      	ldr	r3, [pc, #164]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fe8:	881a      	ldrh	r2, [r3, #0]
 8009fea:	4b28      	ldr	r3, [pc, #160]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009fec:	8a1b      	ldrh	r3, [r3, #16]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	4b26      	ldr	r3, [pc, #152]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009ff4:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8009ff6:	4b25      	ldr	r3, [pc, #148]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 8009ffc:	4b23      	ldr	r3, [pc, #140]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800a002:	4b22      	ldr	r3, [pc, #136]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a004:	8a9b      	ldrh	r3, [r3, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a00a:	4b20      	ldr	r3, [pc, #128]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a010:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a012:	2200      	movs	r2, #0
 800a014:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800a016:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a018:	789b      	ldrb	r3, [r3, #2]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d115      	bne.n	800a04a <TRACE_TxCpltCallback+0xc2>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a01e:	4b1b      	ldr	r3, [pc, #108]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a020:	8a5a      	ldrh	r2, [r3, #18]
 800a022:	4b1a      	ldr	r3, [pc, #104]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a024:	8a1b      	ldrh	r3, [r3, #16]
 800a026:	429a      	cmp	r2, r3
 800a028:	d908      	bls.n	800a03c <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800a02a:	4b18      	ldr	r3, [pc, #96]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a02c:	8a5a      	ldrh	r2, [r3, #18]
 800a02e:	4b17      	ldr	r3, [pc, #92]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a030:	8a1b      	ldrh	r3, [r3, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	b29a      	uxth	r2, r3
 800a036:	4b15      	ldr	r3, [pc, #84]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a038:	829a      	strh	r2, [r3, #20]
 800a03a:	e006      	b.n	800a04a <TRACE_TxCpltCallback+0xc2>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a03c:	4b13      	ldr	r3, [pc, #76]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a03e:	8a1b      	ldrh	r3, [r3, #16]
 800a040:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a044:	b29a      	uxth	r2, r3
 800a046:	4b11      	ldr	r3, [pc, #68]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a048:	829a      	strh	r2, [r3, #20]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f383 8810 	msr	PRIMASK, r3
}
 800a054:	bf00      	nop
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <TRACE_TxCpltCallback+0x108>)
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	4a0c      	ldr	r2, [pc, #48]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a05c:	8a12      	ldrh	r2, [r2, #16]
 800a05e:	4611      	mov	r1, r2
 800a060:	4a0c      	ldr	r2, [pc, #48]	; (800a094 <TRACE_TxCpltCallback+0x10c>)
 800a062:	440a      	add	r2, r1
 800a064:	4909      	ldr	r1, [pc, #36]	; (800a08c <TRACE_TxCpltCallback+0x104>)
 800a066:	8a89      	ldrh	r1, [r1, #20]
 800a068:	4610      	mov	r0, r2
 800a06a:	4798      	blx	r3
 800a06c:	e00a      	b.n	800a084 <TRACE_TxCpltCallback+0xfc>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 800a06e:	f7f6 ffa5 	bl	8000fbc <UTIL_ADV_TRACE_PostSendHook>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f383 8810 	msr	PRIMASK, r3
}
 800a07c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 800a07e:	f000 f8a7 	bl	800a1d0 <TRACE_UnLock>
  }
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200001b4 	.word	0x200001b4
 800a090:	0800b34c 	.word	0x0800b34c
 800a094:	200001cc 	.word	0x200001cc

0800a098 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	6039      	str	r1, [r7, #0]
 800a0a2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800a0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0a8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0b0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800a0b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b4:	b672      	cpsid	i
}
 800a0b6:	bf00      	nop

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800a0b8:	4b35      	ldr	r3, [pc, #212]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0ba:	8a5a      	ldrh	r2, [r3, #18]
 800a0bc:	4b34      	ldr	r3, [pc, #208]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0be:	8a1b      	ldrh	r3, [r3, #16]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d11b      	bne.n	800a0fc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800a0c4:	4b32      	ldr	r3, [pc, #200]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0c6:	8a5b      	ldrh	r3, [r3, #18]
 800a0c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a0cc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800a0ce:	88fa      	ldrh	r2, [r7, #6]
 800a0d0:	8afb      	ldrh	r3, [r7, #22]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d33a      	bcc.n	800a14c <TRACE_AllocateBufer+0xb4>
 800a0d6:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0d8:	8a1b      	ldrh	r3, [r3, #16]
 800a0da:	88fa      	ldrh	r2, [r7, #6]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d235      	bcs.n	800a14c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800a0e0:	4b2b      	ldr	r3, [pc, #172]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800a0e6:	4b2a      	ldr	r3, [pc, #168]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0e8:	8a5a      	ldrh	r2, [r3, #18]
 800a0ea:	4b29      	ldr	r3, [pc, #164]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0ec:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800a0ee:	4b28      	ldr	r3, [pc, #160]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0f0:	8a1b      	ldrh	r3, [r3, #16]
 800a0f2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800a0f4:	4b26      	ldr	r3, [pc, #152]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	825a      	strh	r2, [r3, #18]
 800a0fa:	e027      	b.n	800a14c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a0fc:	4b24      	ldr	r3, [pc, #144]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a0fe:	8a5a      	ldrh	r2, [r3, #18]
 800a100:	4b23      	ldr	r3, [pc, #140]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a102:	8a1b      	ldrh	r3, [r3, #16]
 800a104:	429a      	cmp	r2, r3
 800a106:	d91b      	bls.n	800a140 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800a108:	4b21      	ldr	r3, [pc, #132]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a10a:	8a5b      	ldrh	r3, [r3, #18]
 800a10c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a110:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800a112:	88fa      	ldrh	r2, [r7, #6]
 800a114:	8afb      	ldrh	r3, [r7, #22]
 800a116:	429a      	cmp	r2, r3
 800a118:	d318      	bcc.n	800a14c <TRACE_AllocateBufer+0xb4>
 800a11a:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a11c:	8a1b      	ldrh	r3, [r3, #16]
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	429a      	cmp	r2, r3
 800a122:	d213      	bcs.n	800a14c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800a124:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a126:	2201      	movs	r2, #1
 800a128:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a12c:	8a5a      	ldrh	r2, [r3, #18]
 800a12e:	4b18      	ldr	r3, [pc, #96]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a130:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800a132:	4b17      	ldr	r3, [pc, #92]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a134:	8a1b      	ldrh	r3, [r3, #16]
 800a136:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	825a      	strh	r2, [r3, #18]
 800a13e:	e005      	b.n	800a14c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800a140:	4b13      	ldr	r3, [pc, #76]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a142:	8a1a      	ldrh	r2, [r3, #16]
 800a144:	4b12      	ldr	r3, [pc, #72]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a146:	8a5b      	ldrh	r3, [r3, #18]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 800a14c:	8afa      	ldrh	r2, [r7, #22]
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	429a      	cmp	r2, r3
 800a152:	d90f      	bls.n	800a174 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800a154:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a156:	8a5a      	ldrh	r2, [r3, #18]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a15c:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a15e:	8a5a      	ldrh	r2, [r3, #18]
 800a160:	88fb      	ldrh	r3, [r7, #6]
 800a162:	4413      	add	r3, r2
 800a164:	b29b      	uxth	r3, r3
 800a166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	4b08      	ldr	r3, [pc, #32]	; (800a190 <TRACE_AllocateBufer+0xf8>)
 800a16e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	82bb      	strh	r3, [r7, #20]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f383 8810 	msr	PRIMASK, r3
}
 800a17e:	bf00      	nop
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 800a180:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800a184:	4618      	mov	r0, r3
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	200001b4 	.word	0x200001b4

0800a194 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a19a:	f3ef 8310 	mrs	r3, PRIMASK
 800a19e:	607b      	str	r3, [r7, #4]
  return(result);
 800a1a0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800a1a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a4:	b672      	cpsid	i
}
 800a1a6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800a1a8:	4b08      	ldr	r3, [pc, #32]	; (800a1cc <TRACE_Lock+0x38>)
 800a1aa:	8adb      	ldrh	r3, [r3, #22]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <TRACE_Lock+0x38>)
 800a1b2:	82da      	strh	r2, [r3, #22]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f383 8810 	msr	PRIMASK, r3
}
 800a1be:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	200001b4 	.word	0x200001b4

0800a1d0 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1da:	607b      	str	r3, [r7, #4]
  return(result);
 800a1dc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800a1de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1e0:	b672      	cpsid	i
}
 800a1e2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800a1e4:	4b08      	ldr	r3, [pc, #32]	; (800a208 <TRACE_UnLock+0x38>)
 800a1e6:	8adb      	ldrh	r3, [r3, #22]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	4b06      	ldr	r3, [pc, #24]	; (800a208 <TRACE_UnLock+0x38>)
 800a1ee:	82da      	strh	r2, [r3, #22]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	f383 8810 	msr	PRIMASK, r3
}
 800a1fa:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800a1fc:	bf00      	nop
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	200001b4 	.word	0x200001b4

0800a20c <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <TRACE_IsLocked+0x1c>)
 800a212:	8adb      	ldrh	r3, [r3, #22]
 800a214:	2b00      	cmp	r3, #0
 800a216:	bf14      	ite	ne
 800a218:	2301      	movne	r3, #1
 800a21a:	2300      	moveq	r3, #0
 800a21c:	b2db      	uxtb	r3, r3
}
 800a21e:	4618      	mov	r0, r3
 800a220:	46bd      	mov	sp, r7
 800a222:	bc80      	pop	{r7}
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	200001b4 	.word	0x200001b4

0800a22c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <UTIL_LPM_Init+0x18>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a236:	4b04      	ldr	r3, [pc, #16]	; (800a248 <UTIL_LPM_Init+0x1c>)
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a23c:	bf00      	nop
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr
 800a244:	200004cc 	.word	0x200004cc
 800a248:	200004d0 	.word	0x200004d0

0800a24c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a258:	f3ef 8310 	mrs	r3, PRIMASK
 800a25c:	613b      	str	r3, [r7, #16]
  return(result);
 800a25e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a262:	b672      	cpsid	i
}
 800a264:	bf00      	nop
  
  switch( state )
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <UTIL_LPM_SetStopMode+0x32>
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10e      	bne.n	800a28e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <UTIL_LPM_SetStopMode+0x5c>)
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4313      	orrs	r3, r2
 800a278:	4a0b      	ldr	r2, [pc, #44]	; (800a2a8 <UTIL_LPM_SetStopMode+0x5c>)
 800a27a:	6013      	str	r3, [r2, #0]
      break;
 800a27c:	e008      	b.n	800a290 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	43da      	mvns	r2, r3
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <UTIL_LPM_SetStopMode+0x5c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4013      	ands	r3, r2
 800a288:	4a07      	ldr	r2, [pc, #28]	; (800a2a8 <UTIL_LPM_SetStopMode+0x5c>)
 800a28a:	6013      	str	r3, [r2, #0]
      break;
 800a28c:	e000      	b.n	800a290 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a28e:	bf00      	nop
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f383 8810 	msr	PRIMASK, r3
}
 800a29a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bc80      	pop	{r7}
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	200004cc 	.word	0x200004cc

0800a2ac <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2bc:	613b      	str	r3, [r7, #16]
  return(result);
 800a2be:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a2c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2c2:	b672      	cpsid	i
}
 800a2c4:	bf00      	nop
  
  switch(state)
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d008      	beq.n	800a2de <UTIL_LPM_SetOffMode+0x32>
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d10e      	bne.n	800a2ee <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a2d0:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <UTIL_LPM_SetOffMode+0x5c>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	4a0b      	ldr	r2, [pc, #44]	; (800a308 <UTIL_LPM_SetOffMode+0x5c>)
 800a2da:	6013      	str	r3, [r2, #0]
      break;
 800a2dc:	e008      	b.n	800a2f0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	43da      	mvns	r2, r3
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <UTIL_LPM_SetOffMode+0x5c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	4a07      	ldr	r2, [pc, #28]	; (800a308 <UTIL_LPM_SetOffMode+0x5c>)
 800a2ea:	6013      	str	r3, [r2, #0]
      break;
 800a2ec:	e000      	b.n	800a2f0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a2ee:	bf00      	nop
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f383 8810 	msr	PRIMASK, r3
}
 800a2fa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a2fc:	bf00      	nop
 800a2fe:	371c      	adds	r7, #28
 800a300:	46bd      	mov	sp, r7
 800a302:	bc80      	pop	{r7}
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	200004d0 	.word	0x200004d0

0800a30c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a312:	f3ef 8310 	mrs	r3, PRIMASK
 800a316:	60bb      	str	r3, [r7, #8]
  return(result);
 800a318:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a31a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a31c:	b672      	cpsid	i
}
 800a31e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a320:	4b12      	ldr	r3, [pc, #72]	; (800a36c <UTIL_LPM_EnterLowPower+0x60>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a328:	4b11      	ldr	r3, [pc, #68]	; (800a370 <UTIL_LPM_EnterLowPower+0x64>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a32e:	4b10      	ldr	r3, [pc, #64]	; (800a370 <UTIL_LPM_EnterLowPower+0x64>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	4798      	blx	r3
 800a334:	e010      	b.n	800a358 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <UTIL_LPM_EnterLowPower+0x68>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d006      	beq.n	800a34c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a33e:	4b0c      	ldr	r3, [pc, #48]	; (800a370 <UTIL_LPM_EnterLowPower+0x64>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a344:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <UTIL_LPM_EnterLowPower+0x64>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	4798      	blx	r3
 800a34a:	e005      	b.n	800a358 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a34c:	4b08      	ldr	r3, [pc, #32]	; (800a370 <UTIL_LPM_EnterLowPower+0x64>)
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a352:	4b07      	ldr	r3, [pc, #28]	; (800a370 <UTIL_LPM_EnterLowPower+0x64>)
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	4798      	blx	r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f383 8810 	msr	PRIMASK, r3
}
 800a362:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	200004cc 	.word	0x200004cc
 800a370:	0800b2f4 	.word	0x0800b2f4
 800a374:	200004d0 	.word	0x200004d0

0800a378 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
 800a384:	4613      	mov	r3, r2
 800a386:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a38c:	e004      	b.n	800a398 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	60fa      	str	r2, [r7, #12]
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a398:	883b      	ldrh	r3, [r7, #0]
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	803a      	strh	r2, [r7, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f5      	bne.n	800a38e <UTIL_MEM_set_8+0x16>
  }
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bc80      	pop	{r7}
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08c      	sub	sp, #48	; 0x30
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a3b8:	4b67      	ldr	r3, [pc, #412]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a3be:	4b66      	ldr	r3, [pc, #408]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	4a64      	ldr	r2, [pc, #400]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a3c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a3ca:	e083      	b.n	800a4d4 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a3d0:	e002      	b.n	800a3d8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a3d8:	4a60      	ldr	r2, [pc, #384]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a3e0:	4b5f      	ldr	r3, [pc, #380]	; (800a560 <UTIL_SEQ_Run+0x1b0>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	401a      	ands	r2, r3
 800a3e6:	4b5c      	ldr	r3, [pc, #368]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0f0      	beq.n	800a3d2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a3f0:	4a5a      	ldr	r2, [pc, #360]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a3f8:	4b59      	ldr	r3, [pc, #356]	; (800a560 <UTIL_SEQ_Run+0x1b0>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	401a      	ands	r2, r3
 800a3fe:	4b56      	ldr	r3, [pc, #344]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4013      	ands	r3, r2
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a406:	4a55      	ldr	r2, [pc, #340]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	4413      	add	r3, r2
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	4013      	ands	r3, r2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a418:	4a50      	ldr	r2, [pc, #320]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	00db      	lsls	r3, r3, #3
 800a41e:	4413      	add	r3, r2
 800a420:	f04f 32ff 	mov.w	r2, #4294967295
 800a424:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a426:	4a4d      	ldr	r2, [pc, #308]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	4413      	add	r3, r2
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	4013      	ands	r3, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f000 f8f9 	bl	800a62c <SEQ_BitPosition>
 800a43a:	4603      	mov	r3, r0
 800a43c:	461a      	mov	r2, r3
 800a43e:	4b49      	ldr	r3, [pc, #292]	; (800a564 <UTIL_SEQ_Run+0x1b4>)
 800a440:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a442:	4a46      	ldr	r2, [pc, #280]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4413      	add	r3, r2
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	4b45      	ldr	r3, [pc, #276]	; (800a564 <UTIL_SEQ_Run+0x1b4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2101      	movs	r1, #1
 800a452:	fa01 f303 	lsl.w	r3, r1, r3
 800a456:	43db      	mvns	r3, r3
 800a458:	401a      	ands	r2, r3
 800a45a:	4940      	ldr	r1, [pc, #256]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	440b      	add	r3, r1
 800a462:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a464:	f3ef 8310 	mrs	r3, PRIMASK
 800a468:	61bb      	str	r3, [r7, #24]
  return(result);
 800a46a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a46c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a46e:	b672      	cpsid	i
}
 800a470:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a472:	4b3c      	ldr	r3, [pc, #240]	; (800a564 <UTIL_SEQ_Run+0x1b4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2201      	movs	r2, #1
 800a478:	fa02 f303 	lsl.w	r3, r2, r3
 800a47c:	43da      	mvns	r2, r3
 800a47e:	4b3a      	ldr	r3, [pc, #232]	; (800a568 <UTIL_SEQ_Run+0x1b8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4013      	ands	r3, r2
 800a484:	4a38      	ldr	r2, [pc, #224]	; (800a568 <UTIL_SEQ_Run+0x1b8>)
 800a486:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a488:	2302      	movs	r3, #2
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a48c:	e013      	b.n	800a4b6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a490:	3b01      	subs	r3, #1
 800a492:	4a32      	ldr	r2, [pc, #200]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a494:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a498:	4b32      	ldr	r3, [pc, #200]	; (800a564 <UTIL_SEQ_Run+0x1b4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2201      	movs	r2, #1
 800a49e:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a2:	43da      	mvns	r2, r3
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	400a      	ands	r2, r1
 800a4aa:	492c      	ldr	r1, [pc, #176]	; (800a55c <UTIL_SEQ_Run+0x1ac>)
 800a4ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e8      	bne.n	800a48e <UTIL_SEQ_Run+0xde>
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f383 8810 	msr	PRIMASK, r3
}
 800a4c6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a4c8:	4b26      	ldr	r3, [pc, #152]	; (800a564 <UTIL_SEQ_Run+0x1b4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a27      	ldr	r2, [pc, #156]	; (800a56c <UTIL_SEQ_Run+0x1bc>)
 800a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d2:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <UTIL_SEQ_Run+0x1b8>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	4b21      	ldr	r3, [pc, #132]	; (800a560 <UTIL_SEQ_Run+0x1b0>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	401a      	ands	r2, r3
 800a4de:	4b1e      	ldr	r3, [pc, #120]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <UTIL_SEQ_Run+0x148>
 800a4e8:	4b21      	ldr	r3, [pc, #132]	; (800a570 <UTIL_SEQ_Run+0x1c0>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	4b21      	ldr	r3, [pc, #132]	; (800a574 <UTIL_SEQ_Run+0x1c4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f43f af6a 	beq.w	800a3cc <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a4f8:	4b1a      	ldr	r3, [pc, #104]	; (800a564 <UTIL_SEQ_Run+0x1b4>)
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a500:	f000 f888 	bl	800a614 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a504:	f3ef 8310 	mrs	r3, PRIMASK
 800a508:	613b      	str	r3, [r7, #16]
  return(result);
 800a50a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a50c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a50e:	b672      	cpsid	i
}
 800a510:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <UTIL_SEQ_Run+0x1b8>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	4b12      	ldr	r3, [pc, #72]	; (800a560 <UTIL_SEQ_Run+0x1b0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	401a      	ands	r2, r3
 800a51c:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4013      	ands	r3, r2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d108      	bne.n	800a538 <UTIL_SEQ_Run+0x188>
 800a526:	4b12      	ldr	r3, [pc, #72]	; (800a570 <UTIL_SEQ_Run+0x1c0>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	4b12      	ldr	r3, [pc, #72]	; (800a574 <UTIL_SEQ_Run+0x1c4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4013      	ands	r3, r2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800a534:	f7f6 fcc8 	bl	8000ec8 <UTIL_SEQ_Idle>
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f383 8810 	msr	PRIMASK, r3
}
 800a542:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a544:	f000 f86c 	bl	800a620 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a548:	4a03      	ldr	r2, [pc, #12]	; (800a558 <UTIL_SEQ_Run+0x1a8>)
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	6013      	str	r3, [r2, #0]

  return;
 800a54e:	bf00      	nop
}
 800a550:	3730      	adds	r7, #48	; 0x30
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	2000002c 	.word	0x2000002c
 800a55c:	20000564 	.word	0x20000564
 800a560:	20000028 	.word	0x20000028
 800a564:	200004e0 	.word	0x200004e0
 800a568:	200004d4 	.word	0x200004d4
 800a56c:	200004e4 	.word	0x200004e4
 800a570:	200004d8 	.word	0x200004d8
 800a574:	200004dc 	.word	0x200004dc

0800a578 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a584:	f3ef 8310 	mrs	r3, PRIMASK
 800a588:	617b      	str	r3, [r7, #20]
  return(result);
 800a58a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a58c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a58e:	b672      	cpsid	i
}
 800a590:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f84a 	bl	800a62c <SEQ_BitPosition>
 800a598:	4603      	mov	r3, r0
 800a59a:	4619      	mov	r1, r3
 800a59c:	4a06      	ldr	r2, [pc, #24]	; (800a5b8 <UTIL_SEQ_RegTask+0x40>)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f383 8810 	msr	PRIMASK, r3
}
 800a5ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a5b0:	bf00      	nop
}
 800a5b2:	3720      	adds	r7, #32
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	200004e4 	.word	0x200004e4

0800a5bc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a5ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d0:	b672      	cpsid	i
}
 800a5d2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a5d4:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <UTIL_SEQ_SetTask+0x50>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	4a0b      	ldr	r2, [pc, #44]	; (800a60c <UTIL_SEQ_SetTask+0x50>)
 800a5de:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a5e0:	4a0b      	ldr	r2, [pc, #44]	; (800a610 <UTIL_SEQ_SetTask+0x54>)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	4908      	ldr	r1, [pc, #32]	; (800a610 <UTIL_SEQ_SetTask+0x54>)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f383 8810 	msr	PRIMASK, r3
}
 800a5fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a600:	bf00      	nop
}
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	200004d4 	.word	0x200004d4
 800a610:	20000564 	.word	0x20000564

0800a614 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a614:	b480      	push	{r7}
 800a616:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a618:	bf00      	nop
}
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bc80      	pop	{r7}
 800a61e:	4770      	bx	lr

0800a620 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a624:	bf00      	nop
}
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr

0800a62c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	0c1b      	lsrs	r3, r3, #16
 800a63c:	041b      	lsls	r3, r3, #16
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <SEQ_BitPosition+0x20>
 800a642:	2310      	movs	r3, #16
 800a644:	73fb      	strb	r3, [r7, #15]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <SEQ_BitPosition+0x36>
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	3308      	adds	r3, #8
 800a65a:	73fb      	strb	r3, [r7, #15]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	021b      	lsls	r3, r3, #8
 800a660:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d105      	bne.n	800a678 <SEQ_BitPosition+0x4c>
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	3304      	adds	r3, #4
 800a670:	73fb      	strb	r3, [r7, #15]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	0f1b      	lsrs	r3, r3, #28
 800a67c:	4a06      	ldr	r2, [pc, #24]	; (800a698 <SEQ_BitPosition+0x6c>)
 800a67e:	5cd2      	ldrb	r2, [r2, r3]
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	4413      	add	r3, r2
 800a684:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	f1c3 031f 	rsb	r3, r3, #31
 800a68c:	b2db      	uxtb	r3, r3
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	bc80      	pop	{r7}
 800a696:	4770      	bx	lr
 800a698:	0800b544 	.word	0x0800b544

0800a69c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800a69c:	b082      	sub	sp, #8
 800a69e:	b480      	push	{r7}
 800a6a0:	b087      	sub	sp, #28
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	1d38      	adds	r0, r7, #4
 800a6a8:	e880 0006 	stmia.w	r0, {r1, r2}
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	4413      	add	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a6be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	4413      	add	r3, r2
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	b21b      	sxth	r3, r3
 800a6d0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800a6d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6da:	db0a      	blt.n	800a6f2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800a6e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	b21b      	sxth	r3, r3
 800a6f0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f107 0310 	add.w	r3, r7, #16
 800a6fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	b002      	add	sp, #8
 800a70c:	4770      	bx	lr
	...

0800a710 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a718:	2300      	movs	r3, #0
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	2300      	movs	r3, #0
 800a71e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	2300      	movs	r3, #0
 800a726:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a728:	4b14      	ldr	r3, [pc, #80]	; (800a77c <SysTimeGet+0x6c>)
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	f107 0218 	add.w	r2, r7, #24
 800a730:	3204      	adds	r2, #4
 800a732:	4610      	mov	r0, r2
 800a734:	4798      	blx	r3
 800a736:	4603      	mov	r3, r0
 800a738:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a73a:	4b10      	ldr	r3, [pc, #64]	; (800a77c <SysTimeGet+0x6c>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	4798      	blx	r3
 800a740:	4603      	mov	r3, r0
 800a742:	b21b      	sxth	r3, r3
 800a744:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a746:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <SysTimeGet+0x6c>)
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	4798      	blx	r3
 800a74c:	4603      	mov	r3, r0
 800a74e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800a750:	f107 0010 	add.w	r0, r7, #16
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	f107 0208 	add.w	r2, r7, #8
 800a75e:	ca06      	ldmia	r2, {r1, r2}
 800a760:	f7ff ff9c 	bl	800a69c <SysTimeAdd>

  return sysTime;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	461a      	mov	r2, r3
 800a768:	f107 0310 	add.w	r3, r7, #16
 800a76c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a770:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	0800b338 	.word	0x0800b338

0800a780 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <UTIL_TIMER_Init+0x18>)
 800a786:	2200      	movs	r2, #0
 800a788:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800a78a:	4b04      	ldr	r3, [pc, #16]	; (800a79c <UTIL_TIMER_Init+0x1c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4798      	blx	r3
 800a790:	4603      	mov	r3, r0
}
 800a792:	4618      	mov	r0, r3
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20000574 	.word	0x20000574
 800a79c:	0800b30c 	.word	0x0800b30c

0800a7a0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d023      	beq.n	800a7fe <UTIL_TIMER_Create+0x5e>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d020      	beq.n	800a7fe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a7c2:	4b11      	ldr	r3, [pc, #68]	; (800a808 <UTIL_TIMER_Create+0x68>)
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	68b8      	ldr	r0, [r7, #8]
 800a7c8:	4798      	blx	r3
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	79fa      	ldrb	r2, [r7, #7]
 800a7f2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e000      	b.n	800a800 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800a7fe:	2301      	movs	r3, #1
  }
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	0800b30c 	.word	0x0800b30c

0800a80c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d056      	beq.n	800a8ce <UTIL_TIMER_Start+0xc2>
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f9a9 	bl	800ab78 <TimerExists>
 800a826:	4603      	mov	r3, r0
 800a828:	f083 0301 	eor.w	r3, r3, #1
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d04d      	beq.n	800a8ce <UTIL_TIMER_Start+0xc2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7a5b      	ldrb	r3, [r3, #9]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d149      	bne.n	800a8ce <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a83a:	f3ef 8310 	mrs	r3, PRIMASK
 800a83e:	613b      	str	r3, [r7, #16]
  return(result);
 800a840:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a844:	b672      	cpsid	i
}
 800a846:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a84e:	4b24      	ldr	r3, [pc, #144]	; (800a8e0 <UTIL_TIMER_Start+0xd4>)
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	4798      	blx	r3
 800a854:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a856:	6a3a      	ldr	r2, [r7, #32]
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d201      	bcs.n	800a862 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a3a      	ldr	r2, [r7, #32]
 800a866:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a87a:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <UTIL_TIMER_Start+0xd8>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a882:	4b17      	ldr	r3, [pc, #92]	; (800a8e0 <UTIL_TIMER_Start+0xd4>)
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9eb 	bl	800ac64 <TimerInsertNewHeadTimer>
 800a88e:	e017      	b.n	800a8c0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a890:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <UTIL_TIMER_Start+0xd4>)
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	4798      	blx	r3
 800a896:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	441a      	add	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4b0e      	ldr	r3, [pc, #56]	; (800a8e4 <UTIL_TIMER_Start+0xd8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d203      	bcs.n	800a8ba <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f9d6 	bl	800ac64 <TimerInsertNewHeadTimer>
 800a8b8:	e002      	b.n	800a8c0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9a2 	bl	800ac04 <TimerInsertTimer>
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ca:	bf00      	nop
  {
 800a8cc:	e002      	b.n	800a8d4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3728      	adds	r7, #40	; 0x28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0800b30c 	.word	0x0800b30c
 800a8e4:	20000574 	.word	0x20000574

0800a8e8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d05b      	beq.n	800a9b2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800a900:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a904:	b672      	cpsid	i
}
 800a906:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a908:	4b2d      	ldr	r3, [pc, #180]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a90e:	4b2c      	ldr	r3, [pc, #176]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a91a:	4b29      	ldr	r3, [pc, #164]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d041      	beq.n	800a9a6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a928:	4b25      	ldr	r3, [pc, #148]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d134      	bne.n	800a99c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a932:	4b23      	ldr	r3, [pc, #140]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2200      	movs	r2, #0
 800a938:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a93a:	4b21      	ldr	r3, [pc, #132]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00a      	beq.n	800a95a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a944:	4b1e      	ldr	r3, [pc, #120]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	4a1d      	ldr	r2, [pc, #116]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a94c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a94e:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f92c 	bl	800abb0 <TimerSetTimeout>
 800a958:	e023      	b.n	800a9a2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a95a:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <UTIL_TIMER_Stop+0xdc>)
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	4798      	blx	r3
            TimerListHead = NULL;
 800a960:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <UTIL_TIMER_Stop+0xd8>)
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e01c      	b.n	800a9a2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d110      	bne.n	800a992 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a984:	e00d      	b.n	800a9a2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	615a      	str	r2, [r3, #20]
            break;
 800a990:	e007      	b.n	800a9a2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e2      	bne.n	800a968 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	77fb      	strb	r3, [r7, #31]
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f383 8810 	msr	PRIMASK, r3
}
 800a9b0:	e001      	b.n	800a9b6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a9b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20000574 	.word	0x20000574
 800a9c4:	0800b30c 	.word	0x0800b30c

0800a9c8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d102      	bne.n	800a9e2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	73fb      	strb	r3, [r7, #15]
 800a9e0:	e014      	b.n	800aa0c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <UTIL_TIMER_SetPeriod+0x50>)
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	6838      	ldr	r0, [r7, #0]
 800a9e8:	4798      	blx	r3
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f8c1 	bl	800ab78 <TimerExists>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d007      	beq.n	800aa0c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7ff ff73 	bl	800a8e8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff ff02 	bl	800a80c <UTIL_TIMER_Start>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	0800b30c 	.word	0x0800b30c

0800aa1c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa22:	f3ef 8310 	mrs	r3, PRIMASK
 800aa26:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa28:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800aa2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa2c:	b672      	cpsid	i
}
 800aa2e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800aa30:	4b38      	ldr	r3, [pc, #224]	; (800ab14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	4798      	blx	r3
 800aa36:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800aa38:	4b36      	ldr	r3, [pc, #216]	; (800ab14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	4798      	blx	r3
 800aa3e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800aa48:	4b33      	ldr	r3, [pc, #204]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d037      	beq.n	800aac0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800aa50:	4b31      	ldr	r3, [pc, #196]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d206      	bcs.n	800aa6e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	1ad2      	subs	r2, r2, r3
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e002      	b.n	800aa74 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1ea      	bne.n	800aa56 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800aa80:	e01e      	b.n	800aac0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800aa82:	4b25      	ldr	r3, [pc, #148]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800aa88:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	4a22      	ldr	r2, [pc, #136]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aa90:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	2200      	movs	r2, #0
 800aa96:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	6912      	ldr	r2, [r2, #16]
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	7adb      	ldrb	r3, [r3, #11]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d106      	bne.n	800aac0 <UTIL_TIMER_IRQ_Handler+0xa4>
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	7a9b      	ldrb	r3, [r3, #10]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d102      	bne.n	800aac0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800aaba:	69f8      	ldr	r0, [r7, #28]
 800aabc:	f7ff fea6 	bl	800a80c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800aac0:	4b15      	ldr	r3, [pc, #84]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00d      	beq.n	800aae4 <UTIL_TIMER_IRQ_Handler+0xc8>
 800aac8:	4b13      	ldr	r3, [pc, #76]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0d7      	beq.n	800aa82 <UTIL_TIMER_IRQ_Handler+0x66>
 800aad2:	4b11      	ldr	r3, [pc, #68]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681c      	ldr	r4, [r3, #0]
 800aad8:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	4798      	blx	r3
 800aade:	4603      	mov	r3, r0
 800aae0:	429c      	cmp	r4, r3
 800aae2:	d3ce      	bcc.n	800aa82 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800aae4:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d009      	beq.n	800ab00 <UTIL_TIMER_IRQ_Handler+0xe4>
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	7a1b      	ldrb	r3, [r3, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800aaf6:	4b08      	ldr	r3, [pc, #32]	; (800ab18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f858 	bl	800abb0 <TimerSetTimeout>
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f383 8810 	msr	PRIMASK, r3
}
 800ab0a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800ab0c:	bf00      	nop
 800ab0e:	3724      	adds	r7, #36	; 0x24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd90      	pop	{r4, r7, pc}
 800ab14:	0800b30c 	.word	0x0800b30c
 800ab18:	20000574 	.word	0x20000574

0800ab1c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ab22:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <UTIL_TIMER_GetCurrentTime+0x20>)
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	4798      	blx	r3
 800ab28:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800ab2a:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <UTIL_TIMER_GetCurrentTime+0x20>)
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
 800ab32:	4603      	mov	r3, r0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	0800b30c 	.word	0x0800b30c

0800ab40 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ab48:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	4798      	blx	r3
 800ab4e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ab50:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
 800ab58:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	68f9      	ldr	r1, [r7, #12]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	1a8a      	subs	r2, r1, r2
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	4603      	mov	r3, r0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	0800b30c 	.word	0x0800b30c

0800ab78 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ab80:	4b0a      	ldr	r3, [pc, #40]	; (800abac <TimerExists+0x34>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ab86:	e008      	b.n	800ab9a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d101      	bne.n	800ab94 <TimerExists+0x1c>
    {
      return true;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e006      	b.n	800aba2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f3      	bne.n	800ab88 <TimerExists+0x10>
  }
  return false;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr
 800abac:	20000574 	.word	0x20000574

0800abb0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800abb8:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <TimerSetTimeout+0x50>)
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	4798      	blx	r3
 800abbe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681c      	ldr	r4, [r3, #0]
 800abca:	4b0d      	ldr	r3, [pc, #52]	; (800ac00 <TimerSetTimeout+0x50>)
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	4798      	blx	r3
 800abd0:	4602      	mov	r2, r0
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	429c      	cmp	r4, r3
 800abd8:	d207      	bcs.n	800abea <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <TimerSetTimeout+0x50>)
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	4798      	blx	r3
 800abe0:	4602      	mov	r2, r0
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	441a      	add	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <TimerSetTimeout+0x50>)
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	4610      	mov	r0, r2
 800abf4:	4798      	blx	r3
}
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd90      	pop	{r4, r7, pc}
 800abfe:	bf00      	nop
 800ac00:	0800b30c 	.word	0x0800b30c

0800ac04 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ac0c:	4b14      	ldr	r3, [pc, #80]	; (800ac60 <TimerInsertTimer+0x5c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ac12:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <TimerInsertTimer+0x5c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800ac1a:	e012      	b.n	800ac42 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d905      	bls.n	800ac34 <TimerInsertTimer+0x30>
    {
        cur = next;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	e006      	b.n	800ac42 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	615a      	str	r2, [r3, #20]
        return;
 800ac40:	e009      	b.n	800ac56 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1e8      	bne.n	800ac1c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	615a      	str	r2, [r3, #20]
}
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bc80      	pop	{r7}
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	20000574 	.word	0x20000574

0800ac64 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ac6c:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <TimerInsertNewHeadTimer+0x38>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ac84:	4a05      	ldr	r2, [pc, #20]	; (800ac9c <TimerInsertNewHeadTimer+0x38>)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ac8a:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <TimerInsertNewHeadTimer+0x38>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff ff8e 	bl	800abb0 <TimerSetTimeout>
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000574 	.word	0x20000574

0800aca0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  int i = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800acac:	e00e      	b.n	800accc <ee_skip_atoi+0x2c>
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	4618      	mov	r0, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	1c59      	adds	r1, r3, #1
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	6011      	str	r1, [r2, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	4403      	add	r3, r0
 800acc8:	3b30      	subs	r3, #48	; 0x30
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b2f      	cmp	r3, #47	; 0x2f
 800acd4:	d904      	bls.n	800ace0 <ee_skip_atoi+0x40>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b39      	cmp	r3, #57	; 0x39
 800acde:	d9e6      	bls.n	800acae <ee_skip_atoi+0xe>
  return i;
 800ace0:	68fb      	ldr	r3, [r7, #12]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bc80      	pop	{r7}
 800acea:	4770      	bx	lr

0800acec <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800acec:	b480      	push	{r7}
 800acee:	b099      	sub	sp, #100	; 0x64
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800acfa:	4b72      	ldr	r3, [pc, #456]	; (800aec4 <ee_number+0x1d8>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ad00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <ee_number+0x24>
 800ad0a:	4b6f      	ldr	r3, [pc, #444]	; (800aec8 <ee_number+0x1dc>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	dd02      	ble.n	800ad1c <ee_number+0x30>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b24      	cmp	r3, #36	; 0x24
 800ad1a:	dd01      	ble.n	800ad20 <ee_number+0x34>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e0cc      	b.n	800aeba <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 800ad20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <ee_number+0x42>
 800ad2a:	2330      	movs	r3, #48	; 0x30
 800ad2c:	e000      	b.n	800ad30 <ee_number+0x44>
 800ad2e:	2320      	movs	r3, #32
 800ad30:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800ad3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad3c:	f003 0302 	and.w	r3, r3, #2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <ee_number+0x70>
  {
    if (num < 0)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	da08      	bge.n	800ad5c <ee_number+0x70>
    {
      sign = '-';
 800ad4a:	232d      	movs	r3, #45	; 0x2d
 800ad4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	425b      	negs	r3, r3
 800ad54:	607b      	str	r3, [r7, #4]
      size--;
 800ad56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d120      	bne.n	800ada8 <ee_number+0xbc>
    tmp[i++] = '0';
 800ad66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	657a      	str	r2, [r7, #84]	; 0x54
 800ad6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ad70:	4413      	add	r3, r2
 800ad72:	2230      	movs	r2, #48	; 0x30
 800ad74:	f803 2c50 	strb.w	r2, [r3, #-80]
 800ad78:	e019      	b.n	800adae <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad82:	fb02 f201 	mul.w	r2, r2, r1
 800ad86:	1a9b      	subs	r3, r3, r2
 800ad88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad8a:	441a      	add	r2, r3
 800ad8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad8e:	1c59      	adds	r1, r3, #1
 800ad90:	6579      	str	r1, [r7, #84]	; 0x54
 800ad92:	7812      	ldrb	r2, [r2, #0]
 800ad94:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ad98:	440b      	add	r3, r1
 800ad9a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e5      	bne.n	800ad7a <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 800adae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	dd01      	ble.n	800adba <ee_number+0xce>
 800adb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800adba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800adbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800adc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d112      	bne.n	800adf2 <ee_number+0x106>
 800adcc:	e00c      	b.n	800ade8 <ee_number+0xfc>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	60fa      	str	r2, [r7, #12]
 800add4:	2220      	movs	r2, #32
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	3b01      	subs	r3, #1
 800addc:	60bb      	str	r3, [r7, #8]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <ee_number+0xfc>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	e068      	b.n	800aeba <ee_number+0x1ce>
 800ade8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adea:	1e5a      	subs	r2, r3, #1
 800adec:	66ba      	str	r2, [r7, #104]	; 0x68
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dced      	bgt.n	800adce <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 800adf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01b      	beq.n	800ae32 <ee_number+0x146>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	60fa      	str	r2, [r7, #12]
 800ae00:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ae04:	701a      	strb	r2, [r3, #0]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	60bb      	str	r3, [r7, #8]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10f      	bne.n	800ae32 <ee_number+0x146>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	e051      	b.n	800aeba <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	60fa      	str	r2, [r7, #12]
 800ae1c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	60bb      	str	r3, [r7, #8]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <ee_number+0x146>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	e043      	b.n	800aeba <ee_number+0x1ce>
 800ae32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae34:	1e5a      	subs	r2, r3, #1
 800ae36:	66ba      	str	r2, [r7, #104]	; 0x68
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dcec      	bgt.n	800ae16 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800ae3c:	e00c      	b.n	800ae58 <ee_number+0x16c>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	60fa      	str	r2, [r7, #12]
 800ae44:	2230      	movs	r2, #48	; 0x30
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	60bb      	str	r3, [r7, #8]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <ee_number+0x16c>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	e030      	b.n	800aeba <ee_number+0x1ce>
 800ae58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5a:	1e5a      	subs	r2, r3, #1
 800ae5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae60:	429a      	cmp	r2, r3
 800ae62:	dbec      	blt.n	800ae3e <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800ae64:	e010      	b.n	800ae88 <ee_number+0x19c>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	60fa      	str	r2, [r7, #12]
 800ae6c:	f107 0110 	add.w	r1, r7, #16
 800ae70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae72:	440a      	add	r2, r1
 800ae74:	7812      	ldrb	r2, [r2, #0]
 800ae76:	701a      	strb	r2, [r3, #0]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	60bb      	str	r3, [r7, #8]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <ee_number+0x19c>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	e018      	b.n	800aeba <ee_number+0x1ce>
 800ae88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae8a:	1e5a      	subs	r2, r3, #1
 800ae8c:	657a      	str	r2, [r7, #84]	; 0x54
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dce9      	bgt.n	800ae66 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 800ae92:	e00c      	b.n	800aeae <ee_number+0x1c2>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	60fa      	str	r2, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	60bb      	str	r3, [r7, #8]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <ee_number+0x1c2>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	e005      	b.n	800aeba <ee_number+0x1ce>
 800aeae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeb0:	1e5a      	subs	r2, r3, #1
 800aeb2:	66ba      	str	r2, [r7, #104]	; 0x68
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dced      	bgt.n	800ae94 <ee_number+0x1a8>

  return str;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3764      	adds	r7, #100	; 0x64
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bc80      	pop	{r7}
 800aec2:	4770      	bx	lr
 800aec4:	20000030 	.word	0x20000030
 800aec8:	20000034 	.word	0x20000034

0800aecc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b092      	sub	sp, #72	; 0x48
 800aed0:	af04      	add	r7, sp, #16
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dc01      	bgt.n	800aee4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	e142      	b.n	800b16a <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aee8:	e12a      	b.n	800b140 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800aeea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	429a      	cmp	r2, r3
 800aef6:	f280 8131 	bge.w	800b15c <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b25      	cmp	r3, #37	; 0x25
 800af00:	d006      	beq.n	800af10 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	1c59      	adds	r1, r3, #1
 800af08:	62f9      	str	r1, [r7, #44]	; 0x2c
 800af0a:	7812      	ldrb	r2, [r2, #0]
 800af0c:	701a      	strb	r2, [r3, #0]
      continue;
 800af0e:	e114      	b.n	800b13a <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3301      	adds	r3, #1
 800af18:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b30      	cmp	r3, #48	; 0x30
 800af20:	d103      	bne.n	800af2a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	f043 0301 	orr.w	r3, r3, #1
 800af28:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 800af2a:	f04f 33ff 	mov.w	r3, #4294967295
 800af2e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b2f      	cmp	r3, #47	; 0x2f
 800af36:	d908      	bls.n	800af4a <tiny_vsnprintf_like+0x7e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b39      	cmp	r3, #57	; 0x39
 800af3e:	d804      	bhi.n	800af4a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff feac 	bl	800aca0 <ee_skip_atoi>
 800af48:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 800af4a:	f04f 33ff 	mov.w	r3, #4294967295
 800af4e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 800af56:	230a      	movs	r3, #10
 800af58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	3b58      	subs	r3, #88	; 0x58
 800af60:	2b20      	cmp	r3, #32
 800af62:	f200 8094 	bhi.w	800b08e <tiny_vsnprintf_like+0x1c2>
 800af66:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <tiny_vsnprintf_like+0xa0>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800b077 	.word	0x0800b077
 800af70:	0800b08f 	.word	0x0800b08f
 800af74:	0800b08f 	.word	0x0800b08f
 800af78:	0800b08f 	.word	0x0800b08f
 800af7c:	0800b08f 	.word	0x0800b08f
 800af80:	0800b08f 	.word	0x0800b08f
 800af84:	0800b08f 	.word	0x0800b08f
 800af88:	0800b08f 	.word	0x0800b08f
 800af8c:	0800b08f 	.word	0x0800b08f
 800af90:	0800b08f 	.word	0x0800b08f
 800af94:	0800b08f 	.word	0x0800b08f
 800af98:	0800affb 	.word	0x0800affb
 800af9c:	0800b085 	.word	0x0800b085
 800afa0:	0800b08f 	.word	0x0800b08f
 800afa4:	0800b08f 	.word	0x0800b08f
 800afa8:	0800b08f 	.word	0x0800b08f
 800afac:	0800b08f 	.word	0x0800b08f
 800afb0:	0800b085 	.word	0x0800b085
 800afb4:	0800b08f 	.word	0x0800b08f
 800afb8:	0800b08f 	.word	0x0800b08f
 800afbc:	0800b08f 	.word	0x0800b08f
 800afc0:	0800b08f 	.word	0x0800b08f
 800afc4:	0800b08f 	.word	0x0800b08f
 800afc8:	0800b08f 	.word	0x0800b08f
 800afcc:	0800b08f 	.word	0x0800b08f
 800afd0:	0800b08f 	.word	0x0800b08f
 800afd4:	0800b08f 	.word	0x0800b08f
 800afd8:	0800b01b 	.word	0x0800b01b
 800afdc:	0800b08f 	.word	0x0800b08f
 800afe0:	0800b0db 	.word	0x0800b0db
 800afe4:	0800b08f 	.word	0x0800b08f
 800afe8:	0800b08f 	.word	0x0800b08f
 800afec:	0800b07f 	.word	0x0800b07f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aff6:	2220      	movs	r2, #32
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	3b01      	subs	r3, #1
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	2b00      	cmp	r3, #0
 800b004:	dcf4      	bgt.n	800aff0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	1d1a      	adds	r2, r3, #4
 800b00a:	603a      	str	r2, [r7, #0]
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b014:	b2ca      	uxtb	r2, r1
 800b016:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b018:	e08f      	b.n	800b13a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	1d1a      	adds	r2, r3, #4
 800b01e:	603a      	str	r2, [r7, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <tiny_vsnprintf_like+0x162>
 800b02a:	4b52      	ldr	r3, [pc, #328]	; (800b174 <tiny_vsnprintf_like+0x2a8>)
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b030:	f7f5 f8a2 	bl	8000178 <strlen>
 800b034:	4603      	mov	r3, r0
 800b036:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b038:	e004      	b.n	800b044 <tiny_vsnprintf_like+0x178>
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b040:	2220      	movs	r2, #32
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	1e5a      	subs	r2, r3, #1
 800b048:	61fa      	str	r2, [r7, #28]
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	dbf4      	blt.n	800b03a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b050:	2300      	movs	r3, #0
 800b052:	62bb      	str	r3, [r7, #40]	; 0x28
 800b054:	e00a      	b.n	800b06c <tiny_vsnprintf_like+0x1a0>
 800b056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b058:	1c53      	adds	r3, r2, #1
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	1c59      	adds	r1, r3, #1
 800b060:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b062:	7812      	ldrb	r2, [r2, #0]
 800b064:	701a      	strb	r2, [r3, #0]
 800b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b068:	3301      	adds	r3, #1
 800b06a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	dbf0      	blt.n	800b056 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b074:	e061      	b.n	800b13a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b07c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b07e:	2310      	movs	r3, #16
 800b080:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b082:	e02d      	b.n	800b0e0 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	f043 0302 	orr.w	r3, r3, #2
 800b08a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b08c:	e025      	b.n	800b0da <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	2b25      	cmp	r3, #37	; 0x25
 800b094:	d004      	beq.n	800b0a0 <tiny_vsnprintf_like+0x1d4>
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b09c:	2225      	movs	r2, #37	; 0x25
 800b09e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1ad2      	subs	r2, r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	da17      	bge.n	800b0de <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	1c59      	adds	r1, r3, #1
 800b0bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	e002      	b.n	800b0ca <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b0ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	db2f      	blt.n	800b138 <tiny_vsnprintf_like+0x26c>
 800b0d8:	e002      	b.n	800b0e0 <tiny_vsnprintf_like+0x214>
        break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800b0de:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	2b6c      	cmp	r3, #108	; 0x6c
 800b0e4:	d105      	bne.n	800b0f2 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	1d1a      	adds	r2, r3, #4
 800b0ea:	603a      	str	r2, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b0f0:	e00f      	b.n	800b112 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	f003 0302 	and.w	r3, r3, #2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d005      	beq.n	800b108 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	1d1a      	adds	r2, r3, #4
 800b100:	603a      	str	r2, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	637b      	str	r3, [r7, #52]	; 0x34
 800b106:	e004      	b.n	800b112 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	1d1a      	adds	r2, r3, #4
 800b10c:	603a      	str	r2, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	1e5a      	subs	r2, r3, #1
 800b116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	1acb      	subs	r3, r1, r3
 800b11c:	1ad1      	subs	r1, r2, r3
 800b11e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	9302      	str	r3, [sp, #8]
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	9301      	str	r3, [sp, #4]
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b130:	f7ff fddc 	bl	800acec <ee_number>
 800b134:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b136:	e000      	b.n	800b13a <tiny_vsnprintf_like+0x26e>
        continue;
 800b138:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3301      	adds	r3, #1
 800b13e:	607b      	str	r3, [r7, #4]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f47f aed0 	bne.w	800aeea <tiny_vsnprintf_like+0x1e>
 800b14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	1ad2      	subs	r2, r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	3b01      	subs	r3, #1
 800b154:	429a      	cmp	r2, r3
 800b156:	f6bf aec8 	bge.w	800aeea <tiny_vsnprintf_like+0x1e>
 800b15a:	e000      	b.n	800b15e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800b15c:	bf00      	nop
  }

  *str = '\0';
 800b15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b160:	2200      	movs	r2, #0
 800b162:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	1ad3      	subs	r3, r2, r3
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3738      	adds	r7, #56	; 0x38
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	0800b2e4 	.word	0x0800b2e4

0800b178 <__libc_init_array>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	4d0d      	ldr	r5, [pc, #52]	; (800b1b0 <__libc_init_array+0x38>)
 800b17c:	4c0d      	ldr	r4, [pc, #52]	; (800b1b4 <__libc_init_array+0x3c>)
 800b17e:	1b64      	subs	r4, r4, r5
 800b180:	10a4      	asrs	r4, r4, #2
 800b182:	2600      	movs	r6, #0
 800b184:	42a6      	cmp	r6, r4
 800b186:	d109      	bne.n	800b19c <__libc_init_array+0x24>
 800b188:	4d0b      	ldr	r5, [pc, #44]	; (800b1b8 <__libc_init_array+0x40>)
 800b18a:	4c0c      	ldr	r4, [pc, #48]	; (800b1bc <__libc_init_array+0x44>)
 800b18c:	f000 f840 	bl	800b210 <_init>
 800b190:	1b64      	subs	r4, r4, r5
 800b192:	10a4      	asrs	r4, r4, #2
 800b194:	2600      	movs	r6, #0
 800b196:	42a6      	cmp	r6, r4
 800b198:	d105      	bne.n	800b1a6 <__libc_init_array+0x2e>
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a0:	4798      	blx	r3
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7ee      	b.n	800b184 <__libc_init_array+0xc>
 800b1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1aa:	4798      	blx	r3
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	e7f2      	b.n	800b196 <__libc_init_array+0x1e>
 800b1b0:	0800b560 	.word	0x0800b560
 800b1b4:	0800b560 	.word	0x0800b560
 800b1b8:	0800b560 	.word	0x0800b560
 800b1bc:	0800b564 	.word	0x0800b564

0800b1c0 <memcpy>:
 800b1c0:	440a      	add	r2, r1
 800b1c2:	4291      	cmp	r1, r2
 800b1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1c8:	d100      	bne.n	800b1cc <memcpy+0xc>
 800b1ca:	4770      	bx	lr
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	d1f9      	bne.n	800b1ce <memcpy+0xe>
 800b1da:	bd10      	pop	{r4, pc}

0800b1dc <memset>:
 800b1dc:	4402      	add	r2, r0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d100      	bne.n	800b1e6 <memset+0xa>
 800b1e4:	4770      	bx	lr
 800b1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ea:	e7f9      	b.n	800b1e0 <memset+0x4>

0800b1ec <strncmp>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	b16a      	cbz	r2, 800b20c <strncmp+0x20>
 800b1f0:	3901      	subs	r1, #1
 800b1f2:	1884      	adds	r4, r0, r2
 800b1f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b1f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d103      	bne.n	800b208 <strncmp+0x1c>
 800b200:	42a0      	cmp	r0, r4
 800b202:	d001      	beq.n	800b208 <strncmp+0x1c>
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1f5      	bne.n	800b1f4 <strncmp+0x8>
 800b208:	1a98      	subs	r0, r3, r2
 800b20a:	bd10      	pop	{r4, pc}
 800b20c:	4610      	mov	r0, r2
 800b20e:	e7fc      	b.n	800b20a <strncmp+0x1e>

0800b210 <_init>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	bf00      	nop
 800b214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b216:	bc08      	pop	{r3}
 800b218:	469e      	mov	lr, r3
 800b21a:	4770      	bx	lr

0800b21c <_fini>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	bf00      	nop
 800b220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b222:	bc08      	pop	{r3}
 800b224:	469e      	mov	lr, r3
 800b226:	4770      	bx	lr
